# encoding: UTF-8
# Generated by wsdl2ruby (SOAP4R-NG/2.0.4)
require_relative 'ValidationAvailabilityAndCommitmentServiceDefinitions.rb'
require 'soap/mapping'

module FedexWebServices; module Soap; module ValidationAvailabilityAndCommitment

module ValidationAvailabilityAndCommitmentServiceDefinitionsMappingRegistry
  EncodedRegistry = ::SOAP::Mapping::EncodedRegistry.new
  LiteralRegistry = ::SOAP::Mapping::LiteralRegistry.new
  NsV14 = "http://fedex.com/ws/vacs/v14"

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AdditionalLabelsDetail,
    :schema_type => XSD::QName.new(NsV14, "AdditionalLabelsDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AdditionalLabelsType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["count", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Count")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address,
    :schema_type => XSD::QName.new(NsV14, "Address"),
    :schema_element => [
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PostalCode")], [0, 1]],
      ["countryCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CountryCode")]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AlcoholDetail,
    :schema_type => XSD::QName.new(NsV14, "AlcoholDetail"),
    :schema_element => [
      ["recipientType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AlcoholRecipientType", XSD::QName.new(NsV14, "RecipientType")], [0, 1]],
      ["shipperAgreementType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ShipperAgreementType")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedAccount,
    :schema_type => XSD::QName.new(NsV14, "AssociatedAccount"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedAccountNumberType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["accountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AccountNumber")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedFreightLineItemDetail,
    :schema_type => XSD::QName.new(NsV14, "AssociatedFreightLineItemDetail"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedTrackingId,
    :schema_type => XSD::QName.new(NsV14, "AssociatedTrackingId"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedTrackingIdType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["trackingId", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId", XSD::QName.new(NsV14, "TrackingId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryClassificationDetail,
    :schema_type => XSD::QName.new(NsV14, "BatteryClassificationDetail"),
    :schema_element => [
      ["material", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryMaterialType", XSD::QName.new(NsV14, "Material")], [0, 1]],
      ["packing", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryPackingType", XSD::QName.new(NsV14, "Packing")], [0, 1]],
      ["regulatorySubType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryRegulatorySubType", XSD::QName.new(NsV14, "RegulatorySubType")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BrokerDetail,
    :schema_type => XSD::QName.new(NsV14, "BrokerDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BrokerType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["broker", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "Broker")], [0, 1]],
      ["brokerageProcessingChargesPayment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment", XSD::QName.new(NsV14, "BrokerageProcessingChargesPayment")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CertificateOfOriginDetail,
    :schema_type => XSD::QName.new(NsV14, "CertificateOfOriginDetail"),
    :schema_element => [
      ["documentFormat", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "DocumentFormat")], [0, 1]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail,
    :schema_type => XSD::QName.new(NsV14, "ClientDetail"),
    :schema_element => [
      ["accountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AccountNumber")]],
      ["meterNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "MeterNumber")]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodAddTransportationChargesDetail,
    :schema_type => XSD::QName.new(NsV14, "CodAddTransportationChargesDetail"),
    :schema_element => [
      ["rateTypeBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateTypeBasisType", XSD::QName.new(NsV14, "RateTypeBasis")], [0, 1]],
      ["chargeBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodAddTransportationChargeBasisType", XSD::QName.new(NsV14, "ChargeBasis")], [0, 1]],
      ["chargeBasisLevel", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ChargeBasisLevelType", XSD::QName.new(NsV14, "ChargeBasisLevel")], [0, 1]],
      ["rateLevelBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateLevelBasisType", XSD::QName.new(NsV14, "RateLevelBasis")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodDetail,
    :schema_type => XSD::QName.new(NsV14, "CodDetail"),
    :schema_element => [
      ["codCollectionAmount", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "CodCollectionAmount")], [0, 1]],
      ["addTransportationChargesDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodAddTransportationChargesDetail", XSD::QName.new(NsV14, "AddTransportationChargesDetail")], [0, 1]],
      ["collectionType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodCollectionType", XSD::QName.new(NsV14, "CollectionType")], [0, 1]],
      ["codRecipient", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "CodRecipient")], [0, 1]],
      ["financialInstitutionContactAndAddress", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress", XSD::QName.new(NsV14, "FinancialInstitutionContactAndAddress")], [0, 1]],
      ["remitToName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "RemitToName")], [0, 1]],
      ["referenceIndicator", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodReturnReferenceIndicatorType", XSD::QName.new(NsV14, "ReferenceIndicator")], [0, 1]],
      ["returnTrackingId", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId", XSD::QName.new(NsV14, "ReturnTrackingId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommercialInvoice,
    :schema_type => XSD::QName.new(NsV14, "CommercialInvoice"),
    :schema_element => [
      ["comments", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "Comments")], [0, nil]],
      ["freightCharge", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "FreightCharge")], [0, 1]],
      ["taxesOrMiscellaneousCharge", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TaxesOrMiscellaneousCharge")], [0, 1]],
      ["taxesOrMiscellaneousChargeType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TaxesOrMiscellaneousChargeType", XSD::QName.new(NsV14, "TaxesOrMiscellaneousChargeType")], [0, 1]],
      ["packingCosts", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "PackingCosts")], [0, 1]],
      ["handlingCosts", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "HandlingCosts")], [0, 1]],
      ["specialInstructions", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialInstructions")], [0, 1]],
      ["declarationStatement", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DeclarationStatement")], [0, 1]],
      ["paymentTerms", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PaymentTerms")], [0, 1]],
      ["purpose", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PurposeOfShipmentType", XSD::QName.new(NsV14, "Purpose")], [0, 1]],
      ["purposeOfShipmentDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PurposeOfShipmentDescription")], [0, 1]],
      ["customerReferences", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReference[]", XSD::QName.new(NsV14, "CustomerReferences")], [0, nil]],
      ["originatorName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "OriginatorName")], [0, 1]],
      ["termsOfSale", ["SOAP::SOAPString", XSD::QName.new(NsV14, "TermsOfSale")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommercialInvoiceDetail,
    :schema_type => XSD::QName.new(NsV14, "CommercialInvoiceDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]],
      ["formVersion", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FormVersion")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Commodity,
    :schema_type => XSD::QName.new(NsV14, "Commodity"),
    :schema_element => [
      ["commodityId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CommodityId")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Name")], [0, 1]],
      ["numberOfPieces", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "NumberOfPieces")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["purpose", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommodityPurposeType", XSD::QName.new(NsV14, "Purpose")], [0, 1]],
      ["countryOfManufacture", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CountryOfManufacture")], [0, 1]],
      ["harmonizedCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "HarmonizedCode")], [0, 1]],
      ["weight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "Weight")], [0, 1]],
      ["quantity", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Quantity")], [0, 1]],
      ["quantityUnits", ["SOAP::SOAPString", XSD::QName.new(NsV14, "QuantityUnits")], [0, 1]],
      ["additionalMeasures", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Measure[]", XSD::QName.new(NsV14, "AdditionalMeasures")], [0, nil]],
      ["unitPrice", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "UnitPrice")], [0, 1]],
      ["customsValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "CustomsValue")], [0, 1]],
      ["exciseConditions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EdtExciseCondition[]", XSD::QName.new(NsV14, "ExciseConditions")], [0, nil]],
      ["exportLicenseNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ExportLicenseNumber")], [0, 1]],
      ["exportLicenseExpirationDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ExportLicenseExpirationDate")], [0, 1]],
      ["cIMarksAndNumbers", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CIMarksAndNumbers")], [0, 1]],
      ["partNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PartNumber")], [0, 1]],
      ["naftaDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaCommodityDetail", XSD::QName.new(NsV14, "NaftaDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConfigurableLabelReferenceEntry,
    :schema_type => XSD::QName.new(NsV14, "ConfigurableLabelReferenceEntry"),
    :schema_element => [
      ["zoneNumber", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "ZoneNumber")], [0, 1]],
      ["header", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Header")], [0, 1]],
      ["dataField", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DataField")], [0, 1]],
      ["literalValue", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LiteralValue")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationSpecialServicesRequested,
    :schema_type => XSD::QName.new(NsV14, "ConsolidationSpecialServicesRequested"),
    :schema_element => [
      ["specialServiceTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationSpecialServiceType[]", XSD::QName.new(NsV14, "SpecialServiceTypes")], [0, nil]],
      ["priorityAlertDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PriorityAlertDetail", XSD::QName.new(NsV14, "PriorityAlertDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Contact,
    :schema_type => XSD::QName.new(NsV14, "Contact"),
    :schema_element => [
      ["contactId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ContactId")], [0, 1]],
      ["personName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PersonName")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Title")], [0, 1]],
      ["companyName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CompanyName")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]],
      ["phoneExtension", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneExtension")], [0, 1]],
      ["tollFreePhoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "TollFreePhoneNumber")], [0, 1]],
      ["pagerNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PagerNumber")], [0, 1]],
      ["faxNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FaxNumber")], [0, 1]],
      ["eMailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EMailAddress")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress,
    :schema_type => XSD::QName.new(NsV14, "ContactAndAddress"),
    :schema_element => [
      ["contact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Contact", XSD::QName.new(NsV14, "Contact")], [0, 1]],
      ["address", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Address")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContentRecord,
    :schema_type => XSD::QName.new(NsV14, "ContentRecord"),
    :schema_element => [
      ["partNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PartNumber")], [0, 1]],
      ["itemNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ItemNumber")], [0, 1]],
      ["receivedQuantity", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "ReceivedQuantity")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCard,
    :schema_type => XSD::QName.new(NsV14, "CreditCard"),
    :schema_element => [
      ["number", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Number")], [0, 1]],
      ["creditCardType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardType", XSD::QName.new(NsV14, "CreditCardType")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ExpirationDate")], [0, 1]],
      ["lastAuthenticationByFedexDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "LastAuthenticationByFedexDate")], [0, 1]],
      ["verificationCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "VerificationCode")], [0, 1]],
      ["creditCardHolder", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedContactAndAddress", XSD::QName.new(NsV14, "CreditCardHolder")], [0, 1]],
      ["trackData", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "TrackData")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionAttributesDetail,
    :schema_type => XSD::QName.new(NsV14, "CreditCardTransactionAttributesDetail"),
    :schema_element => [
      ["types", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionAttributeType[]", XSD::QName.new(NsV14, "Types")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionDetail,
    :schema_type => XSD::QName.new(NsV14, "CreditCardTransactionDetail"),
    :schema_element => [
      ["authorizationId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AuthorizationId")], [0, 1]],
      ["authorizationType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardAuthorizationType", XSD::QName.new(NsV14, "AuthorizationType")], [0, 1]],
      ["settlementScheduleType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardSettlementScheduleType", XSD::QName.new(NsV14, "SettlementScheduleType")], [0, 1]],
      ["fraudDetectionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditFraudDetectionDetail", XSD::QName.new(NsV14, "FraudDetectionDetail")], [0, 1]],
      ["payorAuthenticationCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PayorAuthenticationCode")], [0, 1]],
      ["attributesDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionAttributesDetail", XSD::QName.new(NsV14, "AttributesDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditFraudDetectionDetail,
    :schema_type => XSD::QName.new(NsV14, "CreditFraudDetectionDetail"),
    :schema_element => [
      ["ipAddress", ["SOAP::SOAPString", XSD::QName.new(NsV14, "IpAddress")], [0, 1]],
      ["clientCookiesEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "ClientCookiesEnabled")], [0, 1]],
      ["devicePrint", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DevicePrint")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDeliveryWindowDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomDeliveryWindowDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDeliveryWindowType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["requestTime", ["SOAP::SOAPTime", XSD::QName.new(NsV14, "RequestTime")], [0, 1]],
      ["requestRange", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DateRange", XSD::QName.new(NsV14, "RequestRange")], [0, 1]],
      ["requestDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "RequestDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDiscountExclusionDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomDiscountExclusionDetail"),
    :schema_element => [
      ["excludedTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateDiscountType[]", XSD::QName.new(NsV14, "ExcludedTypes")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDocumentDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomDocumentDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["labelPrintingOrientation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelPrintingOrientationType", XSD::QName.new(NsV14, "LabelPrintingOrientation")], [0, 1]],
      ["labelRotation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelRotationType", XSD::QName.new(NsV14, "LabelRotation")], [0, 1]],
      ["specificationId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecificationId")], [0, 1]],
      ["customDocumentIdentifier", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomDocumentIdentifier")], [0, 1]],
      ["docTabContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContent", XSD::QName.new(NsV14, "DocTabContent")], [0, 1]],
      ["customContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelDetail", XSD::QName.new(NsV14, "CustomContent")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelBarcodeEntry,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelBarcodeEntry"),
    :schema_element => [
      ["position", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "Position")], [0, 1]],
      ["format", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["dataFields", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "DataFields")], [0, nil]],
      ["barHeight", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "BarHeight")], [0, 1]],
      ["thinBarWidth", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "ThinBarWidth")], [0, 1]],
      ["barcodeSymbology", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BarcodeSymbologyType", XSD::QName.new(NsV14, "BarcodeSymbology")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelBoxEntry,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelBoxEntry"),
    :schema_element => [
      ["topLeftCorner", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "TopLeftCorner")], [0, 1]],
      ["bottomRightCorner", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "BottomRightCorner")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelDetail"),
    :schema_element => [
      ["coordinateUnits", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelCoordinateUnits", XSD::QName.new(NsV14, "CoordinateUnits")], [0, 1]],
      ["textEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelTextEntry[]", XSD::QName.new(NsV14, "TextEntries")], [0, nil]],
      ["graphicEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelGraphicEntry[]", XSD::QName.new(NsV14, "GraphicEntries")], [0, nil]],
      ["boxEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelBoxEntry[]", XSD::QName.new(NsV14, "BoxEntries")], [0, nil]],
      ["textBoxEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelTextBoxEntry[]", XSD::QName.new(NsV14, "TextBoxEntries")], [0, nil]],
      ["barcodeEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelBarcodeEntry[]", XSD::QName.new(NsV14, "BarcodeEntries")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelGraphicEntry,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelGraphicEntry"),
    :schema_element => [
      ["position", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "Position")], [0, 1]],
      ["printerGraphicId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PrinterGraphicId")], [0, 1]],
      ["fileGraphicFullName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FileGraphicFullName")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelPosition"),
    :schema_element => [
      ["x", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "X")], [0, 1]],
      ["y", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "Y")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelTextBoxEntry,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelTextBoxEntry"),
    :schema_element => [
      ["topLeftCorner", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "TopLeftCorner")], [0, 1]],
      ["bottomRightCorner", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "BottomRightCorner")], [0, 1]],
      ["position", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "Position")], [0, 1]],
      ["format", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["dataFields", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "DataFields")], [0, nil]],
      ["thermalFontId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ThermalFontId")], [0, 1]],
      ["fontName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FontName")], [0, 1]],
      ["fontSize", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "FontSize")], [0, 1]],
      ["rotation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RotationType", XSD::QName.new(NsV14, "Rotation")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelTextEntry,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelTextEntry"),
    :schema_element => [
      ["position", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "Position")], [0, 1]],
      ["format", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["dataFields", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "DataFields")], [0, nil]],
      ["thermalFontId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ThermalFontId")], [0, 1]],
      ["fontName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FontName")], [0, 1]],
      ["fontSize", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "FontSize")], [0, 1]],
      ["rotation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RotationType", XSD::QName.new(NsV14, "Rotation")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomRatingOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomRatingOptionDetail"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomRatingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]],
      ["customDiscountExclusionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDiscountExclusionDetail", XSD::QName.new(NsV14, "CustomDiscountExclusionDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomTransitTimeDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomTransitTimeDetail"),
    :schema_element => [
      ["key", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Key")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage,
    :schema_type => XSD::QName.new(NsV14, "CustomerImageUsage"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsageType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["id", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ImageId", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["internalId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "InternalId")], [0, 1]],
      ["internalImageType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternalImageType", XSD::QName.new(NsV14, "InternalImageType")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReference,
    :schema_type => XSD::QName.new(NsV14, "CustomerReference"),
    :schema_element => [
      ["customerReferenceType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReferenceType", XSD::QName.new(NsV14, "CustomerReferenceType")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerSpecifiedLabelDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomerSpecifiedLabelDetail"),
    :schema_element => [
      ["docTabContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContent", XSD::QName.new(NsV14, "DocTabContent")], [0, 1]],
      ["customContentPosition", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RelativeVerticalPositionType", XSD::QName.new(NsV14, "CustomContentPosition")], [0, 1]],
      ["customContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelDetail", XSD::QName.new(NsV14, "CustomContent")], [0, 1]],
      ["configurableReferenceEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConfigurableLabelReferenceEntry[]", XSD::QName.new(NsV14, "ConfigurableReferenceEntries")], [0, nil]],
      ["maskedData", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelMaskableDataType[]", XSD::QName.new(NsV14, "MaskedData")], [0, nil]],
      ["secondaryBarcode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SecondaryBarcodeType", XSD::QName.new(NsV14, "SecondaryBarcode")], [0, 1]],
      ["termsAndConditionsLocalization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "TermsAndConditionsLocalization")], [0, 1]],
      ["regulatoryLabels", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryLabelContentDetail[]", XSD::QName.new(NsV14, "RegulatoryLabels")], [0, nil]],
      ["additionalLabels", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AdditionalLabelsDetail[]", XSD::QName.new(NsV14, "AdditionalLabels")], [0, nil]],
      ["airWaybillSuppressionCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "AirWaybillSuppressionCount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsClearanceDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomsClearanceDetail"),
    :schema_element => [
      ["brokers", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BrokerDetail[]", XSD::QName.new(NsV14, "Brokers")], [0, nil]],
      ["clearanceBrokerage", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClearanceBrokerageType", XSD::QName.new(NsV14, "ClearanceBrokerage")], [0, 1]],
      ["customsOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsOptionDetail", XSD::QName.new(NsV14, "CustomsOptions")], [0, 1]],
      ["importerOfRecord", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "ImporterOfRecord")], [0, 1]],
      ["recipientCustomsId", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecipientCustomsId", XSD::QName.new(NsV14, "RecipientCustomsId")], [0, 1]],
      ["dutiesPayment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment", XSD::QName.new(NsV14, "DutiesPayment")], [0, 1]],
      ["documentContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalDocumentContentType", XSD::QName.new(NsV14, "DocumentContent")], [0, 1]],
      ["customsValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "CustomsValue")], [0, 1]],
      ["freightOnValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightOnValueType", XSD::QName.new(NsV14, "FreightOnValue")], [0, 1]],
      ["insuranceCharges", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "InsuranceCharges")], [0, 1]],
      ["partiesToTransactionAreRelated", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "PartiesToTransactionAreRelated")], [0, 1]],
      ["commercialInvoice", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommercialInvoice", XSD::QName.new(NsV14, "CommercialInvoice")], [0, 1]],
      ["commodities", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Commodity[]", XSD::QName.new(NsV14, "Commodities")], [0, nil]],
      ["exportDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExportDetail", XSD::QName.new(NsV14, "ExportDetail")], [0, 1]],
      ["regulatoryControls", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryControlType[]", XSD::QName.new(NsV14, "RegulatoryControls")], [0, nil]],
      ["declarationStatementDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsDeclarationStatementDetail", XSD::QName.new(NsV14, "DeclarationStatementDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsDeclarationStatementDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomsDeclarationStatementDetail"),
    :schema_element => [
      ["types", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsDeclarationStatementType[]", XSD::QName.new(NsV14, "Types")], [0, nil]],
      ["naftaLowValueStatementDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaLowValueStatementDetail", XSD::QName.new(NsV14, "NaftaLowValueStatementDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomsOptionDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsOptionType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsContainer,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsContainer"),
    :schema_element => [
      ["packingType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousContainerPackingType", XSD::QName.new(NsV14, "PackingType")], [0, 1]],
      ["containerType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ContainerType")], [0, 1]],
      ["radioactiveContainerClass", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactiveContainerClassType", XSD::QName.new(NsV14, "RadioactiveContainerClass")], [0, 1]],
      ["numberOfContainers", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "NumberOfContainers")], [0, 1]],
      ["hazardousCommodities", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityContent[]", XSD::QName.new(NsV14, "HazardousCommodities")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsDetail,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsDetail"),
    :schema_element => [
      ["uploadedTrackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "UploadedTrackingNumber")], [0, 1]],
      ["regulation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityRegulationType", XSD::QName.new(NsV14, "Regulation")], [0, 1]],
      ["accessibility", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsAccessibilityType", XSD::QName.new(NsV14, "Accessibility")], [0, 1]],
      ["cargoAircraftOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "CargoAircraftOnly")], [0, 1]],
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]],
      ["packingOption", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsPackingOptionType", XSD::QName.new(NsV14, "PackingOption")], [0, 1]],
      ["referenceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ReferenceId")], [0, 1]],
      ["containers", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsContainer[]", XSD::QName.new(NsV14, "Containers")], [0, nil]],
      ["packaging", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackagingDetail", XSD::QName.new(NsV14, "Packaging")], [0, 1]],
      ["signatory", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsSignatory", XSD::QName.new(NsV14, "Signatory")], [0, 1]],
      ["emergencyContactNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EmergencyContactNumber")], [0, 1]],
      ["offeror", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Offeror")], [0, 1]],
      ["infectiousSubstanceResponsibleContact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Contact", XSD::QName.new(NsV14, "InfectiousSubstanceResponsibleContact")], [0, 1]],
      ["additionalHandling", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AdditionalHandling")], [0, 1]],
      ["radioactivityDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactivityDetail", XSD::QName.new(NsV14, "RadioactivityDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsShippersDeclarationDetail,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsShippersDeclarationDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsSignatory,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsSignatory"),
    :schema_element => [
      ["contactName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ContactName")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Title")], [0, 1]],
      ["place", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Place")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DateRange,
    :schema_type => XSD::QName.new(NsV14, "DateRange"),
    :schema_element => [
      ["begins", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "Begins")], [0, 1]],
      ["ends", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "Ends")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeletionDetail,
    :schema_type => XSD::QName.new(NsV14, "DeletionDetail"),
    :schema_element => [
      ["deleteStatus", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeleteRecordedShipmentRequestServiceLevel", XSD::QName.new(NsV14, "DeleteStatus")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeliveryOnInvoiceAcceptanceDetail,
    :schema_type => XSD::QName.new(NsV14, "DeliveryOnInvoiceAcceptanceDetail"),
    :schema_element => [
      ["recipient", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "Recipient")], [0, 1]],
      ["trackingId", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId", XSD::QName.new(NsV14, "TrackingId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DestinationControlDetail,
    :schema_type => XSD::QName.new(NsV14, "DestinationControlDetail"),
    :schema_element => [
      ["statementTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DestinationControlStatementType[]", XSD::QName.new(NsV14, "StatementTypes")], [0, nil]],
      ["destinationCountries", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationCountries")], [0, 1]],
      ["endUser", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EndUser")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DetentionDetail,
    :schema_type => XSD::QName.new(NsV14, "DetentionDetail"),
    :schema_element => [
      ["duration", ["SOAP::SOAPDuration", XSD::QName.new(NsV14, "Duration")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions,
    :schema_type => XSD::QName.new(NsV14, "Dimensions"),
    :schema_element => [
      ["length", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Length")], [0, 1]],
      ["width", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Width")], [0, 1]],
      ["height", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Height")], [0, 1]],
      ["units", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearUnits", XSD::QName.new(NsV14, "Units")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContent,
    :schema_type => XSD::QName.new(NsV14, "DocTabContent"),
    :schema_element => [
      ["docTabContentType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentType", XSD::QName.new(NsV14, "DocTabContentType")], [0, 1]],
      ["zone001", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentZone001", XSD::QName.new(NsV14, "Zone001")], [0, 1]],
      ["barcoded", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentBarcoded", XSD::QName.new(NsV14, "Barcoded")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentBarcoded,
    :schema_type => XSD::QName.new(NsV14, "DocTabContentBarcoded"),
    :schema_element => [
      ["symbology", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BarcodeSymbologyType", XSD::QName.new(NsV14, "Symbology")], [0, 1]],
      ["specification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabZoneSpecification", XSD::QName.new(NsV14, "Specification")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentZone001,
    :schema_type => XSD::QName.new(NsV14, "DocTabContentZone001"),
    :schema_element => [
      ["docTabZoneSpecifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabZoneSpecification[]", XSD::QName.new(NsV14, "DocTabZoneSpecifications")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabZoneSpecification,
    :schema_type => XSD::QName.new(NsV14, "DocTabZoneSpecification"),
    :schema_element => [
      ["zoneNumber", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "ZoneNumber")], [0, 1]],
      ["header", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Header")], [0, 1]],
      ["dataField", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DataField")], [0, 1]],
      ["literalValue", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LiteralValue")], [0, 1]],
      ["justification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabZoneJustificationType", XSD::QName.new(NsV14, "Justification")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocumentFormatOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "DocumentFormatOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocumentFormatOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailDetail,
    :schema_type => XSD::QName.new(NsV14, "EMailDetail"),
    :schema_element => [
      ["emailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EmailAddress")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Name")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailLabelDetail,
    :schema_type => XSD::QName.new(NsV14, "EMailLabelDetail"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Message")], [0, 1]],
      ["recipients", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailRecipient[]", XSD::QName.new(NsV14, "Recipients")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailRecipient,
    :schema_type => XSD::QName.new(NsV14, "EMailRecipient"),
    :schema_element => [
      ["emailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EmailAddress")], [0, 1]],
      ["role", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AccessorRoleType", XSD::QName.new(NsV14, "Role")], [0, 1]],
      ["optionsRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EmailOptionsRequested", XSD::QName.new(NsV14, "OptionsRequested")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EdtExciseCondition,
    :schema_type => XSD::QName.new(NsV14, "EdtExciseCondition"),
    :schema_element => [
      ["category", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Category")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EmailOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "EmailOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EmailOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdDetail,
    :schema_type => XSD::QName.new(NsV14, "EtdDetail"),
    :schema_element => [
      ["confirmation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdConfirmationType", XSD::QName.new(NsV14, "Confirmation")], [0, 1]],
      ["attributes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdAttributeType[]", XSD::QName.new(NsV14, "Attributes")], [0, nil]],
      ["requestedDocumentCopies", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShippingDocumentType[]", XSD::QName.new(NsV14, "RequestedDocumentCopies")], [0, nil]],
      ["documents", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentDetail[]", XSD::QName.new(NsV14, "Documents")], [0, nil]],
      ["documentReferences", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentReferenceDetail[]", XSD::QName.new(NsV14, "DocumentReferences")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExportDeclarationDetail,
    :schema_type => XSD::QName.new(NsV14, "ExportDeclarationDetail"),
    :schema_element => [
      ["documentFormat", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "DocumentFormat")], [0, 1]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExportDetail,
    :schema_type => XSD::QName.new(NsV14, "ExportDetail"),
    :schema_element => [
      ["b13AFilingOption", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::B13AFilingOptionType", XSD::QName.new(NsV14, "B13AFilingOption")], [0, 1]],
      ["exportComplianceStatement", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ExportComplianceStatement")], [0, 1]],
      ["permitNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PermitNumber")], [0, 1]],
      ["destinationControlDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DestinationControlDetail", XSD::QName.new(NsV14, "DestinationControlDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExpressFreightDetail,
    :schema_type => XSD::QName.new(NsV14, "ExpressFreightDetail"),
    :schema_element => [
      ["packingListEnclosed", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "PackingListEnclosed")], [0, 1]],
      ["shippersLoadAndCount", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "ShippersLoadAndCount")], [0, 1]],
      ["bookingConfirmationNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "BookingConfirmationNumber")], [0, 1]],
      ["referenceLabelRequested", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "ReferenceLabelRequested")], [0, 1]],
      ["beforeDeliveryContact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExpressFreightDetailContact", XSD::QName.new(NsV14, "BeforeDeliveryContact")], [0, 1]],
      ["undeliverableContact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExpressFreightDetailContact", XSD::QName.new(NsV14, "UndeliverableContact")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExpressFreightDetailContact,
    :schema_type => XSD::QName.new(NsV14, "ExpressFreightDetailContact"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Name")], [0, 1]],
      ["phone", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Phone")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExtraLaborDetail,
    :schema_type => XSD::QName.new(NsV14, "ExtraLaborDetail"),
    :schema_element => [
      ["duration", ["SOAP::SOAPDuration", XSD::QName.new(NsV14, "Duration")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FaxDetail,
    :schema_type => XSD::QName.new(NsV14, "FaxDetail"),
    :schema_element => [
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FlatbedTrailerDetail,
    :schema_type => XSD::QName.new(NsV14, "FlatbedTrailerDetail"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FlatbedTrailerOption[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightAddressLabelDetail,
    :schema_type => XSD::QName.new(NsV14, "FreightAddressLabelDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["copies", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Copies")], [0, 1]],
      ["startingPosition", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PageQuadrantType", XSD::QName.new(NsV14, "StartingPosition")], [0, 1]],
      ["docTabContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContent", XSD::QName.new(NsV14, "DocTabContent")], [0, 1]],
      ["customContentPosition", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RelativeVerticalPositionType", XSD::QName.new(NsV14, "CustomContentPosition")], [0, 1]],
      ["customContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelDetail", XSD::QName.new(NsV14, "CustomContent")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightBillOfLadingDetail,
    :schema_type => XSD::QName.new(NsV14, "FreightBillOfLadingDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightGuaranteeDetail,
    :schema_type => XSD::QName.new(NsV14, "FreightGuaranteeDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightGuaranteeType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["date", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "Date")], [0, 1]],
      ["time", ["SOAP::SOAPTime", XSD::QName.new(NsV14, "Time")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentDetail,
    :schema_type => XSD::QName.new(NsV14, "FreightShipmentDetail"),
    :schema_element => [
      ["fedExFreightAccountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FedExFreightAccountNumber")], [0, 1]],
      ["fedExFreightBillingContactAndAddress", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress", XSD::QName.new(NsV14, "FedExFreightBillingContactAndAddress")], [0, 1]],
      ["alternateBilling", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "AlternateBilling")], [0, 1]],
      ["printedReferences", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PrintedReference[]", XSD::QName.new(NsV14, "PrintedReferences")], [0, nil]],
      ["role", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentRoleType", XSD::QName.new(NsV14, "Role")], [0, 1]],
      ["collectTermsType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightCollectTermsType", XSD::QName.new(NsV14, "CollectTermsType")], [0, 1]],
      ["declaredValuePerUnit", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "DeclaredValuePerUnit")], [0, 1]],
      ["declaredValueUnits", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DeclaredValueUnits")], [0, 1]],
      ["liabilityCoverageDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LiabilityCoverageDetail", XSD::QName.new(NsV14, "LiabilityCoverageDetail")], [0, 1]],
      ["coupons", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "Coupons")], [0, nil]],
      ["totalHandlingUnits", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "TotalHandlingUnits")], [0, 1]],
      ["clientDiscountPercent", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "ClientDiscountPercent")], [0, 1]],
      ["palletWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "PalletWeight")], [0, 1]],
      ["shipmentDimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions", XSD::QName.new(NsV14, "ShipmentDimensions")], [0, 1]],
      ["comment", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Comment")], [0, 1]],
      ["specialServicePayments", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightSpecialServicePayment[]", XSD::QName.new(NsV14, "SpecialServicePayments")], [0, nil]],
      ["hazardousMaterialsEmergencyContactNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "HazardousMaterialsEmergencyContactNumber")], [0, 1]],
      ["hazardousMaterialsOfferor", ["SOAP::SOAPString", XSD::QName.new(NsV14, "HazardousMaterialsOfferor")], [0, 1]],
      ["lineItems", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentLineItem[]", XSD::QName.new(NsV14, "LineItems")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentLineItem,
    :schema_type => XSD::QName.new(NsV14, "FreightShipmentLineItem"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["freightClass", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightClassType", XSD::QName.new(NsV14, "FreightClass")], [0, 1]],
      ["billingMaskName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "BillingMaskName")], [0, 1]],
      ["liabilityCoverageDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LiabilityCoverageDetail", XSD::QName.new(NsV14, "LiabilityCoverageDetail")], [0, 1]],
      ["handlingUnits", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "HandlingUnits")], [0, 1]],
      ["packaging", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PhysicalPackagingType", XSD::QName.new(NsV14, "Packaging")], [0, 1]],
      ["pieces", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Pieces")], [0, 1]],
      ["nmfcCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "NmfcCode")], [0, 1]],
      ["hazardousMaterials", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityOptionType", XSD::QName.new(NsV14, "HazardousMaterials")], [0, 1]],
      ["purchaseOrderNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PurchaseOrderNumber")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["weight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "Weight")], [0, 1]],
      ["dimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions", XSD::QName.new(NsV14, "Dimensions")], [0, 1]],
      ["volume", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Volume", XSD::QName.new(NsV14, "Volume")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightSpecialServicePayment,
    :schema_type => XSD::QName.new(NsV14, "FreightSpecialServicePayment"),
    :schema_element => [
      ["specialService", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialService")], [0, 1]],
      ["paymentType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentRoleType", XSD::QName.new(NsV14, "PaymentType")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GeneralAgencyAgreementDetail,
    :schema_type => XSD::QName.new(NsV14, "GeneralAgencyAgreementDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllServicesAndPackagingReply,
    :schema_type => XSD::QName.new(NsV14, "GetAllServicesAndPackagingReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification[]", XSD::QName.new(NsV14, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["productDetails", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductDetail[]", XSD::QName.new(NsV14, "ProductDetails")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllServicesAndPackagingRequest,
    :schema_type => XSD::QName.new(NsV14, "GetAllServicesAndPackagingRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail", XSD::QName.new(NsV14, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail", XSD::QName.new(NsV14, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["variableOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceOptionType[]", XSD::QName.new(NsV14, "VariableOptions")], [0, nil]],
      ["originRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "OriginRoutingCode")], [0, 1]],
      ["destinationRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationRoutingCode")], [0, 1]],
      ["formId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FormId")], [0, 1]],
      ["carrierCodes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType[]", XSD::QName.new(NsV14, "CarrierCodes")], [0, nil]],
      ["requestedShipment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShipment", XSD::QName.new(NsV14, "RequestedShipment")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllSpecialServicesReply,
    :schema_type => XSD::QName.new(NsV14, "GetAllSpecialServicesReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification[]", XSD::QName.new(NsV14, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["validShipmentSpecialServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentSpecialServiceDescription[]", XSD::QName.new(NsV14, "ValidShipmentSpecialServices")], [0, nil]],
      ["validPackageSpecialServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialServiceDescription[]", XSD::QName.new(NsV14, "ValidPackageSpecialServices")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllSpecialServicesRequest,
    :schema_type => XSD::QName.new(NsV14, "GetAllSpecialServicesRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail", XSD::QName.new(NsV14, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail", XSD::QName.new(NsV14, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["originRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "OriginRoutingCode")], [0, 1]],
      ["destinationRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationRoutingCode")], [0, 1]],
      ["formId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FormId")], [0, 1]],
      ["carrierCodes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType[]", XSD::QName.new(NsV14, "CarrierCodes")], [0, nil]],
      ["requestedShipment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShipment", XSD::QName.new(NsV14, "RequestedShipment")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityContent,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityContent"),
    :schema_element => [
      ["description", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityDescription", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["quantity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityQuantityDetail", XSD::QName.new(NsV14, "Quantity")], [0, 1]],
      ["innerReceptacles", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityInnerReceptacleDetail[]", XSD::QName.new(NsV14, "InnerReceptacles")], [0, nil]],
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityOptionDetail", XSD::QName.new(NsV14, "Options")], [0, 1]],
      ["radionuclideDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadionuclideDetail", XSD::QName.new(NsV14, "RadionuclideDetail")], [0, 1]],
      ["netExplosiveDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NetExplosiveDetail", XSD::QName.new(NsV14, "NetExplosiveDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityDescription,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityDescription"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["sequenceNumber", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "SequenceNumber")], [0, 1]],
      ["packingGroup", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackingGroupType", XSD::QName.new(NsV14, "PackingGroup")], [0, 1]],
      ["packingDetails", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackingDetail", XSD::QName.new(NsV14, "PackingDetails")], [0, 1]],
      ["reportableQuantity", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "ReportableQuantity")], [0, 1]],
      ["properShippingName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ProperShippingName")], [0, 1]],
      ["technicalName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "TechnicalName")], [0, 1]],
      ["percentage", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Percentage")], [0, 1]],
      ["hazardClass", ["SOAP::SOAPString", XSD::QName.new(NsV14, "HazardClass")], [0, 1]],
      ["subsidiaryClasses", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "SubsidiaryClasses")], [0, nil]],
      ["labelText", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LabelText")], [0, 1]],
      ["processingOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityDescriptionProcessingOptionType[]", XSD::QName.new(NsV14, "ProcessingOptions")], [0, nil]],
      ["authorization", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Authorization")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityInnerReceptacleDetail,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityInnerReceptacleDetail"),
    :schema_element => [
      ["quantity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityQuantityDetail", XSD::QName.new(NsV14, "Quantity")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityOptionDetail"),
    :schema_element => [
      ["labelTextOption", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityLabelTextOptionType", XSD::QName.new(NsV14, "LabelTextOption")], [0, 1]],
      ["customerSuppliedLabelText", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomerSuppliedLabelText")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackagingDetail,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityPackagingDetail"),
    :schema_element => [
      ["count", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Count")], [0, 1]],
      ["units", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Units")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackingDetail,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityPackingDetail"),
    :schema_element => [
      ["cargoAircraftOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "CargoAircraftOnly")], [0, 1]],
      ["packingInstructions", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PackingInstructions")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityQuantityDetail,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityQuantityDetail"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Amount")], [0, 1]],
      ["units", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Units")], [0, 1]],
      ["quantityType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityQuantityType", XSD::QName.new(NsV14, "QuantityType")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HoldAtLocationDetail,
    :schema_type => XSD::QName.new(NsV14, "HoldAtLocationDetail"),
    :schema_element => [
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]],
      ["locationContactAndAddress", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress", XSD::QName.new(NsV14, "LocationContactAndAddress")], [0, 1]],
      ["locationType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FedExLocationType", XSD::QName.new(NsV14, "LocationType")], [0, 1]],
      ["locationTypeForDisplay", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LocationTypeForDisplay")], [0, 1]],
      ["locationId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LocationId")], [0, 1]],
      ["locationNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "LocationNumber")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HomeDeliveryPremiumDetail,
    :schema_type => XSD::QName.new(NsV14, "HomeDeliveryPremiumDetail"),
    :schema_element => [
      ["homeDeliveryPremiumType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HomeDeliveryPremiumType", XSD::QName.new(NsV14, "HomeDeliveryPremiumType")], [0, 1]],
      ["date", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "Date")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalControlledExportDetail,
    :schema_type => XSD::QName.new(NsV14, "InternationalControlledExportDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalControlledExportType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["foreignTradeZoneCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ForeignTradeZoneCode")], [0, 1]],
      ["entryNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EntryNumber")], [0, 1]],
      ["licenseOrPermitNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LicenseOrPermitNumber")], [0, 1]],
      ["licenseOrPermitExpirationDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "LicenseOrPermitExpirationDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalDistributionSummaryDetail,
    :schema_type => XSD::QName.new(NsV14, "InternationalDistributionSummaryDetail"),
    :schema_element => [
      ["totalWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "TotalWeight")], [0, 1]],
      ["totalPackageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "TotalPackageCount")], [0, 1]],
      ["totalUniqueAddressCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "TotalUniqueAddressCount")], [0, 1]],
      ["totalCustomsValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalCustomsValue")], [0, 1]],
      ["totalInsuredValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalInsuredValue")], [0, 1]],
      ["totalFreightCharges", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalFreightCharges")], [0, 1]],
      ["totalInsuranceCharges", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalInsuranceCharges")], [0, 1]],
      ["totalTaxesOrMiscellaneousCharges", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalTaxesOrMiscellaneousCharges")], [0, 1]],
      ["totalHandlingCosts", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalHandlingCosts")], [0, 1]],
      ["totalPackingCosts", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalPackingCosts")], [0, 1]],
      ["dryIceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceDetail", XSD::QName.new(NsV14, "DryIceDetail")], [0, 1]],
      ["dangerousGoodsAccessibility", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsAccessibilityType", XSD::QName.new(NsV14, "DangerousGoodsAccessibility")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalTrafficInArmsRegulationsDetail,
    :schema_type => XSD::QName.new(NsV14, "InternationalTrafficInArmsRegulationsDetail"),
    :schema_element => [
      ["licenseOrExemptionNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LicenseOrExemptionNumber")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecification,
    :schema_type => XSD::QName.new(NsV14, "LabelSpecification"),
    :schema_element => [
      ["processingOptionsRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecificationProcessingOptionsRequested", XSD::QName.new(NsV14, "ProcessingOptionsRequested")], [0, 1]],
      ["dispositions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentDispositionDetail[]", XSD::QName.new(NsV14, "Dispositions")], [0, nil]],
      ["labelFormatType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelFormatType", XSD::QName.new(NsV14, "LabelFormatType")], [0, 1]],
      ["imageType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentImageType", XSD::QName.new(NsV14, "ImageType")], [0, 1]],
      ["labelStockType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelStockType", XSD::QName.new(NsV14, "LabelStockType")], [0, 1]],
      ["labelPrintingOrientation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelPrintingOrientationType", XSD::QName.new(NsV14, "LabelPrintingOrientation")], [0, 1]],
      ["labelRotation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelRotationType", XSD::QName.new(NsV14, "LabelRotation")], [0, 1]],
      ["labelOrder", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelOrderType", XSD::QName.new(NsV14, "LabelOrder")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]],
      ["printedLabelOrigin", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress", XSD::QName.new(NsV14, "PrintedLabelOrigin")], [0, 1]],
      ["customerSpecifiedDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerSpecifiedLabelDetail", XSD::QName.new(NsV14, "CustomerSpecifiedDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecificationProcessingOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "LabelSpecificationProcessingOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecificationProcessingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LiabilityCoverageDetail,
    :schema_type => XSD::QName.new(NsV14, "LiabilityCoverageDetail"),
    :schema_element => [
      ["coverageType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LiabilityCoverageType", XSD::QName.new(NsV14, "CoverageType")], [0, 1]],
      ["coverageAmount", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "CoverageAmount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearMeasure,
    :schema_type => XSD::QName.new(NsV14, "LinearMeasure"),
    :schema_element => [
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Value")], [0, 1]],
      ["units", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearUnits", XSD::QName.new(NsV14, "Units")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization,
    :schema_type => XSD::QName.new(NsV14, "Localization"),
    :schema_element => [
      ["languageCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LanguageCode")]],
      ["localeCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LocaleCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::MarkingOrTaggingDetail,
    :schema_type => XSD::QName.new(NsV14, "MarkingOrTaggingDetail"),
    :schema_element => [
      ["count", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "Count")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Measure,
    :schema_type => XSD::QName.new(NsV14, "Measure"),
    :schema_element => [
      ["quantity", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Quantity")], [0, 1]],
      ["units", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Units")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money,
    :schema_type => XSD::QName.new(NsV14, "Money"),
    :schema_element => [
      ["currency", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Currency")], [0, 1]],
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Amount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaCertificateOfOriginDetail,
    :schema_type => XSD::QName.new(NsV14, "NaftaCertificateOfOriginDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["blanketPeriod", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DateRange", XSD::QName.new(NsV14, "BlanketPeriod")], [0, 1]],
      ["importerSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaImporterSpecificationType", XSD::QName.new(NsV14, "ImporterSpecification")], [0, 1]],
      ["signatureContact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Contact", XSD::QName.new(NsV14, "SignatureContact")], [0, 1]],
      ["producerSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducerSpecificationType", XSD::QName.new(NsV14, "ProducerSpecification")], [0, 1]],
      ["producers", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducer[]", XSD::QName.new(NsV14, "Producers")], [0, nil]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaCommodityDetail,
    :schema_type => XSD::QName.new(NsV14, "NaftaCommodityDetail"),
    :schema_element => [
      ["preferenceCriterion", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaPreferenceCriterionCode", XSD::QName.new(NsV14, "PreferenceCriterion")], [0, 1]],
      ["producerDetermination", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducerDeterminationCode", XSD::QName.new(NsV14, "ProducerDetermination")], [0, 1]],
      ["producerId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ProducerId")], [0, 1]],
      ["netCostMethod", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaNetCostMethodCode", XSD::QName.new(NsV14, "NetCostMethod")], [0, 1]],
      ["netCostDateRange", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DateRange", XSD::QName.new(NsV14, "NetCostDateRange")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaLowValueStatementDetail,
    :schema_type => XSD::QName.new(NsV14, "NaftaLowValueStatementDetail"),
    :schema_element => [
      ["role", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsRoleType", XSD::QName.new(NsV14, "Role")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducer,
    :schema_type => XSD::QName.new(NsV14, "NaftaProducer"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["producer", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "Producer")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NetExplosiveDetail,
    :schema_type => XSD::QName.new(NsV14, "NetExplosiveDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NetExplosiveClassificationType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Amount")], [0, 1]],
      ["units", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Units")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NonBusinessTimeDetail,
    :schema_type => XSD::QName.new(NsV14, "NonBusinessTimeDetail"),
    :schema_element => [
      ["personDays", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PersonDays")], [0, 1]],
      ["personHours", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PersonHours")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification,
    :schema_type => XSD::QName.new(NsV14, "Notification"),
    :schema_element => [
      ["severity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "Severity")]],
      ["source", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Source")]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Code")], [0, 1]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Message")], [0, 1]],
      ["localizedMessage", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LocalizedMessage")], [0, 1]],
      ["messageParameters", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationParameter[]", XSD::QName.new(NsV14, "MessageParameters")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationContentSpecification,
    :schema_type => XSD::QName.new(NsV14, "NotificationContentSpecification"),
    :schema_element => [
      ["exclusions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationContentType[]", XSD::QName.new(NsV14, "Exclusions")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationDetail,
    :schema_type => XSD::QName.new(NsV14, "NotificationDetail"),
    :schema_element => [
      ["notificationType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationType", XSD::QName.new(NsV14, "NotificationType")], [0, 1]],
      ["emailDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailDetail", XSD::QName.new(NsV14, "EmailDetail")], [0, 1]],
      ["faxDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FaxDetail", XSD::QName.new(NsV14, "FaxDetail")], [0, 1]],
      ["smsDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmsDetail", XSD::QName.new(NsV14, "SmsDetail")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationParameter,
    :schema_type => XSD::QName.new(NsV14, "NotificationParameter"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Op900Detail,
    :schema_type => XSD::QName.new(NsV14, "Op900Detail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["reference", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReferenceType", XSD::QName.new(NsV14, "Reference")], [0, 1]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]],
      ["signatureName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SignatureName")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialHandlingDetail,
    :schema_type => XSD::QName.new(NsV14, "PackageSpecialHandlingDetail"),
    :schema_element => [
      ["packedBy", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackagePackedByType", XSD::QName.new(NsV14, "PackedBy")], [0, 1]],
      ["damageKnown", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DamageStatusType", XSD::QName.new(NsV14, "DamageKnown")], [0, 1]],
      ["inspectionStatus", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InspectionStatusType", XSD::QName.new(NsV14, "InspectionStatus")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialServiceDescription,
    :schema_type => XSD::QName.new(NsV14, "PackageSpecialServiceDescription"),
    :schema_element => [
      ["carrierCodesAndServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceTypesByCarrierCodeDetail[]", XSD::QName.new(NsV14, "CarrierCodesAndServices")], [0, nil]],
      ["subSpecialServiceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SubSpecialServiceId")], [0, 1]],
      ["subNames", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "SubNames")], [0, nil]],
      ["specialServiceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceId")], [0, 1]],
      ["names", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "Names")], [0, nil]],
      ["specialServiceType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceType")], [0, 1]],
      ["specialServiceSubType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceSubType")], [0, 1]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Code")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["astraDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AstraDescription")], [0, 1]],
      ["customerIntegrationMode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerIntegrationModeType", XSD::QName.new(NsV14, "CustomerIntegrationMode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialServicesRequested,
    :schema_type => XSD::QName.new(NsV14, "PackageSpecialServicesRequested"),
    :schema_element => [
      ["specialServiceTypes", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "SpecialServiceTypes")], [0, nil]],
      ["codDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodDetail", XSD::QName.new(NsV14, "CodDetail")], [0, 1]],
      ["dangerousGoodsDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsDetail", XSD::QName.new(NsV14, "DangerousGoodsDetail")], [0, 1]],
      ["batteryDetails", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryClassificationDetail[]", XSD::QName.new(NsV14, "BatteryDetails")], [0, nil]],
      ["dryIceWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "DryIceWeight")], [0, 1]],
      ["signatureOptionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionDetail", XSD::QName.new(NsV14, "SignatureOptionDetail")], [0, 1]],
      ["pieceCountVerificationBoxCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PieceCountVerificationBoxCount")], [0, 1]],
      ["priorityAlertDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PriorityAlertDetail", XSD::QName.new(NsV14, "PriorityAlertDetail")], [0, 1]],
      ["alcoholDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AlcoholDetail", XSD::QName.new(NsV14, "AlcoholDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageStatusDetail,
    :schema_type => XSD::QName.new(NsV14, "PackageStatusDetail"),
    :schema_element => [
      ["status", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageLineItemStatusType[]", XSD::QName.new(NsV14, "Status")], [0, nil]],
      ["deletionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeletionDetail", XSD::QName.new(NsV14, "DeletionDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackagingDescription,
    :schema_type => XSD::QName.new(NsV14, "PackagingDescription"),
    :schema_element => [
      ["packagingType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PackagingType")], [0, 1]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Code")], [0, 1]],
      ["names", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "Names")], [0, nil]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["astraDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AstraDescription")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PalletShrinkwrapDetail,
    :schema_type => XSD::QName.new(NsV14, "PalletShrinkwrapDetail"),
    :schema_element => [
      ["palletCount", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "PalletCount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PalletsProvidedDetail,
    :schema_type => XSD::QName.new(NsV14, "PalletsProvidedDetail"),
    :schema_element => [
      ["palletCount", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "PalletCount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedContact,
    :schema_type => XSD::QName.new(NsV14, "ParsedContact"),
    :schema_element => [
      ["personName", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedPersonName", XSD::QName.new(NsV14, "PersonName")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Title")], [0, 1]],
      ["companyName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CompanyName")], [0, 1]],
      ["phoneNumberCountryCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumberCountryCode")], [0, 1]],
      ["phoneNumberAreaCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumberAreaCode")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]],
      ["phoneExtension", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneExtension")], [0, 1]],
      ["pagerNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PagerNumber")], [0, 1]],
      ["faxNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FaxNumber")], [0, 1]],
      ["eMailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EMailAddress")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedContactAndAddress,
    :schema_type => XSD::QName.new(NsV14, "ParsedContactAndAddress"),
    :schema_element => [
      ["contact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedContact", XSD::QName.new(NsV14, "Contact")], [0, 1]],
      ["address", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Address")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedPersonName,
    :schema_type => XSD::QName.new(NsV14, "ParsedPersonName"),
    :schema_element => [
      ["prefix", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Prefix")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Title")], [0, 1]],
      ["firstName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FirstName")], [0, 1]],
      ["middleName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "MiddleName")], [0, 1]],
      ["lastName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LastName")], [0, 1]],
      ["suffix", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Suffix")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party,
    :schema_type => XSD::QName.new(NsV14, "Party"),
    :schema_element => [
      ["accountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AccountNumber")], [0, 1]],
      ["tins", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TaxpayerIdentification[]", XSD::QName.new(NsV14, "Tins")], [0, nil]],
      ["contact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Contact", XSD::QName.new(NsV14, "Contact")], [0, 1]],
      ["address", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Address")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment,
    :schema_type => XSD::QName.new(NsV14, "Payment"),
    :schema_element => [
      ["paymentType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PaymentType", XSD::QName.new(NsV14, "PaymentType")], [0, 1]],
      ["payor", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payor", XSD::QName.new(NsV14, "Payor")], [0, 1]],
      ["creditCard", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCard", XSD::QName.new(NsV14, "CreditCard")], [0, 1]],
      ["creditCardTransactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionDetail", XSD::QName.new(NsV14, "CreditCardTransactionDetail")], [0, 1]],
      ["amount", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "Amount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payor,
    :schema_type => XSD::QName.new(NsV14, "Payor"),
    :schema_element => [
      ["responsibleParty", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "ResponsibleParty")], [0, 1]],
      ["associatedAccounts", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedAccount[]", XSD::QName.new(NsV14, "AssociatedAccounts")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentDetail,
    :schema_type => XSD::QName.new(NsV14, "PendingShipmentDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ExpirationDate")], [0, 1]],
      ["emailLabelDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailLabelDetail", XSD::QName.new(NsV14, "EmailLabelDetail")], [0, 1]],
      ["processingOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentProcessingOptionsRequested", XSD::QName.new(NsV14, "ProcessingOptions")], [0, 1]],
      ["recommendedDocumentSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecommendedDocumentSpecification", XSD::QName.new(NsV14, "RecommendedDocumentSpecification")], [0, 1]],
      ["documentReferences", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentReferenceDetail[]", XSD::QName.new(NsV14, "DocumentReferences")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentProcessingOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "PendingShipmentProcessingOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentProcessingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupDetail,
    :schema_type => XSD::QName.new(NsV14, "PickupDetail"),
    :schema_element => [
      ["readyDateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsV14, "ReadyDateTime")], [0, 1]],
      ["latestPickupDateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsV14, "LatestPickupDateTime")], [0, 1]],
      ["courierInstructions", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CourierInstructions")], [0, 1]],
      ["requestType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupRequestType", XSD::QName.new(NsV14, "RequestType")], [0, 1]],
      ["requestSource", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupRequestSourceType", XSD::QName.new(NsV14, "RequestSource")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PrintedReference,
    :schema_type => XSD::QName.new(NsV14, "PrintedReference"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PrintedReferenceType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PriorityAlertDetail,
    :schema_type => XSD::QName.new(NsV14, "PriorityAlertDetail"),
    :schema_element => [
      ["enhancementTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PriorityAlertEnhancementType[]", XSD::QName.new(NsV14, "EnhancementTypes")], [0, nil]],
      ["content", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "Content")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductDetail,
    :schema_type => XSD::QName.new(NsV14, "ProductDetail"),
    :schema_element => [
      ["serviceDescription", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceDescription", XSD::QName.new(NsV14, "ServiceDescription")], [0, 1]],
      ["packagingDescription", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackagingDescription", XSD::QName.new(NsV14, "PackagingDescription")], [0, 1]],
      ["astraServiceDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AstraServiceDescription")], [0, 1]],
      ["scac", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Scac")], [0, 1]],
      ["appliedOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceOptionType[]", XSD::QName.new(NsV14, "AppliedOptions")], [0, nil]],
      ["appliedSubOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceSubOptionDetail", XSD::QName.new(NsV14, "AppliedSubOptions")], [0, 1]],
      ["derivedShipmentSignatureOption", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionDetail", XSD::QName.new(NsV14, "DerivedShipmentSignatureOption")], [0, 1]],
      ["derivedPackageSignatureOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionDetail[]", XSD::QName.new(NsV14, "DerivedPackageSignatureOptions")], [0, nil]],
      ["maximumWeights", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight[]", XSD::QName.new(NsV14, "MaximumWeights")], [0, nil]],
      ["maximumDimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions[]", XSD::QName.new(NsV14, "MaximumDimensions")], [0, nil]],
      ["maximumLengthPlusGirths", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearMeasure[]", XSD::QName.new(NsV14, "MaximumLengthPlusGirths")], [0, nil]],
      ["maximumInsuredValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "MaximumInsuredValue")], [0, 1]],
      ["derivedEtdType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CompletedEtdType", XSD::QName.new(NsV14, "DerivedEtdType")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName,
    :schema_type => XSD::QName.new(NsV14, "ProductName"),
    :schema_element => [
      ["type", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["encoding", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Encoding")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactivityDetail,
    :schema_type => XSD::QName.new(NsV14, "RadioactivityDetail"),
    :schema_element => [
      ["transportIndex", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "TransportIndex")], [0, 1]],
      ["surfaceReading", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "SurfaceReading")], [0, 1]],
      ["criticalitySafetyIndex", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "CriticalitySafetyIndex")], [0, 1]],
      ["dimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions", XSD::QName.new(NsV14, "Dimensions")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadionuclideActivity,
    :schema_type => XSD::QName.new(NsV14, "RadionuclideActivity"),
    :schema_element => [
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Value")], [0, 1]],
      ["unitOfMeasure", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactivityUnitOfMeasure", XSD::QName.new(NsV14, "UnitOfMeasure")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadionuclideDetail,
    :schema_type => XSD::QName.new(NsV14, "RadionuclideDetail"),
    :schema_element => [
      ["radionuclide", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Radionuclide")], [0, 1]],
      ["activity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadionuclideActivity", XSD::QName.new(NsV14, "Activity")], [0, 1]],
      ["exceptedPackagingIsReportableQuantity", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "ExceptedPackagingIsReportableQuantity")], [0, 1]],
      ["physicalForm", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PhysicalFormType", XSD::QName.new(NsV14, "PhysicalForm")], [0, 1]],
      ["chemicalForm", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ChemicalForm")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecipientCustomsId,
    :schema_type => XSD::QName.new(NsV14, "RecipientCustomsId"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecipientCustomsIdType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecommendedDocumentSpecification,
    :schema_type => XSD::QName.new(NsV14, "RecommendedDocumentSpecification"),
    :schema_element => [
      ["types", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecommendedDocumentType[]", XSD::QName.new(NsV14, "Types")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryLabelContentDetail,
    :schema_type => XSD::QName.new(NsV14, "RegulatoryLabelContentDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryLabelType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["generationOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerSpecifiedLabelGenerationOptionType[]", XSD::QName.new(NsV14, "GenerationOptions")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedPackageLineItem,
    :schema_type => XSD::QName.new(NsV14, "RequestedPackageLineItem"),
    :schema_element => [
      ["sequenceNumber", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "SequenceNumber")], [0, 1]],
      ["groupNumber", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "GroupNumber")], [0, 1]],
      ["groupPackageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "GroupPackageCount")], [0, 1]],
      ["statusDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageStatusDetail", XSD::QName.new(NsV14, "StatusDetail")], [0, 1]],
      ["trackingIds", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId[]", XSD::QName.new(NsV14, "TrackingIds")], [0, nil]],
      ["variableHandlingChargeDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VariableHandlingChargeDetail", XSD::QName.new(NsV14, "VariableHandlingChargeDetail")], [0, 1]],
      ["insuredValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "InsuredValue")], [0, 1]],
      ["weight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "Weight")], [0, 1]],
      ["dimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions", XSD::QName.new(NsV14, "Dimensions")], [0, 1]],
      ["physicalPackaging", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PhysicalPackagingType", XSD::QName.new(NsV14, "PhysicalPackaging")], [0, 1]],
      ["associatedFreightLineItems", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedFreightLineItemDetail[]", XSD::QName.new(NsV14, "AssociatedFreightLineItems")], [0, nil]],
      ["itemDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ItemDescription")], [0, 1]],
      ["itemDescriptionForClearance", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ItemDescriptionForClearance")], [0, 1]],
      ["customerReferences", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReference[]", XSD::QName.new(NsV14, "CustomerReferences")], [0, nil]],
      ["specialServicesRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialServicesRequested", XSD::QName.new(NsV14, "SpecialServicesRequested")], [0, 1]],
      ["specialHandlingDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialHandlingDetail", XSD::QName.new(NsV14, "SpecialHandlingDetail")], [0, 1]],
      ["contentRecords", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContentRecord[]", XSD::QName.new(NsV14, "ContentRecords")], [0, nil]],
      ["commodities", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Commodity[]", XSD::QName.new(NsV14, "Commodities")], [0, nil]],
      ["conveyanceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipperConveyanceDetail", XSD::QName.new(NsV14, "ConveyanceDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShipment,
    :schema_type => XSD::QName.new(NsV14, "RequestedShipment"),
    :schema_element => [
      ["shipTimestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsV14, "ShipTimestamp")], [0, 1]],
      ["dropoffType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DropoffType", XSD::QName.new(NsV14, "DropoffType")], [0, 1]],
      ["serviceType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ServiceType")], [0, 1]],
      ["packagingType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PackagingType")], [0, 1]],
      ["shippingCycle", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ShippingCycle")], [0, 1]],
      ["manifestDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentManifestDetail", XSD::QName.new(NsV14, "ManifestDetail")], [0, 1]],
      ["variationOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentVariationOptionDetail[]", XSD::QName.new(NsV14, "VariationOptions")], [0, nil]],
      ["totalWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "TotalWeight")], [0, 1]],
      ["totalInsuredValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalInsuredValue")], [0, 1]],
      ["totalDimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions", XSD::QName.new(NsV14, "TotalDimensions")], [0, 1]],
      ["preferredCurrency", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PreferredCurrency")], [0, 1]],
      ["shipmentAuthorizationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentAuthorizationDetail", XSD::QName.new(NsV14, "ShipmentAuthorizationDetail")], [0, 1]],
      ["shipper", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "Shipper")], [0, 1]],
      ["recipient", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "Recipient")], [0, 1]],
      ["recipientLocationNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "RecipientLocationNumber")], [0, 1]],
      ["origin", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress", XSD::QName.new(NsV14, "Origin")], [0, 1]],
      ["soldTo", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "SoldTo")], [0, 1]],
      ["shippingChargesPayment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment", XSD::QName.new(NsV14, "ShippingChargesPayment")], [0, 1]],
      ["specialServicesRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentSpecialServicesRequested", XSD::QName.new(NsV14, "SpecialServicesRequested")], [0, 1]],
      ["processingOptionsRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentProcessingOptionsRequested", XSD::QName.new(NsV14, "ProcessingOptionsRequested")], [0, 1]],
      ["expressFreightDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExpressFreightDetail", XSD::QName.new(NsV14, "ExpressFreightDetail")], [0, 1]],
      ["freightShipmentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentDetail", XSD::QName.new(NsV14, "FreightShipmentDetail")], [0, 1]],
      ["consolidationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentConsolidationDetail", XSD::QName.new(NsV14, "ConsolidationDetail")], [0, 1]],
      ["deliveryInstructions", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DeliveryInstructions")], [0, 1]],
      ["variableHandlingChargeDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VariableHandlingChargeDetail", XSD::QName.new(NsV14, "VariableHandlingChargeDetail")], [0, 1]],
      ["customsClearanceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsClearanceDetail", XSD::QName.new(NsV14, "CustomsClearanceDetail")], [0, 1]],
      ["pickupDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupDetail", XSD::QName.new(NsV14, "PickupDetail")], [0, 1]],
      ["smartPostDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentDetail", XSD::QName.new(NsV14, "SmartPostDetail")], [0, 1]],
      ["blockInsightVisibility", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "BlockInsightVisibility")], [0, 1]],
      ["errorLabelBehavior", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ErrorLabelBehaviorType", XSD::QName.new(NsV14, "ErrorLabelBehavior")], [0, 1]],
      ["labelSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecification", XSD::QName.new(NsV14, "LabelSpecification")], [0, 1]],
      ["shippingDocumentSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentSpecification", XSD::QName.new(NsV14, "ShippingDocumentSpecification")], [0, 1]],
      ["rateRequestTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateRequestType[]", XSD::QName.new(NsV14, "RateRequestTypes")], [0, nil]],
      ["customerSelectedActualRateType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnedRateType", XSD::QName.new(NsV14, "CustomerSelectedActualRateType")], [0, 1]],
      ["edtRequestType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EdtRequestType", XSD::QName.new(NsV14, "EdtRequestType")], [0, 1]],
      ["customRatingOptionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomRatingOptionDetail", XSD::QName.new(NsV14, "CustomRatingOptionDetail")], [0, 1]],
      ["masterTrackingId", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId", XSD::QName.new(NsV14, "MasterTrackingId")], [0, 1]],
      ["packageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PackageCount")], [0, 1]],
      ["shipmentOnlyFields", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentOnlyFieldsType[]", XSD::QName.new(NsV14, "ShipmentOnlyFields")], [0, nil]],
      ["configurationData", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentConfigurationData", XSD::QName.new(NsV14, "ConfigurationData")], [0, 1]],
      ["requestedPackageLineItems", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedPackageLineItem[]", XSD::QName.new(NsV14, "RequestedPackageLineItems")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnAssociationDetail,
    :schema_type => XSD::QName.new(NsV14, "ReturnAssociationDetail"),
    :schema_element => [
      ["trackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "TrackingNumber")], [0, 1]],
      ["shipDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ShipDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnEMailDetail,
    :schema_type => XSD::QName.new(NsV14, "ReturnEMailDetail"),
    :schema_element => [
      ["merchantPhoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "MerchantPhoneNumber")], [0, 1]],
      ["allowedSpecialServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnEMailAllowedSpecialServiceType[]", XSD::QName.new(NsV14, "AllowedSpecialServices")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnInstructionsDetail,
    :schema_type => XSD::QName.new(NsV14, "ReturnInstructionsDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["customText", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomText")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnShipmentDetail,
    :schema_type => XSD::QName.new(NsV14, "ReturnShipmentDetail"),
    :schema_element => [
      ["returnType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnType", XSD::QName.new(NsV14, "ReturnType")], [0, 1]],
      ["rma", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Rma", XSD::QName.new(NsV14, "Rma")], [0, 1]],
      ["returnEMailDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnEMailDetail", XSD::QName.new(NsV14, "ReturnEMailDetail")], [0, 1]],
      ["returnAssociation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnAssociationDetail", XSD::QName.new(NsV14, "ReturnAssociation")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Rma,
    :schema_type => XSD::QName.new(NsV14, "Rma"),
    :schema_element => [
      ["reason", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Reason")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityOption,
    :schema_type => XSD::QName.new(NsV14, "ServiceAvailabilityOption"),
    :schema_element => [
      ["service", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Service")], [0, 1]],
      ["deliveryDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "DeliveryDate")], [0, 1]],
      ["deliveryDay", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DayOfWeekType", XSD::QName.new(NsV14, "DeliveryDay")], [0, 1]],
      ["destinationStationId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationStationId")], [0, 1]],
      ["destinationAirportId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationAirportId")], [0, 1]],
      ["transitTime", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransitTimeType", XSD::QName.new(NsV14, "TransitTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityReply,
    :schema_type => XSD::QName.new(NsV14, "ServiceAvailabilityReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification[]", XSD::QName.new(NsV14, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityOption[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityRequest,
    :schema_type => XSD::QName.new(NsV14, "ServiceAvailabilityRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail", XSD::QName.new(NsV14, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail", XSD::QName.new(NsV14, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["origin", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Origin")]],
      ["destination", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Destination")]],
      ["shipDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ShipDate")]],
      ["carrierCode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType", XSD::QName.new(NsV14, "CarrierCode")], [0, 1]],
      ["service", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Service")], [0, 1]],
      ["packaging", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Packaging")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceDescription,
    :schema_type => XSD::QName.new(NsV14, "ServiceDescription"),
    :schema_element => [
      ["serviceType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ServiceType")], [0, 1]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Code")], [0, 1]],
      ["names", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "Names")], [0, nil]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["astraDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AstraDescription")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceSubOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "ServiceSubOptionDetail"),
    :schema_element => [
      ["freightGuarantee", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightGuaranteeType", XSD::QName.new(NsV14, "FreightGuarantee")], [0, 1]],
      ["smartPostHubId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SmartPostHubId")], [0, 1]],
      ["smartPostIndicia", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostIndiciaType", XSD::QName.new(NsV14, "SmartPostIndicia")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceTypesByCarrierCodeDetail,
    :schema_type => XSD::QName.new(NsV14, "ServiceTypesByCarrierCodeDetail"),
    :schema_element => [
      ["carrierCode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType", XSD::QName.new(NsV14, "CarrierCode")], [0, 1]],
      ["services", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "Services")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentAssemblyDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentAssemblyDetail"),
    :schema_element => [
      ["pieceCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PieceCount")], [0, 1]],
      ["weight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "Weight")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentAuthorizationDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentAuthorizationDetail"),
    :schema_element => [
      ["accountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AccountNumber")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentConfigurationData,
    :schema_type => XSD::QName.new(NsV14, "ShipmentConfigurationData"),
    :schema_element => [
      ["dangerousGoodsPackageConfigurations", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsDetail[]", XSD::QName.new(NsV14, "DangerousGoodsPackageConfigurations")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentConsolidationDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentConsolidationDetail"),
    :schema_element => [
      ["relationshipTimestamp", ["SOAP::SOAPString", XSD::QName.new(NsV14, "RelationshipTimestamp")], [0, 1]],
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["role", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationShipmentRoleType", XSD::QName.new(NsV14, "Role")], [0, 1]],
      ["associatedTrackingIds", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedTrackingId[]", XSD::QName.new(NsV14, "AssociatedTrackingIds")], [0, nil]],
      ["specialServicesRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationSpecialServicesRequested", XSD::QName.new(NsV14, "SpecialServicesRequested")], [0, 1]],
      ["consolidationOriginAddress", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "ConsolidationOriginAddress")], [0, 1]],
      ["internationalDistributionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentInternationalDistributionDetail", XSD::QName.new(NsV14, "InternationalDistributionDetail")], [0, 1]],
      ["transborderDistributionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentTransborderDistributionDetail", XSD::QName.new(NsV14, "TransborderDistributionDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentDryIceDetail"),
    :schema_element => [
      ["packageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PackageCount")], [0, 1]],
      ["totalWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "TotalWeight")], [0, 1]],
      ["processingOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceProcessingOptionsRequested", XSD::QName.new(NsV14, "ProcessingOptions")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceProcessingOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "ShipmentDryIceProcessingOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceProcessingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentEventNotificationDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentEventNotificationDetail"),
    :schema_element => [
      ["aggregationType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationAggregationType", XSD::QName.new(NsV14, "AggregationType")], [0, 1]],
      ["personalMessage", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PersonalMessage")], [0, 1]],
      ["eventNotifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentEventNotificationSpecification[]", XSD::QName.new(NsV14, "EventNotifications")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentEventNotificationSpecification,
    :schema_type => XSD::QName.new(NsV14, "ShipmentEventNotificationSpecification"),
    :schema_element => [
      ["role", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationRoleType", XSD::QName.new(NsV14, "Role")], [0, 1]],
      ["events", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationEventType[]", XSD::QName.new(NsV14, "Events")], [0, nil]],
      ["notificationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationDetail", XSD::QName.new(NsV14, "NotificationDetail")], [0, 1]],
      ["formatSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationFormatSpecification", XSD::QName.new(NsV14, "FormatSpecification")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentInternationalDistributionDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentInternationalDistributionDetail"),
    :schema_element => [
      ["clearanceFacilityLocId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ClearanceFacilityLocId")], [0, 1]],
      ["clearanceType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DistributionClearanceType", XSD::QName.new(NsV14, "ClearanceType")], [0, 1]],
      ["summaryDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalDistributionSummaryDetail", XSD::QName.new(NsV14, "SummaryDetail")], [0, 1]],
      ["splitPaymentSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentSpecification", XSD::QName.new(NsV14, "SplitPaymentSpecification")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentManifestDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentManifestDetail"),
    :schema_element => [
      ["manifestReferenceType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReferenceType", XSD::QName.new(NsV14, "ManifestReferenceType")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationFormatSpecification,
    :schema_type => XSD::QName.new(NsV14, "ShipmentNotificationFormatSpecification"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationFormatType", XSD::QName.new(NsV14, "Type")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentProcessingOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "ShipmentProcessingOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentProcessingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]],
      ["customTransitTimeDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomTransitTimeDetail", XSD::QName.new(NsV14, "CustomTransitTimeDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentSpecialServiceDescription,
    :schema_type => XSD::QName.new(NsV14, "ShipmentSpecialServiceDescription"),
    :schema_element => [
      ["carrierCodesAndServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceTypesByCarrierCodeDetail[]", XSD::QName.new(NsV14, "CarrierCodesAndServices")], [0, nil]],
      ["subSpecialServiceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SubSpecialServiceId")], [0, 1]],
      ["subNames", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "SubNames")], [0, nil]],
      ["specialServiceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceId")], [0, 1]],
      ["names", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "Names")], [0, nil]],
      ["specialServiceType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceType")], [0, 1]],
      ["specialServiceSubType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceSubType")], [0, 1]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Code")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["astraDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AstraDescription")], [0, 1]],
      ["customerIntegrationMode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerIntegrationModeType", XSD::QName.new(NsV14, "CustomerIntegrationMode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentSpecialServicesRequested,
    :schema_type => XSD::QName.new(NsV14, "ShipmentSpecialServicesRequested"),
    :schema_element => [
      ["specialServiceTypes", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "SpecialServiceTypes")], [0, nil]],
      ["codDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodDetail", XSD::QName.new(NsV14, "CodDetail")], [0, 1]],
      ["deliveryOnInvoiceAcceptanceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeliveryOnInvoiceAcceptanceDetail", XSD::QName.new(NsV14, "DeliveryOnInvoiceAcceptanceDetail")], [0, 1]],
      ["holdAtLocationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HoldAtLocationDetail", XSD::QName.new(NsV14, "HoldAtLocationDetail")], [0, 1]],
      ["eventNotificationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentEventNotificationDetail", XSD::QName.new(NsV14, "EventNotificationDetail")], [0, 1]],
      ["returnShipmentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnShipmentDetail", XSD::QName.new(NsV14, "ReturnShipmentDetail")], [0, 1]],
      ["pendingShipmentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentDetail", XSD::QName.new(NsV14, "PendingShipmentDetail")], [0, 1]],
      ["internationalControlledExportDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalControlledExportDetail", XSD::QName.new(NsV14, "InternationalControlledExportDetail")], [0, 1]],
      ["internationalTrafficInArmsRegulationsDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalTrafficInArmsRegulationsDetail", XSD::QName.new(NsV14, "InternationalTrafficInArmsRegulationsDetail")], [0, 1]],
      ["shipmentDryIceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceDetail", XSD::QName.new(NsV14, "ShipmentDryIceDetail")], [0, 1]],
      ["homeDeliveryPremiumDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HomeDeliveryPremiumDetail", XSD::QName.new(NsV14, "HomeDeliveryPremiumDetail")], [0, 1]],
      ["flatbedTrailerDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FlatbedTrailerDetail", XSD::QName.new(NsV14, "FlatbedTrailerDetail")], [0, 1]],
      ["freightGuaranteeDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightGuaranteeDetail", XSD::QName.new(NsV14, "FreightGuaranteeDetail")], [0, 1]],
      ["etdDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdDetail", XSD::QName.new(NsV14, "EtdDetail")], [0, 1]],
      ["extraLaborDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExtraLaborDetail", XSD::QName.new(NsV14, "ExtraLaborDetail")], [0, 1]],
      ["palletShrinkwrapDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PalletShrinkwrapDetail", XSD::QName.new(NsV14, "PalletShrinkwrapDetail")], [0, 1]],
      ["palletsProvidedDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PalletsProvidedDetail", XSD::QName.new(NsV14, "PalletsProvidedDetail")], [0, 1]],
      ["detentionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DetentionDetail", XSD::QName.new(NsV14, "DetentionDetail")], [0, 1]],
      ["markingOrTaggingDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::MarkingOrTaggingDetail", XSD::QName.new(NsV14, "MarkingOrTaggingDetail")], [0, 1]],
      ["nonBusinessTimeDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NonBusinessTimeDetail", XSD::QName.new(NsV14, "NonBusinessTimeDetail")], [0, 1]],
      ["shipmentAssemblyDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentAssemblyDetail", XSD::QName.new(NsV14, "ShipmentAssemblyDetail")], [0, 1]],
      ["sortAndSegregateDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SortAndSegregateDetail", XSD::QName.new(NsV14, "SortAndSegregateDetail")], [0, 1]],
      ["specialEquipmentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentDetail", XSD::QName.new(NsV14, "SpecialEquipmentDetail")], [0, 1]],
      ["storageDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::StorageDetail", XSD::QName.new(NsV14, "StorageDetail")], [0, 1]],
      ["weighingDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeighingDetail", XSD::QName.new(NsV14, "WeighingDetail")], [0, 1]],
      ["customDeliveryWindowDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDeliveryWindowDetail", XSD::QName.new(NsV14, "CustomDeliveryWindowDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentTransborderDistributionDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentTransborderDistributionDetail"),
    :schema_element => [
      ["specialServicesRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSpecialServicesRequested", XSD::QName.new(NsV14, "SpecialServicesRequested")], [0, 1]],
      ["summaryDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSummaryDetail", XSD::QName.new(NsV14, "SummaryDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentVariationOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentVariationOptionDetail"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["values", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "Values")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipperConveyanceDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipperConveyanceDetail"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentDispositionDetail,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentDispositionDetail"),
    :schema_element => [
      ["dispositionType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentDispositionType", XSD::QName.new(NsV14, "DispositionType")], [0, 1]],
      ["grouping", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentGroupingType", XSD::QName.new(NsV14, "Grouping")], [0, 1]],
      ["storageDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStorageDetail", XSD::QName.new(NsV14, "StorageDetail")], [0, 1]],
      ["eMailDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailDetail", XSD::QName.new(NsV14, "EMailDetail")], [0, 1]],
      ["printDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentPrintDetail", XSD::QName.new(NsV14, "PrintDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailDetail,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentEMailDetail"),
    :schema_element => [
      ["eMailRecipients", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailRecipient[]", XSD::QName.new(NsV14, "EMailRecipients")], [0, nil]],
      ["grouping", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailGroupingType", XSD::QName.new(NsV14, "Grouping")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailRecipient,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentEMailRecipient"),
    :schema_element => [
      ["recipientType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailNotificationRecipientType", XSD::QName.new(NsV14, "RecipientType")], [0, 1]],
      ["address", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Address")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentFormat"),
    :schema_element => [
      ["dispositions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentDispositionDetail[]", XSD::QName.new(NsV14, "Dispositions")], [0, nil]],
      ["topOfPageOffset", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearMeasure", XSD::QName.new(NsV14, "TopOfPageOffset")], [0, 1]],
      ["imageType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentImageType", XSD::QName.new(NsV14, "ImageType")], [0, 1]],
      ["stockType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStockType", XSD::QName.new(NsV14, "StockType")], [0, 1]],
      ["provideInstructions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "ProvideInstructions")], [0, 1]],
      ["optionsRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocumentFormatOptionsRequested", XSD::QName.new(NsV14, "OptionsRequested")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]],
      ["customDocumentIdentifier", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomDocumentIdentifier")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentPrintDetail,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentPrintDetail"),
    :schema_element => [
      ["printerId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PrinterId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentSpecification,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentSpecification"),
    :schema_element => [
      ["shippingDocumentTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShippingDocumentType[]", XSD::QName.new(NsV14, "ShippingDocumentTypes")], [0, nil]],
      ["notificationContentSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationContentSpecification", XSD::QName.new(NsV14, "NotificationContentSpecification")], [0, 1]],
      ["certificateOfOrigin", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CertificateOfOriginDetail", XSD::QName.new(NsV14, "CertificateOfOrigin")], [0, 1]],
      ["commercialInvoiceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommercialInvoiceDetail", XSD::QName.new(NsV14, "CommercialInvoiceDetail")], [0, 1]],
      ["customPackageDocumentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDocumentDetail[]", XSD::QName.new(NsV14, "CustomPackageDocumentDetail")], [0, nil]],
      ["customShipmentDocumentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDocumentDetail[]", XSD::QName.new(NsV14, "CustomShipmentDocumentDetail")], [0, nil]],
      ["exportDeclarationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExportDeclarationDetail", XSD::QName.new(NsV14, "ExportDeclarationDetail")], [0, 1]],
      ["generalAgencyAgreementDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GeneralAgencyAgreementDetail", XSD::QName.new(NsV14, "GeneralAgencyAgreementDetail")], [0, 1]],
      ["naftaCertificateOfOriginDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaCertificateOfOriginDetail", XSD::QName.new(NsV14, "NaftaCertificateOfOriginDetail")], [0, 1]],
      ["op900Detail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Op900Detail", XSD::QName.new(NsV14, "Op900Detail")], [0, 1]],
      ["dangerousGoodsShippersDeclarationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsShippersDeclarationDetail", XSD::QName.new(NsV14, "DangerousGoodsShippersDeclarationDetail")], [0, 1]],
      ["freightAddressLabelDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightAddressLabelDetail", XSD::QName.new(NsV14, "FreightAddressLabelDetail")], [0, 1]],
      ["freightBillOfLadingDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightBillOfLadingDetail", XSD::QName.new(NsV14, "FreightBillOfLadingDetail")], [0, 1]],
      ["returnInstructionsDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnInstructionsDetail", XSD::QName.new(NsV14, "ReturnInstructionsDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStorageDetail,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentStorageDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStorageDetailType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["filePath", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FilePath")], [0, 1]],
      ["fileNaming", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentNamingType", XSD::QName.new(NsV14, "FileNaming")], [0, 1]],
      ["fileSuffix", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FileSuffix")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "SignatureOptionDetail"),
    :schema_element => [
      ["optionType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionType", XSD::QName.new(NsV14, "OptionType")], [0, 1]],
      ["signatureReleaseNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SignatureReleaseNumber")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentDetail,
    :schema_type => XSD::QName.new(NsV14, "SmartPostShipmentDetail"),
    :schema_element => [
      ["processingOptionsRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentProcessingOptionsRequested", XSD::QName.new(NsV14, "ProcessingOptionsRequested")], [0, 1]],
      ["indicia", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostIndiciaType", XSD::QName.new(NsV14, "Indicia")], [0, 1]],
      ["ancillaryEndorsement", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostAncillaryEndorsementType", XSD::QName.new(NsV14, "AncillaryEndorsement")], [0, 1]],
      ["specialServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentSpecialServiceType[]", XSD::QName.new(NsV14, "SpecialServices")], [0, nil]],
      ["hubId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "HubId")], [0, 1]],
      ["customerManifestId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomerManifestId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentProcessingOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "SmartPostShipmentProcessingOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentProcessingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmsDetail,
    :schema_type => XSD::QName.new(NsV14, "SmsDetail"),
    :schema_element => [
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]],
      ["phoneNumberCountryCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumberCountryCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SortAndSegregateDetail,
    :schema_type => XSD::QName.new(NsV14, "SortAndSegregateDetail"),
    :schema_element => [
      ["pieceCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PieceCount")], [0, 1]],
      ["weight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "Weight")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentDetail,
    :schema_type => XSD::QName.new(NsV14, "SpecialEquipmentDetail"),
    :schema_element => [
      ["lineItems", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentLineItem[]", XSD::QName.new(NsV14, "LineItems")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentLineItem,
    :schema_type => XSD::QName.new(NsV14, "SpecialEquipmentLineItem"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["duration", ["SOAP::SOAPDuration", XSD::QName.new(NsV14, "Duration")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentDetail,
    :schema_type => XSD::QName.new(NsV14, "SplitPaymentDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["payment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment", XSD::QName.new(NsV14, "Payment")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentSpecification,
    :schema_type => XSD::QName.new(NsV14, "SplitPaymentSpecification"),
    :schema_element => [
      ["payments", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentDetail[]", XSD::QName.new(NsV14, "Payments")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::StorageDetail,
    :schema_type => XSD::QName.new(NsV14, "StorageDetail"),
    :schema_element => [
      ["duration", ["SOAP::SOAPDuration", XSD::QName.new(NsV14, "Duration")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TaxpayerIdentification,
    :schema_type => XSD::QName.new(NsV14, "TaxpayerIdentification"),
    :schema_element => [
      ["tinType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TinType", XSD::QName.new(NsV14, "TinType")], [0, 1]],
      ["number", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Number")], [0, 1]],
      ["usage", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Usage")], [0, 1]],
      ["effectiveDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV14, "EffectiveDate")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV14, "ExpirationDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId,
    :schema_type => XSD::QName.new(NsV14, "TrackingId"),
    :schema_element => [
      ["trackingIdType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingIdType", XSD::QName.new(NsV14, "TrackingIdType")], [0, 1]],
      ["formId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FormId")], [0, 1]],
      ["uspsApplicationId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "UspsApplicationId")], [0, 1]],
      ["trackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "TrackingNumber")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail,
    :schema_type => XSD::QName.new(NsV14, "TransactionDetail"),
    :schema_element => [
      ["customerTransactionId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomerTransactionId")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionLtlDetail,
    :schema_type => XSD::QName.new(NsV14, "TransborderDistributionLtlDetail"),
    :schema_element => [
      ["payment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment", XSD::QName.new(NsV14, "Payment")], [0, 1]],
      ["ltlScacCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LtlScacCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSpecialServicesRequested,
    :schema_type => XSD::QName.new(NsV14, "TransborderDistributionSpecialServicesRequested"),
    :schema_element => [
      ["specialServiceTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSpecialServiceType[]", XSD::QName.new(NsV14, "SpecialServiceTypes")], [0, nil]],
      ["transborderDistributionLtlDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionLtlDetail", XSD::QName.new(NsV14, "TransborderDistributionLtlDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSummaryDetail,
    :schema_type => XSD::QName.new(NsV14, "TransborderDistributionSummaryDetail"),
    :schema_element => [
      ["expressPackageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "ExpressPackageCount")], [0, 1]],
      ["expressTotalPackageWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "ExpressTotalPackageWeight")], [0, 1]],
      ["expressTotalPackageAdjustedWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "ExpressTotalPackageAdjustedWeight")], [0, 1]],
      ["expressFreightPackageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "ExpressFreightPackageCount")], [0, 1]],
      ["expressTotalFreightWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "ExpressTotalFreightWeight")], [0, 1]],
      ["expressTotalFreightAdjustedWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "ExpressTotalFreightAdjustedWeight")], [0, 1]],
      ["groundPackageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "GroundPackageCount")], [0, 1]],
      ["groundTotalPackageWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "GroundTotalPackageWeight")], [0, 1]],
      ["groundTotalPackageAdjustedWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "GroundTotalPackageAdjustedWeight")], [0, 1]],
      ["numberOfUnconsolidatedCommodities", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "NumberOfUnconsolidatedCommodities")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentDetail,
    :schema_type => XSD::QName.new(NsV14, "UploadDocumentDetail"),
    :schema_element => [
      ["lineNumber", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "LineNumber")], [0, 1]],
      ["customerReference", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomerReference")], [0, 1]],
      ["documentProducer", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentProducerType", XSD::QName.new(NsV14, "DocumentProducer")], [0, 1]],
      ["documentType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentType", XSD::QName.new(NsV14, "DocumentType")], [0, 1]],
      ["fileName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FileName")], [0, 1]],
      ["documentContent", ["SOAP::SOAPBase64", XSD::QName.new(NsV14, "DocumentContent")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ExpirationDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentReferenceDetail,
    :schema_type => XSD::QName.new(NsV14, "UploadDocumentReferenceDetail"),
    :schema_element => [
      ["lineNumber", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "LineNumber")], [0, 1]],
      ["customerReference", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomerReference")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["documentProducer", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentProducerType", XSD::QName.new(NsV14, "DocumentProducer")], [0, 1]],
      ["documentType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentType", XSD::QName.new(NsV14, "DocumentType")], [0, 1]],
      ["documentId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DocumentId")], [0, 1]],
      ["documentIdProducer", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentIdProducer", XSD::QName.new(NsV14, "DocumentIdProducer")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VariableHandlingChargeDetail,
    :schema_type => XSD::QName.new(NsV14, "VariableHandlingChargeDetail"),
    :schema_element => [
      ["fixedValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "FixedValue")], [0, 1]],
      ["percentValue", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "PercentValue")], [0, 1]],
      ["rateElementBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateElementBasisType", XSD::QName.new(NsV14, "RateElementBasis")], [0, 1]],
      ["rateTypeBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateTypeBasisType", XSD::QName.new(NsV14, "RateTypeBasis")], [0, 1]],
      ["rateLevelBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateLevelBasisType", XSD::QName.new(NsV14, "RateLevelBasis")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Volume,
    :schema_type => XSD::QName.new(NsV14, "Volume"),
    :schema_element => [
      ["units", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VolumeUnits", XSD::QName.new(NsV14, "Units")], [0, 1]],
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeighingDetail,
    :schema_type => XSD::QName.new(NsV14, "WeighingDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeighingScaleType", XSD::QName.new(NsV14, "Type")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight,
    :schema_type => XSD::QName.new(NsV14, "Weight"),
    :schema_element => [
      ["units", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeightUnits", XSD::QName.new(NsV14, "Units")], [0, 1]],
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail,
    :schema_type => XSD::QName.new(NsV14, "WebAuthenticationDetail"),
    :schema_element => [
      ["parentCredential", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationCredential", XSD::QName.new(NsV14, "ParentCredential")], [0, 1]],
      ["userCredential", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationCredential", XSD::QName.new(NsV14, "UserCredential")]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationCredential,
    :schema_type => XSD::QName.new(NsV14, "WebAuthenticationCredential"),
    :schema_element => [
      ["key", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Key")]],
      ["password", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Password")]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId,
    :schema_type => XSD::QName.new(NsV14, "VersionId"),
    :schema_element => [
      ["serviceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ServiceId")]],
      ["major", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "Major")]],
      ["intermediate", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "Intermediate")]],
      ["minor", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "Minor")]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AccessorRoleType,
    :schema_type => XSD::QName.new(NsV14, "AccessorRoleType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AdditionalLabelsType,
    :schema_type => XSD::QName.new(NsV14, "AdditionalLabelsType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AlcoholRecipientType,
    :schema_type => XSD::QName.new(NsV14, "AlcoholRecipientType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedAccountNumberType,
    :schema_type => XSD::QName.new(NsV14, "AssociatedAccountNumberType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedTrackingIdType,
    :schema_type => XSD::QName.new(NsV14, "AssociatedTrackingIdType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::B13AFilingOptionType,
    :schema_type => XSD::QName.new(NsV14, "B13AFilingOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BarcodeSymbologyType,
    :schema_type => XSD::QName.new(NsV14, "BarcodeSymbologyType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryMaterialType,
    :schema_type => XSD::QName.new(NsV14, "BatteryMaterialType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryPackingType,
    :schema_type => XSD::QName.new(NsV14, "BatteryPackingType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryRegulatorySubType,
    :schema_type => XSD::QName.new(NsV14, "BatteryRegulatorySubType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BrokerType,
    :schema_type => XSD::QName.new(NsV14, "BrokerType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType,
    :schema_type => XSD::QName.new(NsV14, "CarrierCodeType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ChargeBasisLevelType,
    :schema_type => XSD::QName.new(NsV14, "ChargeBasisLevelType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClearanceBrokerageType,
    :schema_type => XSD::QName.new(NsV14, "ClearanceBrokerageType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodAddTransportationChargeBasisType,
    :schema_type => XSD::QName.new(NsV14, "CodAddTransportationChargeBasisType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodCollectionType,
    :schema_type => XSD::QName.new(NsV14, "CodCollectionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodReturnReferenceIndicatorType,
    :schema_type => XSD::QName.new(NsV14, "CodReturnReferenceIndicatorType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommodityPurposeType,
    :schema_type => XSD::QName.new(NsV14, "CommodityPurposeType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CompletedEtdType,
    :schema_type => XSD::QName.new(NsV14, "CompletedEtdType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationShipmentRoleType,
    :schema_type => XSD::QName.new(NsV14, "ConsolidationShipmentRoleType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationSpecialServiceType,
    :schema_type => XSD::QName.new(NsV14, "ConsolidationSpecialServiceType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationType,
    :schema_type => XSD::QName.new(NsV14, "ConsolidationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardAuthorizationType,
    :schema_type => XSD::QName.new(NsV14, "CreditCardAuthorizationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardSettlementScheduleType,
    :schema_type => XSD::QName.new(NsV14, "CreditCardSettlementScheduleType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionAttributeType,
    :schema_type => XSD::QName.new(NsV14, "CreditCardTransactionAttributeType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardType,
    :schema_type => XSD::QName.new(NsV14, "CreditCardType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDeliveryWindowType,
    :schema_type => XSD::QName.new(NsV14, "CustomDeliveryWindowType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelCoordinateUnits,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelCoordinateUnits")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomRatingOptionType,
    :schema_type => XSD::QName.new(NsV14, "CustomRatingOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsageType,
    :schema_type => XSD::QName.new(NsV14, "CustomerImageUsageType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerIntegrationModeType,
    :schema_type => XSD::QName.new(NsV14, "CustomerIntegrationModeType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReferenceType,
    :schema_type => XSD::QName.new(NsV14, "CustomerReferenceType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerSpecifiedLabelGenerationOptionType,
    :schema_type => XSD::QName.new(NsV14, "CustomerSpecifiedLabelGenerationOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsDeclarationStatementType,
    :schema_type => XSD::QName.new(NsV14, "CustomsDeclarationStatementType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsOptionType,
    :schema_type => XSD::QName.new(NsV14, "CustomsOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsRoleType,
    :schema_type => XSD::QName.new(NsV14, "CustomsRoleType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DamageStatusType,
    :schema_type => XSD::QName.new(NsV14, "DamageStatusType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsAccessibilityType,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsAccessibilityType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsPackingOptionType,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsPackingOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DayOfWeekType,
    :schema_type => XSD::QName.new(NsV14, "DayOfWeekType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeleteRecordedShipmentRequestServiceLevel,
    :schema_type => XSD::QName.new(NsV14, "DeleteRecordedShipmentRequestServiceLevel")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DestinationControlStatementType,
    :schema_type => XSD::QName.new(NsV14, "DestinationControlStatementType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DistributionClearanceType,
    :schema_type => XSD::QName.new(NsV14, "DistributionClearanceType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentType,
    :schema_type => XSD::QName.new(NsV14, "DocTabContentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabZoneJustificationType,
    :schema_type => XSD::QName.new(NsV14, "DocTabZoneJustificationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocumentFormatOptionType,
    :schema_type => XSD::QName.new(NsV14, "DocumentFormatOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DropoffType,
    :schema_type => XSD::QName.new(NsV14, "DropoffType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailNotificationRecipientType,
    :schema_type => XSD::QName.new(NsV14, "EMailNotificationRecipientType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EdtRequestType,
    :schema_type => XSD::QName.new(NsV14, "EdtRequestType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EmailOptionType,
    :schema_type => XSD::QName.new(NsV14, "EmailOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ErrorLabelBehaviorType,
    :schema_type => XSD::QName.new(NsV14, "ErrorLabelBehaviorType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdAttributeType,
    :schema_type => XSD::QName.new(NsV14, "EtdAttributeType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdConfirmationType,
    :schema_type => XSD::QName.new(NsV14, "EtdConfirmationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FedExLocationType,
    :schema_type => XSD::QName.new(NsV14, "FedExLocationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FlatbedTrailerOption,
    :schema_type => XSD::QName.new(NsV14, "FlatbedTrailerOption")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightClassType,
    :schema_type => XSD::QName.new(NsV14, "FreightClassType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightCollectTermsType,
    :schema_type => XSD::QName.new(NsV14, "FreightCollectTermsType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightGuaranteeType,
    :schema_type => XSD::QName.new(NsV14, "FreightGuaranteeType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightOnValueType,
    :schema_type => XSD::QName.new(NsV14, "FreightOnValueType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentRoleType,
    :schema_type => XSD::QName.new(NsV14, "FreightShipmentRoleType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityDescriptionProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityDescriptionProcessingOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityLabelTextOptionType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityLabelTextOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityOptionType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackingGroupType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityPackingGroupType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityQuantityType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityQuantityType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityRegulationType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityRegulationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousContainerPackingType,
    :schema_type => XSD::QName.new(NsV14, "HazardousContainerPackingType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HomeDeliveryPremiumType,
    :schema_type => XSD::QName.new(NsV14, "HomeDeliveryPremiumType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ImageId,
    :schema_type => XSD::QName.new(NsV14, "ImageId")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InspectionStatusType,
    :schema_type => XSD::QName.new(NsV14, "InspectionStatusType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternalImageType,
    :schema_type => XSD::QName.new(NsV14, "InternalImageType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalControlledExportType,
    :schema_type => XSD::QName.new(NsV14, "InternationalControlledExportType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalDocumentContentType,
    :schema_type => XSD::QName.new(NsV14, "InternationalDocumentContentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelFormatType,
    :schema_type => XSD::QName.new(NsV14, "LabelFormatType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelMaskableDataType,
    :schema_type => XSD::QName.new(NsV14, "LabelMaskableDataType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelOrderType,
    :schema_type => XSD::QName.new(NsV14, "LabelOrderType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelPrintingOrientationType,
    :schema_type => XSD::QName.new(NsV14, "LabelPrintingOrientationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelRotationType,
    :schema_type => XSD::QName.new(NsV14, "LabelRotationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecificationProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "LabelSpecificationProcessingOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelStockType,
    :schema_type => XSD::QName.new(NsV14, "LabelStockType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LiabilityCoverageType,
    :schema_type => XSD::QName.new(NsV14, "LiabilityCoverageType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearUnits,
    :schema_type => XSD::QName.new(NsV14, "LinearUnits")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaImporterSpecificationType,
    :schema_type => XSD::QName.new(NsV14, "NaftaImporterSpecificationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaNetCostMethodCode,
    :schema_type => XSD::QName.new(NsV14, "NaftaNetCostMethodCode")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaPreferenceCriterionCode,
    :schema_type => XSD::QName.new(NsV14, "NaftaPreferenceCriterionCode")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducerDeterminationCode,
    :schema_type => XSD::QName.new(NsV14, "NaftaProducerDeterminationCode")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducerSpecificationType,
    :schema_type => XSD::QName.new(NsV14, "NaftaProducerSpecificationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NetExplosiveClassificationType,
    :schema_type => XSD::QName.new(NsV14, "NetExplosiveClassificationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationContentType,
    :schema_type => XSD::QName.new(NsV14, "NotificationContentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationEventType,
    :schema_type => XSD::QName.new(NsV14, "NotificationEventType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationFormatType,
    :schema_type => XSD::QName.new(NsV14, "NotificationFormatType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType,
    :schema_type => XSD::QName.new(NsV14, "NotificationSeverityType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationType,
    :schema_type => XSD::QName.new(NsV14, "NotificationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageLineItemStatusType,
    :schema_type => XSD::QName.new(NsV14, "PackageLineItemStatusType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackagePackedByType,
    :schema_type => XSD::QName.new(NsV14, "PackagePackedByType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PageQuadrantType,
    :schema_type => XSD::QName.new(NsV14, "PageQuadrantType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PaymentType,
    :schema_type => XSD::QName.new(NsV14, "PaymentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "PendingShipmentProcessingOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentType,
    :schema_type => XSD::QName.new(NsV14, "PendingShipmentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PhysicalFormType,
    :schema_type => XSD::QName.new(NsV14, "PhysicalFormType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PhysicalPackagingType,
    :schema_type => XSD::QName.new(NsV14, "PhysicalPackagingType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupRequestSourceType,
    :schema_type => XSD::QName.new(NsV14, "PickupRequestSourceType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupRequestType,
    :schema_type => XSD::QName.new(NsV14, "PickupRequestType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PrintedReferenceType,
    :schema_type => XSD::QName.new(NsV14, "PrintedReferenceType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PriorityAlertEnhancementType,
    :schema_type => XSD::QName.new(NsV14, "PriorityAlertEnhancementType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PurposeOfShipmentType,
    :schema_type => XSD::QName.new(NsV14, "PurposeOfShipmentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactiveContainerClassType,
    :schema_type => XSD::QName.new(NsV14, "RadioactiveContainerClassType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactivityUnitOfMeasure,
    :schema_type => XSD::QName.new(NsV14, "RadioactivityUnitOfMeasure")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateDiscountType,
    :schema_type => XSD::QName.new(NsV14, "RateDiscountType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateElementBasisType,
    :schema_type => XSD::QName.new(NsV14, "RateElementBasisType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateLevelBasisType,
    :schema_type => XSD::QName.new(NsV14, "RateLevelBasisType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateRequestType,
    :schema_type => XSD::QName.new(NsV14, "RateRequestType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateTypeBasisType,
    :schema_type => XSD::QName.new(NsV14, "RateTypeBasisType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecipientCustomsIdType,
    :schema_type => XSD::QName.new(NsV14, "RecipientCustomsIdType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecommendedDocumentType,
    :schema_type => XSD::QName.new(NsV14, "RecommendedDocumentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryControlType,
    :schema_type => XSD::QName.new(NsV14, "RegulatoryControlType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryLabelType,
    :schema_type => XSD::QName.new(NsV14, "RegulatoryLabelType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RelativeVerticalPositionType,
    :schema_type => XSD::QName.new(NsV14, "RelativeVerticalPositionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShippingDocumentType,
    :schema_type => XSD::QName.new(NsV14, "RequestedShippingDocumentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnEMailAllowedSpecialServiceType,
    :schema_type => XSD::QName.new(NsV14, "ReturnEMailAllowedSpecialServiceType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnType,
    :schema_type => XSD::QName.new(NsV14, "ReturnType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnedRateType,
    :schema_type => XSD::QName.new(NsV14, "ReturnedRateType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RotationType,
    :schema_type => XSD::QName.new(NsV14, "RotationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SecondaryBarcodeType,
    :schema_type => XSD::QName.new(NsV14, "SecondaryBarcodeType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceOptionType,
    :schema_type => XSD::QName.new(NsV14, "ServiceOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "ShipmentDryIceProcessingOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationAggregationType,
    :schema_type => XSD::QName.new(NsV14, "ShipmentNotificationAggregationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationRoleType,
    :schema_type => XSD::QName.new(NsV14, "ShipmentNotificationRoleType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentOnlyFieldsType,
    :schema_type => XSD::QName.new(NsV14, "ShipmentOnlyFieldsType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "ShipmentProcessingOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentDispositionType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentDispositionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailGroupingType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentEMailGroupingType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentGroupingType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentGroupingType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentImageType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentImageType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentNamingType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentNamingType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStockType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentStockType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStorageDetailType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentStorageDetailType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionType,
    :schema_type => XSD::QName.new(NsV14, "SignatureOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostAncillaryEndorsementType,
    :schema_type => XSD::QName.new(NsV14, "SmartPostAncillaryEndorsementType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostIndiciaType,
    :schema_type => XSD::QName.new(NsV14, "SmartPostIndiciaType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "SmartPostShipmentProcessingOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentSpecialServiceType,
    :schema_type => XSD::QName.new(NsV14, "SmartPostShipmentSpecialServiceType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentType,
    :schema_type => XSD::QName.new(NsV14, "SpecialEquipmentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentType,
    :schema_type => XSD::QName.new(NsV14, "SplitPaymentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TaxesOrMiscellaneousChargeType,
    :schema_type => XSD::QName.new(NsV14, "TaxesOrMiscellaneousChargeType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TinType,
    :schema_type => XSD::QName.new(NsV14, "TinType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingIdType,
    :schema_type => XSD::QName.new(NsV14, "TrackingIdType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSpecialServiceType,
    :schema_type => XSD::QName.new(NsV14, "TransborderDistributionSpecialServiceType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransitTimeType,
    :schema_type => XSD::QName.new(NsV14, "TransitTimeType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentIdProducer,
    :schema_type => XSD::QName.new(NsV14, "UploadDocumentIdProducer")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentProducerType,
    :schema_type => XSD::QName.new(NsV14, "UploadDocumentProducerType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentType,
    :schema_type => XSD::QName.new(NsV14, "UploadDocumentType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VolumeUnits,
    :schema_type => XSD::QName.new(NsV14, "VolumeUnits")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeighingScaleType,
    :schema_type => XSD::QName.new(NsV14, "WeighingScaleType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeightUnits,
    :schema_type => XSD::QName.new(NsV14, "WeightUnits")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AdditionalLabelsDetail,
    :schema_type => XSD::QName.new(NsV14, "AdditionalLabelsDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AdditionalLabelsType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["count", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Count")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address,
    :schema_type => XSD::QName.new(NsV14, "Address"),
    :schema_element => [
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PostalCode")], [0, 1]],
      ["countryCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CountryCode")]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AlcoholDetail,
    :schema_type => XSD::QName.new(NsV14, "AlcoholDetail"),
    :schema_element => [
      ["recipientType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AlcoholRecipientType", XSD::QName.new(NsV14, "RecipientType")], [0, 1]],
      ["shipperAgreementType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ShipperAgreementType")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedAccount,
    :schema_type => XSD::QName.new(NsV14, "AssociatedAccount"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedAccountNumberType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["accountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AccountNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedFreightLineItemDetail,
    :schema_type => XSD::QName.new(NsV14, "AssociatedFreightLineItemDetail"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedTrackingId,
    :schema_type => XSD::QName.new(NsV14, "AssociatedTrackingId"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedTrackingIdType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["trackingId", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId", XSD::QName.new(NsV14, "TrackingId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryClassificationDetail,
    :schema_type => XSD::QName.new(NsV14, "BatteryClassificationDetail"),
    :schema_element => [
      ["material", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryMaterialType", XSD::QName.new(NsV14, "Material")], [0, 1]],
      ["packing", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryPackingType", XSD::QName.new(NsV14, "Packing")], [0, 1]],
      ["regulatorySubType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryRegulatorySubType", XSD::QName.new(NsV14, "RegulatorySubType")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BrokerDetail,
    :schema_type => XSD::QName.new(NsV14, "BrokerDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BrokerType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["broker", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "Broker")], [0, 1]],
      ["brokerageProcessingChargesPayment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment", XSD::QName.new(NsV14, "BrokerageProcessingChargesPayment")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CertificateOfOriginDetail,
    :schema_type => XSD::QName.new(NsV14, "CertificateOfOriginDetail"),
    :schema_element => [
      ["documentFormat", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "DocumentFormat")], [0, 1]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail,
    :schema_type => XSD::QName.new(NsV14, "ClientDetail"),
    :schema_element => [
      ["accountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AccountNumber")]],
      ["meterNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "MeterNumber")]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodAddTransportationChargesDetail,
    :schema_type => XSD::QName.new(NsV14, "CodAddTransportationChargesDetail"),
    :schema_element => [
      ["rateTypeBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateTypeBasisType", XSD::QName.new(NsV14, "RateTypeBasis")], [0, 1]],
      ["chargeBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodAddTransportationChargeBasisType", XSD::QName.new(NsV14, "ChargeBasis")], [0, 1]],
      ["chargeBasisLevel", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ChargeBasisLevelType", XSD::QName.new(NsV14, "ChargeBasisLevel")], [0, 1]],
      ["rateLevelBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateLevelBasisType", XSD::QName.new(NsV14, "RateLevelBasis")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodDetail,
    :schema_type => XSD::QName.new(NsV14, "CodDetail"),
    :schema_element => [
      ["codCollectionAmount", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "CodCollectionAmount")], [0, 1]],
      ["addTransportationChargesDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodAddTransportationChargesDetail", XSD::QName.new(NsV14, "AddTransportationChargesDetail")], [0, 1]],
      ["collectionType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodCollectionType", XSD::QName.new(NsV14, "CollectionType")], [0, 1]],
      ["codRecipient", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "CodRecipient")], [0, 1]],
      ["financialInstitutionContactAndAddress", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress", XSD::QName.new(NsV14, "FinancialInstitutionContactAndAddress")], [0, 1]],
      ["remitToName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "RemitToName")], [0, 1]],
      ["referenceIndicator", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodReturnReferenceIndicatorType", XSD::QName.new(NsV14, "ReferenceIndicator")], [0, 1]],
      ["returnTrackingId", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId", XSD::QName.new(NsV14, "ReturnTrackingId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommercialInvoice,
    :schema_type => XSD::QName.new(NsV14, "CommercialInvoice"),
    :schema_element => [
      ["comments", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "Comments")], [0, nil]],
      ["freightCharge", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "FreightCharge")], [0, 1]],
      ["taxesOrMiscellaneousCharge", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TaxesOrMiscellaneousCharge")], [0, 1]],
      ["taxesOrMiscellaneousChargeType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TaxesOrMiscellaneousChargeType", XSD::QName.new(NsV14, "TaxesOrMiscellaneousChargeType")], [0, 1]],
      ["packingCosts", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "PackingCosts")], [0, 1]],
      ["handlingCosts", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "HandlingCosts")], [0, 1]],
      ["specialInstructions", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialInstructions")], [0, 1]],
      ["declarationStatement", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DeclarationStatement")], [0, 1]],
      ["paymentTerms", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PaymentTerms")], [0, 1]],
      ["purpose", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PurposeOfShipmentType", XSD::QName.new(NsV14, "Purpose")], [0, 1]],
      ["purposeOfShipmentDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PurposeOfShipmentDescription")], [0, 1]],
      ["customerReferences", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReference[]", XSD::QName.new(NsV14, "CustomerReferences")], [0, nil]],
      ["originatorName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "OriginatorName")], [0, 1]],
      ["termsOfSale", ["SOAP::SOAPString", XSD::QName.new(NsV14, "TermsOfSale")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommercialInvoiceDetail,
    :schema_type => XSD::QName.new(NsV14, "CommercialInvoiceDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]],
      ["formVersion", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FormVersion")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Commodity,
    :schema_type => XSD::QName.new(NsV14, "Commodity"),
    :schema_element => [
      ["commodityId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CommodityId")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Name")], [0, 1]],
      ["numberOfPieces", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "NumberOfPieces")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["purpose", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommodityPurposeType", XSD::QName.new(NsV14, "Purpose")], [0, 1]],
      ["countryOfManufacture", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CountryOfManufacture")], [0, 1]],
      ["harmonizedCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "HarmonizedCode")], [0, 1]],
      ["weight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "Weight")], [0, 1]],
      ["quantity", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Quantity")], [0, 1]],
      ["quantityUnits", ["SOAP::SOAPString", XSD::QName.new(NsV14, "QuantityUnits")], [0, 1]],
      ["additionalMeasures", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Measure[]", XSD::QName.new(NsV14, "AdditionalMeasures")], [0, nil]],
      ["unitPrice", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "UnitPrice")], [0, 1]],
      ["customsValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "CustomsValue")], [0, 1]],
      ["exciseConditions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EdtExciseCondition[]", XSD::QName.new(NsV14, "ExciseConditions")], [0, nil]],
      ["exportLicenseNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ExportLicenseNumber")], [0, 1]],
      ["exportLicenseExpirationDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ExportLicenseExpirationDate")], [0, 1]],
      ["cIMarksAndNumbers", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CIMarksAndNumbers")], [0, 1]],
      ["partNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PartNumber")], [0, 1]],
      ["naftaDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaCommodityDetail", XSD::QName.new(NsV14, "NaftaDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConfigurableLabelReferenceEntry,
    :schema_type => XSD::QName.new(NsV14, "ConfigurableLabelReferenceEntry"),
    :schema_element => [
      ["zoneNumber", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "ZoneNumber")], [0, 1]],
      ["header", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Header")], [0, 1]],
      ["dataField", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DataField")], [0, 1]],
      ["literalValue", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LiteralValue")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationSpecialServicesRequested,
    :schema_type => XSD::QName.new(NsV14, "ConsolidationSpecialServicesRequested"),
    :schema_element => [
      ["specialServiceTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationSpecialServiceType[]", XSD::QName.new(NsV14, "SpecialServiceTypes")], [0, nil]],
      ["priorityAlertDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PriorityAlertDetail", XSD::QName.new(NsV14, "PriorityAlertDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Contact,
    :schema_type => XSD::QName.new(NsV14, "Contact"),
    :schema_element => [
      ["contactId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ContactId")], [0, 1]],
      ["personName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PersonName")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Title")], [0, 1]],
      ["companyName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CompanyName")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]],
      ["phoneExtension", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneExtension")], [0, 1]],
      ["tollFreePhoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "TollFreePhoneNumber")], [0, 1]],
      ["pagerNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PagerNumber")], [0, 1]],
      ["faxNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FaxNumber")], [0, 1]],
      ["eMailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EMailAddress")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress,
    :schema_type => XSD::QName.new(NsV14, "ContactAndAddress"),
    :schema_element => [
      ["contact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Contact", XSD::QName.new(NsV14, "Contact")], [0, 1]],
      ["address", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Address")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContentRecord,
    :schema_type => XSD::QName.new(NsV14, "ContentRecord"),
    :schema_element => [
      ["partNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PartNumber")], [0, 1]],
      ["itemNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ItemNumber")], [0, 1]],
      ["receivedQuantity", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "ReceivedQuantity")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCard,
    :schema_type => XSD::QName.new(NsV14, "CreditCard"),
    :schema_element => [
      ["number", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Number")], [0, 1]],
      ["creditCardType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardType", XSD::QName.new(NsV14, "CreditCardType")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ExpirationDate")], [0, 1]],
      ["lastAuthenticationByFedexDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "LastAuthenticationByFedexDate")], [0, 1]],
      ["verificationCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "VerificationCode")], [0, 1]],
      ["creditCardHolder", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedContactAndAddress", XSD::QName.new(NsV14, "CreditCardHolder")], [0, 1]],
      ["trackData", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "TrackData")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionAttributesDetail,
    :schema_type => XSD::QName.new(NsV14, "CreditCardTransactionAttributesDetail"),
    :schema_element => [
      ["types", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionAttributeType[]", XSD::QName.new(NsV14, "Types")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionDetail,
    :schema_type => XSD::QName.new(NsV14, "CreditCardTransactionDetail"),
    :schema_element => [
      ["authorizationId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AuthorizationId")], [0, 1]],
      ["authorizationType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardAuthorizationType", XSD::QName.new(NsV14, "AuthorizationType")], [0, 1]],
      ["settlementScheduleType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardSettlementScheduleType", XSD::QName.new(NsV14, "SettlementScheduleType")], [0, 1]],
      ["fraudDetectionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditFraudDetectionDetail", XSD::QName.new(NsV14, "FraudDetectionDetail")], [0, 1]],
      ["payorAuthenticationCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PayorAuthenticationCode")], [0, 1]],
      ["attributesDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionAttributesDetail", XSD::QName.new(NsV14, "AttributesDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditFraudDetectionDetail,
    :schema_type => XSD::QName.new(NsV14, "CreditFraudDetectionDetail"),
    :schema_element => [
      ["ipAddress", ["SOAP::SOAPString", XSD::QName.new(NsV14, "IpAddress")], [0, 1]],
      ["clientCookiesEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "ClientCookiesEnabled")], [0, 1]],
      ["devicePrint", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DevicePrint")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDeliveryWindowDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomDeliveryWindowDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDeliveryWindowType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["requestTime", ["SOAP::SOAPTime", XSD::QName.new(NsV14, "RequestTime")], [0, 1]],
      ["requestRange", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DateRange", XSD::QName.new(NsV14, "RequestRange")], [0, 1]],
      ["requestDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "RequestDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDiscountExclusionDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomDiscountExclusionDetail"),
    :schema_element => [
      ["excludedTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateDiscountType[]", XSD::QName.new(NsV14, "ExcludedTypes")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDocumentDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomDocumentDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["labelPrintingOrientation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelPrintingOrientationType", XSD::QName.new(NsV14, "LabelPrintingOrientation")], [0, 1]],
      ["labelRotation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelRotationType", XSD::QName.new(NsV14, "LabelRotation")], [0, 1]],
      ["specificationId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecificationId")], [0, 1]],
      ["customDocumentIdentifier", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomDocumentIdentifier")], [0, 1]],
      ["docTabContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContent", XSD::QName.new(NsV14, "DocTabContent")], [0, 1]],
      ["customContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelDetail", XSD::QName.new(NsV14, "CustomContent")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelBarcodeEntry,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelBarcodeEntry"),
    :schema_element => [
      ["position", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "Position")], [0, 1]],
      ["format", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["dataFields", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "DataFields")], [0, nil]],
      ["barHeight", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "BarHeight")], [0, 1]],
      ["thinBarWidth", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "ThinBarWidth")], [0, 1]],
      ["barcodeSymbology", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BarcodeSymbologyType", XSD::QName.new(NsV14, "BarcodeSymbology")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelBoxEntry,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelBoxEntry"),
    :schema_element => [
      ["topLeftCorner", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "TopLeftCorner")], [0, 1]],
      ["bottomRightCorner", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "BottomRightCorner")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelDetail"),
    :schema_element => [
      ["coordinateUnits", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelCoordinateUnits", XSD::QName.new(NsV14, "CoordinateUnits")], [0, 1]],
      ["textEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelTextEntry[]", XSD::QName.new(NsV14, "TextEntries")], [0, nil]],
      ["graphicEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelGraphicEntry[]", XSD::QName.new(NsV14, "GraphicEntries")], [0, nil]],
      ["boxEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelBoxEntry[]", XSD::QName.new(NsV14, "BoxEntries")], [0, nil]],
      ["textBoxEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelTextBoxEntry[]", XSD::QName.new(NsV14, "TextBoxEntries")], [0, nil]],
      ["barcodeEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelBarcodeEntry[]", XSD::QName.new(NsV14, "BarcodeEntries")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelGraphicEntry,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelGraphicEntry"),
    :schema_element => [
      ["position", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "Position")], [0, 1]],
      ["printerGraphicId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PrinterGraphicId")], [0, 1]],
      ["fileGraphicFullName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FileGraphicFullName")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelPosition"),
    :schema_element => [
      ["x", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "X")], [0, 1]],
      ["y", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "Y")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelTextBoxEntry,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelTextBoxEntry"),
    :schema_element => [
      ["topLeftCorner", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "TopLeftCorner")], [0, 1]],
      ["bottomRightCorner", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "BottomRightCorner")], [0, 1]],
      ["position", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "Position")], [0, 1]],
      ["format", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["dataFields", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "DataFields")], [0, nil]],
      ["thermalFontId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ThermalFontId")], [0, 1]],
      ["fontName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FontName")], [0, 1]],
      ["fontSize", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "FontSize")], [0, 1]],
      ["rotation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RotationType", XSD::QName.new(NsV14, "Rotation")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelTextEntry,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelTextEntry"),
    :schema_element => [
      ["position", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelPosition", XSD::QName.new(NsV14, "Position")], [0, 1]],
      ["format", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["dataFields", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "DataFields")], [0, nil]],
      ["thermalFontId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ThermalFontId")], [0, 1]],
      ["fontName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FontName")], [0, 1]],
      ["fontSize", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "FontSize")], [0, 1]],
      ["rotation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RotationType", XSD::QName.new(NsV14, "Rotation")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomRatingOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomRatingOptionDetail"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomRatingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]],
      ["customDiscountExclusionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDiscountExclusionDetail", XSD::QName.new(NsV14, "CustomDiscountExclusionDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomTransitTimeDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomTransitTimeDetail"),
    :schema_element => [
      ["key", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Key")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage,
    :schema_type => XSD::QName.new(NsV14, "CustomerImageUsage"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsageType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["id", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ImageId", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["internalId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "InternalId")], [0, 1]],
      ["internalImageType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternalImageType", XSD::QName.new(NsV14, "InternalImageType")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReference,
    :schema_type => XSD::QName.new(NsV14, "CustomerReference"),
    :schema_element => [
      ["customerReferenceType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReferenceType", XSD::QName.new(NsV14, "CustomerReferenceType")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerSpecifiedLabelDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomerSpecifiedLabelDetail"),
    :schema_element => [
      ["docTabContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContent", XSD::QName.new(NsV14, "DocTabContent")], [0, 1]],
      ["customContentPosition", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RelativeVerticalPositionType", XSD::QName.new(NsV14, "CustomContentPosition")], [0, 1]],
      ["customContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelDetail", XSD::QName.new(NsV14, "CustomContent")], [0, 1]],
      ["configurableReferenceEntries", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConfigurableLabelReferenceEntry[]", XSD::QName.new(NsV14, "ConfigurableReferenceEntries")], [0, nil]],
      ["maskedData", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelMaskableDataType[]", XSD::QName.new(NsV14, "MaskedData")], [0, nil]],
      ["secondaryBarcode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SecondaryBarcodeType", XSD::QName.new(NsV14, "SecondaryBarcode")], [0, 1]],
      ["termsAndConditionsLocalization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "TermsAndConditionsLocalization")], [0, 1]],
      ["regulatoryLabels", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryLabelContentDetail[]", XSD::QName.new(NsV14, "RegulatoryLabels")], [0, nil]],
      ["additionalLabels", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AdditionalLabelsDetail[]", XSD::QName.new(NsV14, "AdditionalLabels")], [0, nil]],
      ["airWaybillSuppressionCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "AirWaybillSuppressionCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsClearanceDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomsClearanceDetail"),
    :schema_element => [
      ["brokers", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BrokerDetail[]", XSD::QName.new(NsV14, "Brokers")], [0, nil]],
      ["clearanceBrokerage", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClearanceBrokerageType", XSD::QName.new(NsV14, "ClearanceBrokerage")], [0, 1]],
      ["customsOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsOptionDetail", XSD::QName.new(NsV14, "CustomsOptions")], [0, 1]],
      ["importerOfRecord", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "ImporterOfRecord")], [0, 1]],
      ["recipientCustomsId", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecipientCustomsId", XSD::QName.new(NsV14, "RecipientCustomsId")], [0, 1]],
      ["dutiesPayment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment", XSD::QName.new(NsV14, "DutiesPayment")], [0, 1]],
      ["documentContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalDocumentContentType", XSD::QName.new(NsV14, "DocumentContent")], [0, 1]],
      ["customsValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "CustomsValue")], [0, 1]],
      ["freightOnValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightOnValueType", XSD::QName.new(NsV14, "FreightOnValue")], [0, 1]],
      ["insuranceCharges", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "InsuranceCharges")], [0, 1]],
      ["partiesToTransactionAreRelated", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "PartiesToTransactionAreRelated")], [0, 1]],
      ["commercialInvoice", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommercialInvoice", XSD::QName.new(NsV14, "CommercialInvoice")], [0, 1]],
      ["commodities", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Commodity[]", XSD::QName.new(NsV14, "Commodities")], [0, nil]],
      ["exportDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExportDetail", XSD::QName.new(NsV14, "ExportDetail")], [0, 1]],
      ["regulatoryControls", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryControlType[]", XSD::QName.new(NsV14, "RegulatoryControls")], [0, nil]],
      ["declarationStatementDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsDeclarationStatementDetail", XSD::QName.new(NsV14, "DeclarationStatementDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsDeclarationStatementDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomsDeclarationStatementDetail"),
    :schema_element => [
      ["types", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsDeclarationStatementType[]", XSD::QName.new(NsV14, "Types")], [0, nil]],
      ["naftaLowValueStatementDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaLowValueStatementDetail", XSD::QName.new(NsV14, "NaftaLowValueStatementDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "CustomsOptionDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsOptionType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsContainer,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsContainer"),
    :schema_element => [
      ["packingType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousContainerPackingType", XSD::QName.new(NsV14, "PackingType")], [0, 1]],
      ["containerType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ContainerType")], [0, 1]],
      ["radioactiveContainerClass", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactiveContainerClassType", XSD::QName.new(NsV14, "RadioactiveContainerClass")], [0, 1]],
      ["numberOfContainers", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "NumberOfContainers")], [0, 1]],
      ["hazardousCommodities", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityContent[]", XSD::QName.new(NsV14, "HazardousCommodities")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsDetail,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsDetail"),
    :schema_element => [
      ["uploadedTrackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "UploadedTrackingNumber")], [0, 1]],
      ["regulation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityRegulationType", XSD::QName.new(NsV14, "Regulation")], [0, 1]],
      ["accessibility", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsAccessibilityType", XSD::QName.new(NsV14, "Accessibility")], [0, 1]],
      ["cargoAircraftOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "CargoAircraftOnly")], [0, 1]],
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]],
      ["packingOption", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsPackingOptionType", XSD::QName.new(NsV14, "PackingOption")], [0, 1]],
      ["referenceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ReferenceId")], [0, 1]],
      ["containers", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsContainer[]", XSD::QName.new(NsV14, "Containers")], [0, nil]],
      ["packaging", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackagingDetail", XSD::QName.new(NsV14, "Packaging")], [0, 1]],
      ["signatory", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsSignatory", XSD::QName.new(NsV14, "Signatory")], [0, 1]],
      ["emergencyContactNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EmergencyContactNumber")], [0, 1]],
      ["offeror", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Offeror")], [0, 1]],
      ["infectiousSubstanceResponsibleContact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Contact", XSD::QName.new(NsV14, "InfectiousSubstanceResponsibleContact")], [0, 1]],
      ["additionalHandling", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AdditionalHandling")], [0, 1]],
      ["radioactivityDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactivityDetail", XSD::QName.new(NsV14, "RadioactivityDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsShippersDeclarationDetail,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsShippersDeclarationDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsSignatory,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsSignatory"),
    :schema_element => [
      ["contactName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ContactName")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Title")], [0, 1]],
      ["place", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Place")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DateRange,
    :schema_type => XSD::QName.new(NsV14, "DateRange"),
    :schema_element => [
      ["begins", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "Begins")], [0, 1]],
      ["ends", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "Ends")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeletionDetail,
    :schema_type => XSD::QName.new(NsV14, "DeletionDetail"),
    :schema_element => [
      ["deleteStatus", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeleteRecordedShipmentRequestServiceLevel", XSD::QName.new(NsV14, "DeleteStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeliveryOnInvoiceAcceptanceDetail,
    :schema_type => XSD::QName.new(NsV14, "DeliveryOnInvoiceAcceptanceDetail"),
    :schema_element => [
      ["recipient", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "Recipient")], [0, 1]],
      ["trackingId", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId", XSD::QName.new(NsV14, "TrackingId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DestinationControlDetail,
    :schema_type => XSD::QName.new(NsV14, "DestinationControlDetail"),
    :schema_element => [
      ["statementTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DestinationControlStatementType[]", XSD::QName.new(NsV14, "StatementTypes")], [0, nil]],
      ["destinationCountries", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationCountries")], [0, 1]],
      ["endUser", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EndUser")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DetentionDetail,
    :schema_type => XSD::QName.new(NsV14, "DetentionDetail"),
    :schema_element => [
      ["duration", ["SOAP::SOAPDuration", XSD::QName.new(NsV14, "Duration")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions,
    :schema_type => XSD::QName.new(NsV14, "Dimensions"),
    :schema_element => [
      ["length", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Length")], [0, 1]],
      ["width", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Width")], [0, 1]],
      ["height", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Height")], [0, 1]],
      ["units", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearUnits", XSD::QName.new(NsV14, "Units")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContent,
    :schema_type => XSD::QName.new(NsV14, "DocTabContent"),
    :schema_element => [
      ["docTabContentType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentType", XSD::QName.new(NsV14, "DocTabContentType")], [0, 1]],
      ["zone001", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentZone001", XSD::QName.new(NsV14, "Zone001")], [0, 1]],
      ["barcoded", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentBarcoded", XSD::QName.new(NsV14, "Barcoded")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentBarcoded,
    :schema_type => XSD::QName.new(NsV14, "DocTabContentBarcoded"),
    :schema_element => [
      ["symbology", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BarcodeSymbologyType", XSD::QName.new(NsV14, "Symbology")], [0, 1]],
      ["specification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabZoneSpecification", XSD::QName.new(NsV14, "Specification")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentZone001,
    :schema_type => XSD::QName.new(NsV14, "DocTabContentZone001"),
    :schema_element => [
      ["docTabZoneSpecifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabZoneSpecification[]", XSD::QName.new(NsV14, "DocTabZoneSpecifications")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabZoneSpecification,
    :schema_type => XSD::QName.new(NsV14, "DocTabZoneSpecification"),
    :schema_element => [
      ["zoneNumber", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "ZoneNumber")], [0, 1]],
      ["header", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Header")], [0, 1]],
      ["dataField", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DataField")], [0, 1]],
      ["literalValue", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LiteralValue")], [0, 1]],
      ["justification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabZoneJustificationType", XSD::QName.new(NsV14, "Justification")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocumentFormatOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "DocumentFormatOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocumentFormatOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailDetail,
    :schema_type => XSD::QName.new(NsV14, "EMailDetail"),
    :schema_element => [
      ["emailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EmailAddress")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Name")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailLabelDetail,
    :schema_type => XSD::QName.new(NsV14, "EMailLabelDetail"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Message")], [0, 1]],
      ["recipients", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailRecipient[]", XSD::QName.new(NsV14, "Recipients")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailRecipient,
    :schema_type => XSD::QName.new(NsV14, "EMailRecipient"),
    :schema_element => [
      ["emailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EmailAddress")], [0, 1]],
      ["role", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AccessorRoleType", XSD::QName.new(NsV14, "Role")], [0, 1]],
      ["optionsRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EmailOptionsRequested", XSD::QName.new(NsV14, "OptionsRequested")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EdtExciseCondition,
    :schema_type => XSD::QName.new(NsV14, "EdtExciseCondition"),
    :schema_element => [
      ["category", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Category")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EmailOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "EmailOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EmailOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdDetail,
    :schema_type => XSD::QName.new(NsV14, "EtdDetail"),
    :schema_element => [
      ["confirmation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdConfirmationType", XSD::QName.new(NsV14, "Confirmation")], [0, 1]],
      ["attributes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdAttributeType[]", XSD::QName.new(NsV14, "Attributes")], [0, nil]],
      ["requestedDocumentCopies", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShippingDocumentType[]", XSD::QName.new(NsV14, "RequestedDocumentCopies")], [0, nil]],
      ["documents", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentDetail[]", XSD::QName.new(NsV14, "Documents")], [0, nil]],
      ["documentReferences", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentReferenceDetail[]", XSD::QName.new(NsV14, "DocumentReferences")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExportDeclarationDetail,
    :schema_type => XSD::QName.new(NsV14, "ExportDeclarationDetail"),
    :schema_element => [
      ["documentFormat", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "DocumentFormat")], [0, 1]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExportDetail,
    :schema_type => XSD::QName.new(NsV14, "ExportDetail"),
    :schema_element => [
      ["b13AFilingOption", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::B13AFilingOptionType", XSD::QName.new(NsV14, "B13AFilingOption")], [0, 1]],
      ["exportComplianceStatement", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ExportComplianceStatement")], [0, 1]],
      ["permitNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PermitNumber")], [0, 1]],
      ["destinationControlDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DestinationControlDetail", XSD::QName.new(NsV14, "DestinationControlDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExpressFreightDetail,
    :schema_type => XSD::QName.new(NsV14, "ExpressFreightDetail"),
    :schema_element => [
      ["packingListEnclosed", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "PackingListEnclosed")], [0, 1]],
      ["shippersLoadAndCount", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "ShippersLoadAndCount")], [0, 1]],
      ["bookingConfirmationNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "BookingConfirmationNumber")], [0, 1]],
      ["referenceLabelRequested", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "ReferenceLabelRequested")], [0, 1]],
      ["beforeDeliveryContact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExpressFreightDetailContact", XSD::QName.new(NsV14, "BeforeDeliveryContact")], [0, 1]],
      ["undeliverableContact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExpressFreightDetailContact", XSD::QName.new(NsV14, "UndeliverableContact")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExpressFreightDetailContact,
    :schema_type => XSD::QName.new(NsV14, "ExpressFreightDetailContact"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Name")], [0, 1]],
      ["phone", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Phone")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExtraLaborDetail,
    :schema_type => XSD::QName.new(NsV14, "ExtraLaborDetail"),
    :schema_element => [
      ["duration", ["SOAP::SOAPDuration", XSD::QName.new(NsV14, "Duration")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FaxDetail,
    :schema_type => XSD::QName.new(NsV14, "FaxDetail"),
    :schema_element => [
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FlatbedTrailerDetail,
    :schema_type => XSD::QName.new(NsV14, "FlatbedTrailerDetail"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FlatbedTrailerOption[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightAddressLabelDetail,
    :schema_type => XSD::QName.new(NsV14, "FreightAddressLabelDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["copies", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Copies")], [0, 1]],
      ["startingPosition", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PageQuadrantType", XSD::QName.new(NsV14, "StartingPosition")], [0, 1]],
      ["docTabContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContent", XSD::QName.new(NsV14, "DocTabContent")], [0, 1]],
      ["customContentPosition", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RelativeVerticalPositionType", XSD::QName.new(NsV14, "CustomContentPosition")], [0, 1]],
      ["customContent", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelDetail", XSD::QName.new(NsV14, "CustomContent")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightBillOfLadingDetail,
    :schema_type => XSD::QName.new(NsV14, "FreightBillOfLadingDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightGuaranteeDetail,
    :schema_type => XSD::QName.new(NsV14, "FreightGuaranteeDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightGuaranteeType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["date", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "Date")], [0, 1]],
      ["time", ["SOAP::SOAPTime", XSD::QName.new(NsV14, "Time")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentDetail,
    :schema_type => XSD::QName.new(NsV14, "FreightShipmentDetail"),
    :schema_element => [
      ["fedExFreightAccountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FedExFreightAccountNumber")], [0, 1]],
      ["fedExFreightBillingContactAndAddress", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress", XSD::QName.new(NsV14, "FedExFreightBillingContactAndAddress")], [0, 1]],
      ["alternateBilling", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "AlternateBilling")], [0, 1]],
      ["printedReferences", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PrintedReference[]", XSD::QName.new(NsV14, "PrintedReferences")], [0, nil]],
      ["role", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentRoleType", XSD::QName.new(NsV14, "Role")], [0, 1]],
      ["collectTermsType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightCollectTermsType", XSD::QName.new(NsV14, "CollectTermsType")], [0, 1]],
      ["declaredValuePerUnit", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "DeclaredValuePerUnit")], [0, 1]],
      ["declaredValueUnits", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DeclaredValueUnits")], [0, 1]],
      ["liabilityCoverageDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LiabilityCoverageDetail", XSD::QName.new(NsV14, "LiabilityCoverageDetail")], [0, 1]],
      ["coupons", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "Coupons")], [0, nil]],
      ["totalHandlingUnits", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "TotalHandlingUnits")], [0, 1]],
      ["clientDiscountPercent", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "ClientDiscountPercent")], [0, 1]],
      ["palletWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "PalletWeight")], [0, 1]],
      ["shipmentDimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions", XSD::QName.new(NsV14, "ShipmentDimensions")], [0, 1]],
      ["comment", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Comment")], [0, 1]],
      ["specialServicePayments", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightSpecialServicePayment[]", XSD::QName.new(NsV14, "SpecialServicePayments")], [0, nil]],
      ["hazardousMaterialsEmergencyContactNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "HazardousMaterialsEmergencyContactNumber")], [0, 1]],
      ["hazardousMaterialsOfferor", ["SOAP::SOAPString", XSD::QName.new(NsV14, "HazardousMaterialsOfferor")], [0, 1]],
      ["lineItems", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentLineItem[]", XSD::QName.new(NsV14, "LineItems")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentLineItem,
    :schema_type => XSD::QName.new(NsV14, "FreightShipmentLineItem"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["freightClass", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightClassType", XSD::QName.new(NsV14, "FreightClass")], [0, 1]],
      ["billingMaskName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "BillingMaskName")], [0, 1]],
      ["liabilityCoverageDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LiabilityCoverageDetail", XSD::QName.new(NsV14, "LiabilityCoverageDetail")], [0, 1]],
      ["handlingUnits", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "HandlingUnits")], [0, 1]],
      ["packaging", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PhysicalPackagingType", XSD::QName.new(NsV14, "Packaging")], [0, 1]],
      ["pieces", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Pieces")], [0, 1]],
      ["nmfcCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "NmfcCode")], [0, 1]],
      ["hazardousMaterials", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityOptionType", XSD::QName.new(NsV14, "HazardousMaterials")], [0, 1]],
      ["purchaseOrderNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PurchaseOrderNumber")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["weight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "Weight")], [0, 1]],
      ["dimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions", XSD::QName.new(NsV14, "Dimensions")], [0, 1]],
      ["volume", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Volume", XSD::QName.new(NsV14, "Volume")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightSpecialServicePayment,
    :schema_type => XSD::QName.new(NsV14, "FreightSpecialServicePayment"),
    :schema_element => [
      ["specialService", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialService")], [0, 1]],
      ["paymentType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentRoleType", XSD::QName.new(NsV14, "PaymentType")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GeneralAgencyAgreementDetail,
    :schema_type => XSD::QName.new(NsV14, "GeneralAgencyAgreementDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllServicesAndPackagingReply,
    :schema_type => XSD::QName.new(NsV14, "GetAllServicesAndPackagingReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification[]", XSD::QName.new(NsV14, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["productDetails", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductDetail[]", XSD::QName.new(NsV14, "ProductDetails")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllServicesAndPackagingRequest,
    :schema_type => XSD::QName.new(NsV14, "GetAllServicesAndPackagingRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail", XSD::QName.new(NsV14, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail", XSD::QName.new(NsV14, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["variableOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceOptionType[]", XSD::QName.new(NsV14, "VariableOptions")], [0, nil]],
      ["originRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "OriginRoutingCode")], [0, 1]],
      ["destinationRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationRoutingCode")], [0, 1]],
      ["formId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FormId")], [0, 1]],
      ["carrierCodes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType[]", XSD::QName.new(NsV14, "CarrierCodes")], [0, nil]],
      ["requestedShipment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShipment", XSD::QName.new(NsV14, "RequestedShipment")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllSpecialServicesReply,
    :schema_type => XSD::QName.new(NsV14, "GetAllSpecialServicesReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification[]", XSD::QName.new(NsV14, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["validShipmentSpecialServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentSpecialServiceDescription[]", XSD::QName.new(NsV14, "ValidShipmentSpecialServices")], [0, nil]],
      ["validPackageSpecialServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialServiceDescription[]", XSD::QName.new(NsV14, "ValidPackageSpecialServices")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllSpecialServicesRequest,
    :schema_type => XSD::QName.new(NsV14, "GetAllSpecialServicesRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail", XSD::QName.new(NsV14, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail", XSD::QName.new(NsV14, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["originRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "OriginRoutingCode")], [0, 1]],
      ["destinationRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationRoutingCode")], [0, 1]],
      ["formId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FormId")], [0, 1]],
      ["carrierCodes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType[]", XSD::QName.new(NsV14, "CarrierCodes")], [0, nil]],
      ["requestedShipment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShipment", XSD::QName.new(NsV14, "RequestedShipment")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityContent,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityContent"),
    :schema_element => [
      ["description", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityDescription", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["quantity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityQuantityDetail", XSD::QName.new(NsV14, "Quantity")], [0, 1]],
      ["innerReceptacles", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityInnerReceptacleDetail[]", XSD::QName.new(NsV14, "InnerReceptacles")], [0, nil]],
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityOptionDetail", XSD::QName.new(NsV14, "Options")], [0, 1]],
      ["radionuclideDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadionuclideDetail", XSD::QName.new(NsV14, "RadionuclideDetail")], [0, 1]],
      ["netExplosiveDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NetExplosiveDetail", XSD::QName.new(NsV14, "NetExplosiveDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityDescription,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityDescription"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["sequenceNumber", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "SequenceNumber")], [0, 1]],
      ["packingGroup", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackingGroupType", XSD::QName.new(NsV14, "PackingGroup")], [0, 1]],
      ["packingDetails", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackingDetail", XSD::QName.new(NsV14, "PackingDetails")], [0, 1]],
      ["reportableQuantity", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "ReportableQuantity")], [0, 1]],
      ["properShippingName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ProperShippingName")], [0, 1]],
      ["technicalName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "TechnicalName")], [0, 1]],
      ["percentage", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Percentage")], [0, 1]],
      ["hazardClass", ["SOAP::SOAPString", XSD::QName.new(NsV14, "HazardClass")], [0, 1]],
      ["subsidiaryClasses", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "SubsidiaryClasses")], [0, nil]],
      ["labelText", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LabelText")], [0, 1]],
      ["processingOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityDescriptionProcessingOptionType[]", XSD::QName.new(NsV14, "ProcessingOptions")], [0, nil]],
      ["authorization", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Authorization")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityInnerReceptacleDetail,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityInnerReceptacleDetail"),
    :schema_element => [
      ["quantity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityQuantityDetail", XSD::QName.new(NsV14, "Quantity")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityOptionDetail"),
    :schema_element => [
      ["labelTextOption", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityLabelTextOptionType", XSD::QName.new(NsV14, "LabelTextOption")], [0, 1]],
      ["customerSuppliedLabelText", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomerSuppliedLabelText")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackagingDetail,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityPackagingDetail"),
    :schema_element => [
      ["count", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "Count")], [0, 1]],
      ["units", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Units")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackingDetail,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityPackingDetail"),
    :schema_element => [
      ["cargoAircraftOnly", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "CargoAircraftOnly")], [0, 1]],
      ["packingInstructions", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PackingInstructions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityQuantityDetail,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityQuantityDetail"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Amount")], [0, 1]],
      ["units", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Units")], [0, 1]],
      ["quantityType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityQuantityType", XSD::QName.new(NsV14, "QuantityType")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HoldAtLocationDetail,
    :schema_type => XSD::QName.new(NsV14, "HoldAtLocationDetail"),
    :schema_element => [
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]],
      ["locationContactAndAddress", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress", XSD::QName.new(NsV14, "LocationContactAndAddress")], [0, 1]],
      ["locationType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FedExLocationType", XSD::QName.new(NsV14, "LocationType")], [0, 1]],
      ["locationTypeForDisplay", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LocationTypeForDisplay")], [0, 1]],
      ["locationId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LocationId")], [0, 1]],
      ["locationNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "LocationNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HomeDeliveryPremiumDetail,
    :schema_type => XSD::QName.new(NsV14, "HomeDeliveryPremiumDetail"),
    :schema_element => [
      ["homeDeliveryPremiumType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HomeDeliveryPremiumType", XSD::QName.new(NsV14, "HomeDeliveryPremiumType")], [0, 1]],
      ["date", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "Date")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalControlledExportDetail,
    :schema_type => XSD::QName.new(NsV14, "InternationalControlledExportDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalControlledExportType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["foreignTradeZoneCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ForeignTradeZoneCode")], [0, 1]],
      ["entryNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EntryNumber")], [0, 1]],
      ["licenseOrPermitNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LicenseOrPermitNumber")], [0, 1]],
      ["licenseOrPermitExpirationDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "LicenseOrPermitExpirationDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalDistributionSummaryDetail,
    :schema_type => XSD::QName.new(NsV14, "InternationalDistributionSummaryDetail"),
    :schema_element => [
      ["totalWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "TotalWeight")], [0, 1]],
      ["totalPackageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "TotalPackageCount")], [0, 1]],
      ["totalUniqueAddressCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "TotalUniqueAddressCount")], [0, 1]],
      ["totalCustomsValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalCustomsValue")], [0, 1]],
      ["totalInsuredValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalInsuredValue")], [0, 1]],
      ["totalFreightCharges", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalFreightCharges")], [0, 1]],
      ["totalInsuranceCharges", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalInsuranceCharges")], [0, 1]],
      ["totalTaxesOrMiscellaneousCharges", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalTaxesOrMiscellaneousCharges")], [0, 1]],
      ["totalHandlingCosts", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalHandlingCosts")], [0, 1]],
      ["totalPackingCosts", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalPackingCosts")], [0, 1]],
      ["dryIceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceDetail", XSD::QName.new(NsV14, "DryIceDetail")], [0, 1]],
      ["dangerousGoodsAccessibility", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsAccessibilityType", XSD::QName.new(NsV14, "DangerousGoodsAccessibility")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalTrafficInArmsRegulationsDetail,
    :schema_type => XSD::QName.new(NsV14, "InternationalTrafficInArmsRegulationsDetail"),
    :schema_element => [
      ["licenseOrExemptionNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LicenseOrExemptionNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecification,
    :schema_type => XSD::QName.new(NsV14, "LabelSpecification"),
    :schema_element => [
      ["processingOptionsRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecificationProcessingOptionsRequested", XSD::QName.new(NsV14, "ProcessingOptionsRequested")], [0, 1]],
      ["dispositions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentDispositionDetail[]", XSD::QName.new(NsV14, "Dispositions")], [0, nil]],
      ["labelFormatType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelFormatType", XSD::QName.new(NsV14, "LabelFormatType")], [0, 1]],
      ["imageType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentImageType", XSD::QName.new(NsV14, "ImageType")], [0, 1]],
      ["labelStockType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelStockType", XSD::QName.new(NsV14, "LabelStockType")], [0, 1]],
      ["labelPrintingOrientation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelPrintingOrientationType", XSD::QName.new(NsV14, "LabelPrintingOrientation")], [0, 1]],
      ["labelRotation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelRotationType", XSD::QName.new(NsV14, "LabelRotation")], [0, 1]],
      ["labelOrder", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelOrderType", XSD::QName.new(NsV14, "LabelOrder")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]],
      ["printedLabelOrigin", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress", XSD::QName.new(NsV14, "PrintedLabelOrigin")], [0, 1]],
      ["customerSpecifiedDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerSpecifiedLabelDetail", XSD::QName.new(NsV14, "CustomerSpecifiedDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecificationProcessingOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "LabelSpecificationProcessingOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecificationProcessingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LiabilityCoverageDetail,
    :schema_type => XSD::QName.new(NsV14, "LiabilityCoverageDetail"),
    :schema_element => [
      ["coverageType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LiabilityCoverageType", XSD::QName.new(NsV14, "CoverageType")], [0, 1]],
      ["coverageAmount", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "CoverageAmount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearMeasure,
    :schema_type => XSD::QName.new(NsV14, "LinearMeasure"),
    :schema_element => [
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Value")], [0, 1]],
      ["units", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearUnits", XSD::QName.new(NsV14, "Units")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization,
    :schema_type => XSD::QName.new(NsV14, "Localization"),
    :schema_element => [
      ["languageCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LanguageCode")]],
      ["localeCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LocaleCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::MarkingOrTaggingDetail,
    :schema_type => XSD::QName.new(NsV14, "MarkingOrTaggingDetail"),
    :schema_element => [
      ["count", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "Count")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Measure,
    :schema_type => XSD::QName.new(NsV14, "Measure"),
    :schema_element => [
      ["quantity", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Quantity")], [0, 1]],
      ["units", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Units")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money,
    :schema_type => XSD::QName.new(NsV14, "Money"),
    :schema_element => [
      ["currency", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Currency")], [0, 1]],
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Amount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaCertificateOfOriginDetail,
    :schema_type => XSD::QName.new(NsV14, "NaftaCertificateOfOriginDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["blanketPeriod", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DateRange", XSD::QName.new(NsV14, "BlanketPeriod")], [0, 1]],
      ["importerSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaImporterSpecificationType", XSD::QName.new(NsV14, "ImporterSpecification")], [0, 1]],
      ["signatureContact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Contact", XSD::QName.new(NsV14, "SignatureContact")], [0, 1]],
      ["producerSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducerSpecificationType", XSD::QName.new(NsV14, "ProducerSpecification")], [0, 1]],
      ["producers", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducer[]", XSD::QName.new(NsV14, "Producers")], [0, nil]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaCommodityDetail,
    :schema_type => XSD::QName.new(NsV14, "NaftaCommodityDetail"),
    :schema_element => [
      ["preferenceCriterion", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaPreferenceCriterionCode", XSD::QName.new(NsV14, "PreferenceCriterion")], [0, 1]],
      ["producerDetermination", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducerDeterminationCode", XSD::QName.new(NsV14, "ProducerDetermination")], [0, 1]],
      ["producerId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ProducerId")], [0, 1]],
      ["netCostMethod", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaNetCostMethodCode", XSD::QName.new(NsV14, "NetCostMethod")], [0, 1]],
      ["netCostDateRange", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DateRange", XSD::QName.new(NsV14, "NetCostDateRange")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaLowValueStatementDetail,
    :schema_type => XSD::QName.new(NsV14, "NaftaLowValueStatementDetail"),
    :schema_element => [
      ["role", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsRoleType", XSD::QName.new(NsV14, "Role")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducer,
    :schema_type => XSD::QName.new(NsV14, "NaftaProducer"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["producer", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "Producer")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NetExplosiveDetail,
    :schema_type => XSD::QName.new(NsV14, "NetExplosiveDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NetExplosiveClassificationType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Amount")], [0, 1]],
      ["units", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Units")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NonBusinessTimeDetail,
    :schema_type => XSD::QName.new(NsV14, "NonBusinessTimeDetail"),
    :schema_element => [
      ["personDays", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PersonDays")], [0, 1]],
      ["personHours", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PersonHours")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification,
    :schema_type => XSD::QName.new(NsV14, "Notification"),
    :schema_element => [
      ["severity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "Severity")]],
      ["source", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Source")]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Code")], [0, 1]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Message")], [0, 1]],
      ["localizedMessage", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LocalizedMessage")], [0, 1]],
      ["messageParameters", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationParameter[]", XSD::QName.new(NsV14, "MessageParameters")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationContentSpecification,
    :schema_type => XSD::QName.new(NsV14, "NotificationContentSpecification"),
    :schema_element => [
      ["exclusions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationContentType[]", XSD::QName.new(NsV14, "Exclusions")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationDetail,
    :schema_type => XSD::QName.new(NsV14, "NotificationDetail"),
    :schema_element => [
      ["notificationType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationType", XSD::QName.new(NsV14, "NotificationType")], [0, 1]],
      ["emailDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailDetail", XSD::QName.new(NsV14, "EmailDetail")], [0, 1]],
      ["faxDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FaxDetail", XSD::QName.new(NsV14, "FaxDetail")], [0, 1]],
      ["smsDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmsDetail", XSD::QName.new(NsV14, "SmsDetail")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationParameter,
    :schema_type => XSD::QName.new(NsV14, "NotificationParameter"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Op900Detail,
    :schema_type => XSD::QName.new(NsV14, "Op900Detail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["reference", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReferenceType", XSD::QName.new(NsV14, "Reference")], [0, 1]],
      ["customerImageUsages", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsage[]", XSD::QName.new(NsV14, "CustomerImageUsages")], [0, nil]],
      ["signatureName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SignatureName")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialHandlingDetail,
    :schema_type => XSD::QName.new(NsV14, "PackageSpecialHandlingDetail"),
    :schema_element => [
      ["packedBy", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackagePackedByType", XSD::QName.new(NsV14, "PackedBy")], [0, 1]],
      ["damageKnown", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DamageStatusType", XSD::QName.new(NsV14, "DamageKnown")], [0, 1]],
      ["inspectionStatus", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InspectionStatusType", XSD::QName.new(NsV14, "InspectionStatus")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialServiceDescription,
    :schema_type => XSD::QName.new(NsV14, "PackageSpecialServiceDescription"),
    :schema_element => [
      ["carrierCodesAndServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceTypesByCarrierCodeDetail[]", XSD::QName.new(NsV14, "CarrierCodesAndServices")], [0, nil]],
      ["subSpecialServiceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SubSpecialServiceId")], [0, 1]],
      ["subNames", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "SubNames")], [0, nil]],
      ["specialServiceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceId")], [0, 1]],
      ["names", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "Names")], [0, nil]],
      ["specialServiceType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceType")], [0, 1]],
      ["specialServiceSubType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceSubType")], [0, 1]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Code")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["astraDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AstraDescription")], [0, 1]],
      ["customerIntegrationMode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerIntegrationModeType", XSD::QName.new(NsV14, "CustomerIntegrationMode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialServicesRequested,
    :schema_type => XSD::QName.new(NsV14, "PackageSpecialServicesRequested"),
    :schema_element => [
      ["specialServiceTypes", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "SpecialServiceTypes")], [0, nil]],
      ["codDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodDetail", XSD::QName.new(NsV14, "CodDetail")], [0, 1]],
      ["dangerousGoodsDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsDetail", XSD::QName.new(NsV14, "DangerousGoodsDetail")], [0, 1]],
      ["batteryDetails", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryClassificationDetail[]", XSD::QName.new(NsV14, "BatteryDetails")], [0, nil]],
      ["dryIceWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "DryIceWeight")], [0, 1]],
      ["signatureOptionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionDetail", XSD::QName.new(NsV14, "SignatureOptionDetail")], [0, 1]],
      ["pieceCountVerificationBoxCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PieceCountVerificationBoxCount")], [0, 1]],
      ["priorityAlertDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PriorityAlertDetail", XSD::QName.new(NsV14, "PriorityAlertDetail")], [0, 1]],
      ["alcoholDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AlcoholDetail", XSD::QName.new(NsV14, "AlcoholDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageStatusDetail,
    :schema_type => XSD::QName.new(NsV14, "PackageStatusDetail"),
    :schema_element => [
      ["status", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageLineItemStatusType[]", XSD::QName.new(NsV14, "Status")], [0, nil]],
      ["deletionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeletionDetail", XSD::QName.new(NsV14, "DeletionDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackagingDescription,
    :schema_type => XSD::QName.new(NsV14, "PackagingDescription"),
    :schema_element => [
      ["packagingType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PackagingType")], [0, 1]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Code")], [0, 1]],
      ["names", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "Names")], [0, nil]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["astraDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AstraDescription")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PalletShrinkwrapDetail,
    :schema_type => XSD::QName.new(NsV14, "PalletShrinkwrapDetail"),
    :schema_element => [
      ["palletCount", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "PalletCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PalletsProvidedDetail,
    :schema_type => XSD::QName.new(NsV14, "PalletsProvidedDetail"),
    :schema_element => [
      ["palletCount", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "PalletCount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedContact,
    :schema_type => XSD::QName.new(NsV14, "ParsedContact"),
    :schema_element => [
      ["personName", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedPersonName", XSD::QName.new(NsV14, "PersonName")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Title")], [0, 1]],
      ["companyName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CompanyName")], [0, 1]],
      ["phoneNumberCountryCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumberCountryCode")], [0, 1]],
      ["phoneNumberAreaCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumberAreaCode")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]],
      ["phoneExtension", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneExtension")], [0, 1]],
      ["pagerNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PagerNumber")], [0, 1]],
      ["faxNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FaxNumber")], [0, 1]],
      ["eMailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV14, "EMailAddress")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedContactAndAddress,
    :schema_type => XSD::QName.new(NsV14, "ParsedContactAndAddress"),
    :schema_element => [
      ["contact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedContact", XSD::QName.new(NsV14, "Contact")], [0, 1]],
      ["address", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Address")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ParsedPersonName,
    :schema_type => XSD::QName.new(NsV14, "ParsedPersonName"),
    :schema_element => [
      ["prefix", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Prefix")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Title")], [0, 1]],
      ["firstName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FirstName")], [0, 1]],
      ["middleName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "MiddleName")], [0, 1]],
      ["lastName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LastName")], [0, 1]],
      ["suffix", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Suffix")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party,
    :schema_type => XSD::QName.new(NsV14, "Party"),
    :schema_element => [
      ["accountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AccountNumber")], [0, 1]],
      ["tins", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TaxpayerIdentification[]", XSD::QName.new(NsV14, "Tins")], [0, nil]],
      ["contact", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Contact", XSD::QName.new(NsV14, "Contact")], [0, 1]],
      ["address", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Address")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment,
    :schema_type => XSD::QName.new(NsV14, "Payment"),
    :schema_element => [
      ["paymentType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PaymentType", XSD::QName.new(NsV14, "PaymentType")], [0, 1]],
      ["payor", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payor", XSD::QName.new(NsV14, "Payor")], [0, 1]],
      ["creditCard", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCard", XSD::QName.new(NsV14, "CreditCard")], [0, 1]],
      ["creditCardTransactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionDetail", XSD::QName.new(NsV14, "CreditCardTransactionDetail")], [0, 1]],
      ["amount", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "Amount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payor,
    :schema_type => XSD::QName.new(NsV14, "Payor"),
    :schema_element => [
      ["responsibleParty", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "ResponsibleParty")], [0, 1]],
      ["associatedAccounts", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedAccount[]", XSD::QName.new(NsV14, "AssociatedAccounts")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentDetail,
    :schema_type => XSD::QName.new(NsV14, "PendingShipmentDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ExpirationDate")], [0, 1]],
      ["emailLabelDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailLabelDetail", XSD::QName.new(NsV14, "EmailLabelDetail")], [0, 1]],
      ["processingOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentProcessingOptionsRequested", XSD::QName.new(NsV14, "ProcessingOptions")], [0, 1]],
      ["recommendedDocumentSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecommendedDocumentSpecification", XSD::QName.new(NsV14, "RecommendedDocumentSpecification")], [0, 1]],
      ["documentReferences", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentReferenceDetail[]", XSD::QName.new(NsV14, "DocumentReferences")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentProcessingOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "PendingShipmentProcessingOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentProcessingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupDetail,
    :schema_type => XSD::QName.new(NsV14, "PickupDetail"),
    :schema_element => [
      ["readyDateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsV14, "ReadyDateTime")], [0, 1]],
      ["latestPickupDateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsV14, "LatestPickupDateTime")], [0, 1]],
      ["courierInstructions", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CourierInstructions")], [0, 1]],
      ["requestType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupRequestType", XSD::QName.new(NsV14, "RequestType")], [0, 1]],
      ["requestSource", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupRequestSourceType", XSD::QName.new(NsV14, "RequestSource")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PrintedReference,
    :schema_type => XSD::QName.new(NsV14, "PrintedReference"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PrintedReferenceType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PriorityAlertDetail,
    :schema_type => XSD::QName.new(NsV14, "PriorityAlertDetail"),
    :schema_element => [
      ["enhancementTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PriorityAlertEnhancementType[]", XSD::QName.new(NsV14, "EnhancementTypes")], [0, nil]],
      ["content", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "Content")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductDetail,
    :schema_type => XSD::QName.new(NsV14, "ProductDetail"),
    :schema_element => [
      ["serviceDescription", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceDescription", XSD::QName.new(NsV14, "ServiceDescription")], [0, 1]],
      ["packagingDescription", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackagingDescription", XSD::QName.new(NsV14, "PackagingDescription")], [0, 1]],
      ["astraServiceDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AstraServiceDescription")], [0, 1]],
      ["scac", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Scac")], [0, 1]],
      ["appliedOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceOptionType[]", XSD::QName.new(NsV14, "AppliedOptions")], [0, nil]],
      ["appliedSubOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceSubOptionDetail", XSD::QName.new(NsV14, "AppliedSubOptions")], [0, 1]],
      ["derivedShipmentSignatureOption", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionDetail", XSD::QName.new(NsV14, "DerivedShipmentSignatureOption")], [0, 1]],
      ["derivedPackageSignatureOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionDetail[]", XSD::QName.new(NsV14, "DerivedPackageSignatureOptions")], [0, nil]],
      ["maximumWeights", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight[]", XSD::QName.new(NsV14, "MaximumWeights")], [0, nil]],
      ["maximumDimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions[]", XSD::QName.new(NsV14, "MaximumDimensions")], [0, nil]],
      ["maximumLengthPlusGirths", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearMeasure[]", XSD::QName.new(NsV14, "MaximumLengthPlusGirths")], [0, nil]],
      ["maximumInsuredValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "MaximumInsuredValue")], [0, 1]],
      ["derivedEtdType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CompletedEtdType", XSD::QName.new(NsV14, "DerivedEtdType")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName,
    :schema_type => XSD::QName.new(NsV14, "ProductName"),
    :schema_element => [
      ["type", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["encoding", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Encoding")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactivityDetail,
    :schema_type => XSD::QName.new(NsV14, "RadioactivityDetail"),
    :schema_element => [
      ["transportIndex", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "TransportIndex")], [0, 1]],
      ["surfaceReading", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "SurfaceReading")], [0, 1]],
      ["criticalitySafetyIndex", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "CriticalitySafetyIndex")], [0, 1]],
      ["dimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions", XSD::QName.new(NsV14, "Dimensions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadionuclideActivity,
    :schema_type => XSD::QName.new(NsV14, "RadionuclideActivity"),
    :schema_element => [
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Value")], [0, 1]],
      ["unitOfMeasure", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactivityUnitOfMeasure", XSD::QName.new(NsV14, "UnitOfMeasure")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadionuclideDetail,
    :schema_type => XSD::QName.new(NsV14, "RadionuclideDetail"),
    :schema_element => [
      ["radionuclide", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Radionuclide")], [0, 1]],
      ["activity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadionuclideActivity", XSD::QName.new(NsV14, "Activity")], [0, 1]],
      ["exceptedPackagingIsReportableQuantity", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "ExceptedPackagingIsReportableQuantity")], [0, 1]],
      ["physicalForm", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PhysicalFormType", XSD::QName.new(NsV14, "PhysicalForm")], [0, 1]],
      ["chemicalForm", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ChemicalForm")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecipientCustomsId,
    :schema_type => XSD::QName.new(NsV14, "RecipientCustomsId"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecipientCustomsIdType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecommendedDocumentSpecification,
    :schema_type => XSD::QName.new(NsV14, "RecommendedDocumentSpecification"),
    :schema_element => [
      ["types", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecommendedDocumentType[]", XSD::QName.new(NsV14, "Types")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryLabelContentDetail,
    :schema_type => XSD::QName.new(NsV14, "RegulatoryLabelContentDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryLabelType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["generationOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerSpecifiedLabelGenerationOptionType[]", XSD::QName.new(NsV14, "GenerationOptions")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedPackageLineItem,
    :schema_type => XSD::QName.new(NsV14, "RequestedPackageLineItem"),
    :schema_element => [
      ["sequenceNumber", ["SOAP::SOAPPositiveInteger", XSD::QName.new(NsV14, "SequenceNumber")], [0, 1]],
      ["groupNumber", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "GroupNumber")], [0, 1]],
      ["groupPackageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "GroupPackageCount")], [0, 1]],
      ["statusDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageStatusDetail", XSD::QName.new(NsV14, "StatusDetail")], [0, 1]],
      ["trackingIds", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId[]", XSD::QName.new(NsV14, "TrackingIds")], [0, nil]],
      ["variableHandlingChargeDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VariableHandlingChargeDetail", XSD::QName.new(NsV14, "VariableHandlingChargeDetail")], [0, 1]],
      ["insuredValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "InsuredValue")], [0, 1]],
      ["weight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "Weight")], [0, 1]],
      ["dimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions", XSD::QName.new(NsV14, "Dimensions")], [0, 1]],
      ["physicalPackaging", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PhysicalPackagingType", XSD::QName.new(NsV14, "PhysicalPackaging")], [0, 1]],
      ["associatedFreightLineItems", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedFreightLineItemDetail[]", XSD::QName.new(NsV14, "AssociatedFreightLineItems")], [0, nil]],
      ["itemDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ItemDescription")], [0, 1]],
      ["itemDescriptionForClearance", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ItemDescriptionForClearance")], [0, 1]],
      ["customerReferences", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReference[]", XSD::QName.new(NsV14, "CustomerReferences")], [0, nil]],
      ["specialServicesRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialServicesRequested", XSD::QName.new(NsV14, "SpecialServicesRequested")], [0, 1]],
      ["specialHandlingDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialHandlingDetail", XSD::QName.new(NsV14, "SpecialHandlingDetail")], [0, 1]],
      ["contentRecords", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContentRecord[]", XSD::QName.new(NsV14, "ContentRecords")], [0, nil]],
      ["commodities", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Commodity[]", XSD::QName.new(NsV14, "Commodities")], [0, nil]],
      ["conveyanceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipperConveyanceDetail", XSD::QName.new(NsV14, "ConveyanceDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShipment,
    :schema_type => XSD::QName.new(NsV14, "RequestedShipment"),
    :schema_element => [
      ["shipTimestamp", ["SOAP::SOAPDateTime", XSD::QName.new(NsV14, "ShipTimestamp")], [0, 1]],
      ["dropoffType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DropoffType", XSD::QName.new(NsV14, "DropoffType")], [0, 1]],
      ["serviceType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ServiceType")], [0, 1]],
      ["packagingType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PackagingType")], [0, 1]],
      ["shippingCycle", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ShippingCycle")], [0, 1]],
      ["manifestDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentManifestDetail", XSD::QName.new(NsV14, "ManifestDetail")], [0, 1]],
      ["variationOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentVariationOptionDetail[]", XSD::QName.new(NsV14, "VariationOptions")], [0, nil]],
      ["totalWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "TotalWeight")], [0, 1]],
      ["totalInsuredValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "TotalInsuredValue")], [0, 1]],
      ["totalDimensions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Dimensions", XSD::QName.new(NsV14, "TotalDimensions")], [0, 1]],
      ["preferredCurrency", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PreferredCurrency")], [0, 1]],
      ["shipmentAuthorizationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentAuthorizationDetail", XSD::QName.new(NsV14, "ShipmentAuthorizationDetail")], [0, 1]],
      ["shipper", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "Shipper")], [0, 1]],
      ["recipient", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "Recipient")], [0, 1]],
      ["recipientLocationNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "RecipientLocationNumber")], [0, 1]],
      ["origin", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ContactAndAddress", XSD::QName.new(NsV14, "Origin")], [0, 1]],
      ["soldTo", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Party", XSD::QName.new(NsV14, "SoldTo")], [0, 1]],
      ["shippingChargesPayment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment", XSD::QName.new(NsV14, "ShippingChargesPayment")], [0, 1]],
      ["specialServicesRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentSpecialServicesRequested", XSD::QName.new(NsV14, "SpecialServicesRequested")], [0, 1]],
      ["processingOptionsRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentProcessingOptionsRequested", XSD::QName.new(NsV14, "ProcessingOptionsRequested")], [0, 1]],
      ["expressFreightDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExpressFreightDetail", XSD::QName.new(NsV14, "ExpressFreightDetail")], [0, 1]],
      ["freightShipmentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentDetail", XSD::QName.new(NsV14, "FreightShipmentDetail")], [0, 1]],
      ["consolidationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentConsolidationDetail", XSD::QName.new(NsV14, "ConsolidationDetail")], [0, 1]],
      ["deliveryInstructions", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DeliveryInstructions")], [0, 1]],
      ["variableHandlingChargeDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VariableHandlingChargeDetail", XSD::QName.new(NsV14, "VariableHandlingChargeDetail")], [0, 1]],
      ["customsClearanceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsClearanceDetail", XSD::QName.new(NsV14, "CustomsClearanceDetail")], [0, 1]],
      ["pickupDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupDetail", XSD::QName.new(NsV14, "PickupDetail")], [0, 1]],
      ["smartPostDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentDetail", XSD::QName.new(NsV14, "SmartPostDetail")], [0, 1]],
      ["blockInsightVisibility", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "BlockInsightVisibility")], [0, 1]],
      ["errorLabelBehavior", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ErrorLabelBehaviorType", XSD::QName.new(NsV14, "ErrorLabelBehavior")], [0, 1]],
      ["labelSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecification", XSD::QName.new(NsV14, "LabelSpecification")], [0, 1]],
      ["shippingDocumentSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentSpecification", XSD::QName.new(NsV14, "ShippingDocumentSpecification")], [0, 1]],
      ["rateRequestTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateRequestType[]", XSD::QName.new(NsV14, "RateRequestTypes")], [0, nil]],
      ["customerSelectedActualRateType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnedRateType", XSD::QName.new(NsV14, "CustomerSelectedActualRateType")], [0, 1]],
      ["edtRequestType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EdtRequestType", XSD::QName.new(NsV14, "EdtRequestType")], [0, 1]],
      ["customRatingOptionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomRatingOptionDetail", XSD::QName.new(NsV14, "CustomRatingOptionDetail")], [0, 1]],
      ["masterTrackingId", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId", XSD::QName.new(NsV14, "MasterTrackingId")], [0, 1]],
      ["packageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PackageCount")], [0, 1]],
      ["shipmentOnlyFields", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentOnlyFieldsType[]", XSD::QName.new(NsV14, "ShipmentOnlyFields")], [0, nil]],
      ["configurationData", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentConfigurationData", XSD::QName.new(NsV14, "ConfigurationData")], [0, 1]],
      ["requestedPackageLineItems", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedPackageLineItem[]", XSD::QName.new(NsV14, "RequestedPackageLineItems")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnAssociationDetail,
    :schema_type => XSD::QName.new(NsV14, "ReturnAssociationDetail"),
    :schema_element => [
      ["trackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "TrackingNumber")], [0, 1]],
      ["shipDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ShipDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnEMailDetail,
    :schema_type => XSD::QName.new(NsV14, "ReturnEMailDetail"),
    :schema_element => [
      ["merchantPhoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "MerchantPhoneNumber")], [0, 1]],
      ["allowedSpecialServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnEMailAllowedSpecialServiceType[]", XSD::QName.new(NsV14, "AllowedSpecialServices")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnInstructionsDetail,
    :schema_type => XSD::QName.new(NsV14, "ReturnInstructionsDetail"),
    :schema_element => [
      ["format", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat", XSD::QName.new(NsV14, "Format")], [0, 1]],
      ["customText", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomText")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnShipmentDetail,
    :schema_type => XSD::QName.new(NsV14, "ReturnShipmentDetail"),
    :schema_element => [
      ["returnType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnType", XSD::QName.new(NsV14, "ReturnType")], [0, 1]],
      ["rma", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Rma", XSD::QName.new(NsV14, "Rma")], [0, 1]],
      ["returnEMailDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnEMailDetail", XSD::QName.new(NsV14, "ReturnEMailDetail")], [0, 1]],
      ["returnAssociation", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnAssociationDetail", XSD::QName.new(NsV14, "ReturnAssociation")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Rma,
    :schema_type => XSD::QName.new(NsV14, "Rma"),
    :schema_element => [
      ["reason", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Reason")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityOption,
    :schema_type => XSD::QName.new(NsV14, "ServiceAvailabilityOption"),
    :schema_element => [
      ["service", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Service")], [0, 1]],
      ["deliveryDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "DeliveryDate")], [0, 1]],
      ["deliveryDay", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DayOfWeekType", XSD::QName.new(NsV14, "DeliveryDay")], [0, 1]],
      ["destinationStationId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationStationId")], [0, 1]],
      ["destinationAirportId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationAirportId")], [0, 1]],
      ["transitTime", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransitTimeType", XSD::QName.new(NsV14, "TransitTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityReply,
    :schema_type => XSD::QName.new(NsV14, "ServiceAvailabilityReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification[]", XSD::QName.new(NsV14, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityOption[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityRequest,
    :schema_type => XSD::QName.new(NsV14, "ServiceAvailabilityRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail", XSD::QName.new(NsV14, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail", XSD::QName.new(NsV14, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["origin", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Origin")]],
      ["destination", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Destination")]],
      ["shipDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ShipDate")]],
      ["carrierCode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType", XSD::QName.new(NsV14, "CarrierCode")], [0, 1]],
      ["service", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Service")], [0, 1]],
      ["packaging", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Packaging")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceDescription,
    :schema_type => XSD::QName.new(NsV14, "ServiceDescription"),
    :schema_element => [
      ["serviceType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ServiceType")], [0, 1]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Code")], [0, 1]],
      ["names", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "Names")], [0, nil]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["astraDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AstraDescription")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceSubOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "ServiceSubOptionDetail"),
    :schema_element => [
      ["freightGuarantee", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightGuaranteeType", XSD::QName.new(NsV14, "FreightGuarantee")], [0, 1]],
      ["smartPostHubId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SmartPostHubId")], [0, 1]],
      ["smartPostIndicia", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostIndiciaType", XSD::QName.new(NsV14, "SmartPostIndicia")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceTypesByCarrierCodeDetail,
    :schema_type => XSD::QName.new(NsV14, "ServiceTypesByCarrierCodeDetail"),
    :schema_element => [
      ["carrierCode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType", XSD::QName.new(NsV14, "CarrierCode")], [0, 1]],
      ["services", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "Services")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentAssemblyDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentAssemblyDetail"),
    :schema_element => [
      ["pieceCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PieceCount")], [0, 1]],
      ["weight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "Weight")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentAuthorizationDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentAuthorizationDetail"),
    :schema_element => [
      ["accountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AccountNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentConfigurationData,
    :schema_type => XSD::QName.new(NsV14, "ShipmentConfigurationData"),
    :schema_element => [
      ["dangerousGoodsPackageConfigurations", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsDetail[]", XSD::QName.new(NsV14, "DangerousGoodsPackageConfigurations")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentConsolidationDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentConsolidationDetail"),
    :schema_element => [
      ["relationshipTimestamp", ["SOAP::SOAPString", XSD::QName.new(NsV14, "RelationshipTimestamp")], [0, 1]],
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["role", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationShipmentRoleType", XSD::QName.new(NsV14, "Role")], [0, 1]],
      ["associatedTrackingIds", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedTrackingId[]", XSD::QName.new(NsV14, "AssociatedTrackingIds")], [0, nil]],
      ["specialServicesRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationSpecialServicesRequested", XSD::QName.new(NsV14, "SpecialServicesRequested")], [0, 1]],
      ["consolidationOriginAddress", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "ConsolidationOriginAddress")], [0, 1]],
      ["internationalDistributionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentInternationalDistributionDetail", XSD::QName.new(NsV14, "InternationalDistributionDetail")], [0, 1]],
      ["transborderDistributionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentTransborderDistributionDetail", XSD::QName.new(NsV14, "TransborderDistributionDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentDryIceDetail"),
    :schema_element => [
      ["packageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PackageCount")], [0, 1]],
      ["totalWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "TotalWeight")], [0, 1]],
      ["processingOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceProcessingOptionsRequested", XSD::QName.new(NsV14, "ProcessingOptions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceProcessingOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "ShipmentDryIceProcessingOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceProcessingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentEventNotificationDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentEventNotificationDetail"),
    :schema_element => [
      ["aggregationType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationAggregationType", XSD::QName.new(NsV14, "AggregationType")], [0, 1]],
      ["personalMessage", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PersonalMessage")], [0, 1]],
      ["eventNotifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentEventNotificationSpecification[]", XSD::QName.new(NsV14, "EventNotifications")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentEventNotificationSpecification,
    :schema_type => XSD::QName.new(NsV14, "ShipmentEventNotificationSpecification"),
    :schema_element => [
      ["role", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationRoleType", XSD::QName.new(NsV14, "Role")], [0, 1]],
      ["events", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationEventType[]", XSD::QName.new(NsV14, "Events")], [0, nil]],
      ["notificationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationDetail", XSD::QName.new(NsV14, "NotificationDetail")], [0, 1]],
      ["formatSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationFormatSpecification", XSD::QName.new(NsV14, "FormatSpecification")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentInternationalDistributionDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentInternationalDistributionDetail"),
    :schema_element => [
      ["clearanceFacilityLocId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ClearanceFacilityLocId")], [0, 1]],
      ["clearanceType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DistributionClearanceType", XSD::QName.new(NsV14, "ClearanceType")], [0, 1]],
      ["summaryDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalDistributionSummaryDetail", XSD::QName.new(NsV14, "SummaryDetail")], [0, 1]],
      ["splitPaymentSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentSpecification", XSD::QName.new(NsV14, "SplitPaymentSpecification")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentManifestDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentManifestDetail"),
    :schema_element => [
      ["manifestReferenceType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReferenceType", XSD::QName.new(NsV14, "ManifestReferenceType")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationFormatSpecification,
    :schema_type => XSD::QName.new(NsV14, "ShipmentNotificationFormatSpecification"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationFormatType", XSD::QName.new(NsV14, "Type")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentProcessingOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "ShipmentProcessingOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentProcessingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]],
      ["customTransitTimeDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomTransitTimeDetail", XSD::QName.new(NsV14, "CustomTransitTimeDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentSpecialServiceDescription,
    :schema_type => XSD::QName.new(NsV14, "ShipmentSpecialServiceDescription"),
    :schema_element => [
      ["carrierCodesAndServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceTypesByCarrierCodeDetail[]", XSD::QName.new(NsV14, "CarrierCodesAndServices")], [0, nil]],
      ["subSpecialServiceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SubSpecialServiceId")], [0, 1]],
      ["subNames", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "SubNames")], [0, nil]],
      ["specialServiceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceId")], [0, 1]],
      ["names", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductName[]", XSD::QName.new(NsV14, "Names")], [0, nil]],
      ["specialServiceType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceType")], [0, 1]],
      ["specialServiceSubType", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SpecialServiceSubType")], [0, 1]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Code")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["astraDescription", ["SOAP::SOAPString", XSD::QName.new(NsV14, "AstraDescription")], [0, 1]],
      ["customerIntegrationMode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerIntegrationModeType", XSD::QName.new(NsV14, "CustomerIntegrationMode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentSpecialServicesRequested,
    :schema_type => XSD::QName.new(NsV14, "ShipmentSpecialServicesRequested"),
    :schema_element => [
      ["specialServiceTypes", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "SpecialServiceTypes")], [0, nil]],
      ["codDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodDetail", XSD::QName.new(NsV14, "CodDetail")], [0, 1]],
      ["deliveryOnInvoiceAcceptanceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeliveryOnInvoiceAcceptanceDetail", XSD::QName.new(NsV14, "DeliveryOnInvoiceAcceptanceDetail")], [0, 1]],
      ["holdAtLocationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HoldAtLocationDetail", XSD::QName.new(NsV14, "HoldAtLocationDetail")], [0, 1]],
      ["eventNotificationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentEventNotificationDetail", XSD::QName.new(NsV14, "EventNotificationDetail")], [0, 1]],
      ["returnShipmentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnShipmentDetail", XSD::QName.new(NsV14, "ReturnShipmentDetail")], [0, 1]],
      ["pendingShipmentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentDetail", XSD::QName.new(NsV14, "PendingShipmentDetail")], [0, 1]],
      ["internationalControlledExportDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalControlledExportDetail", XSD::QName.new(NsV14, "InternationalControlledExportDetail")], [0, 1]],
      ["internationalTrafficInArmsRegulationsDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalTrafficInArmsRegulationsDetail", XSD::QName.new(NsV14, "InternationalTrafficInArmsRegulationsDetail")], [0, 1]],
      ["shipmentDryIceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceDetail", XSD::QName.new(NsV14, "ShipmentDryIceDetail")], [0, 1]],
      ["homeDeliveryPremiumDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HomeDeliveryPremiumDetail", XSD::QName.new(NsV14, "HomeDeliveryPremiumDetail")], [0, 1]],
      ["flatbedTrailerDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FlatbedTrailerDetail", XSD::QName.new(NsV14, "FlatbedTrailerDetail")], [0, 1]],
      ["freightGuaranteeDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightGuaranteeDetail", XSD::QName.new(NsV14, "FreightGuaranteeDetail")], [0, 1]],
      ["etdDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdDetail", XSD::QName.new(NsV14, "EtdDetail")], [0, 1]],
      ["extraLaborDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExtraLaborDetail", XSD::QName.new(NsV14, "ExtraLaborDetail")], [0, 1]],
      ["palletShrinkwrapDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PalletShrinkwrapDetail", XSD::QName.new(NsV14, "PalletShrinkwrapDetail")], [0, 1]],
      ["palletsProvidedDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PalletsProvidedDetail", XSD::QName.new(NsV14, "PalletsProvidedDetail")], [0, 1]],
      ["detentionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DetentionDetail", XSD::QName.new(NsV14, "DetentionDetail")], [0, 1]],
      ["markingOrTaggingDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::MarkingOrTaggingDetail", XSD::QName.new(NsV14, "MarkingOrTaggingDetail")], [0, 1]],
      ["nonBusinessTimeDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NonBusinessTimeDetail", XSD::QName.new(NsV14, "NonBusinessTimeDetail")], [0, 1]],
      ["shipmentAssemblyDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentAssemblyDetail", XSD::QName.new(NsV14, "ShipmentAssemblyDetail")], [0, 1]],
      ["sortAndSegregateDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SortAndSegregateDetail", XSD::QName.new(NsV14, "SortAndSegregateDetail")], [0, 1]],
      ["specialEquipmentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentDetail", XSD::QName.new(NsV14, "SpecialEquipmentDetail")], [0, 1]],
      ["storageDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::StorageDetail", XSD::QName.new(NsV14, "StorageDetail")], [0, 1]],
      ["weighingDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeighingDetail", XSD::QName.new(NsV14, "WeighingDetail")], [0, 1]],
      ["customDeliveryWindowDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDeliveryWindowDetail", XSD::QName.new(NsV14, "CustomDeliveryWindowDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentTransborderDistributionDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentTransborderDistributionDetail"),
    :schema_element => [
      ["specialServicesRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSpecialServicesRequested", XSD::QName.new(NsV14, "SpecialServicesRequested")], [0, 1]],
      ["summaryDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSummaryDetail", XSD::QName.new(NsV14, "SummaryDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentVariationOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipmentVariationOptionDetail"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]],
      ["values", ["SOAP::SOAPString[]", XSD::QName.new(NsV14, "Values")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipperConveyanceDetail,
    :schema_type => XSD::QName.new(NsV14, "ShipperConveyanceDetail"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Id")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentDispositionDetail,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentDispositionDetail"),
    :schema_element => [
      ["dispositionType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentDispositionType", XSD::QName.new(NsV14, "DispositionType")], [0, 1]],
      ["grouping", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentGroupingType", XSD::QName.new(NsV14, "Grouping")], [0, 1]],
      ["storageDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStorageDetail", XSD::QName.new(NsV14, "StorageDetail")], [0, 1]],
      ["eMailDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailDetail", XSD::QName.new(NsV14, "EMailDetail")], [0, 1]],
      ["printDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentPrintDetail", XSD::QName.new(NsV14, "PrintDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailDetail,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentEMailDetail"),
    :schema_element => [
      ["eMailRecipients", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailRecipient[]", XSD::QName.new(NsV14, "EMailRecipients")], [0, nil]],
      ["grouping", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailGroupingType", XSD::QName.new(NsV14, "Grouping")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailRecipient,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentEMailRecipient"),
    :schema_element => [
      ["recipientType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailNotificationRecipientType", XSD::QName.new(NsV14, "RecipientType")], [0, 1]],
      ["address", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Address")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentFormat,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentFormat"),
    :schema_element => [
      ["dispositions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentDispositionDetail[]", XSD::QName.new(NsV14, "Dispositions")], [0, nil]],
      ["topOfPageOffset", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearMeasure", XSD::QName.new(NsV14, "TopOfPageOffset")], [0, 1]],
      ["imageType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentImageType", XSD::QName.new(NsV14, "ImageType")], [0, 1]],
      ["stockType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStockType", XSD::QName.new(NsV14, "StockType")], [0, 1]],
      ["provideInstructions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV14, "ProvideInstructions")], [0, 1]],
      ["optionsRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocumentFormatOptionsRequested", XSD::QName.new(NsV14, "OptionsRequested")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]],
      ["customDocumentIdentifier", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomDocumentIdentifier")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentPrintDetail,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentPrintDetail"),
    :schema_element => [
      ["printerId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PrinterId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentSpecification,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentSpecification"),
    :schema_element => [
      ["shippingDocumentTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShippingDocumentType[]", XSD::QName.new(NsV14, "ShippingDocumentTypes")], [0, nil]],
      ["notificationContentSpecification", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationContentSpecification", XSD::QName.new(NsV14, "NotificationContentSpecification")], [0, 1]],
      ["certificateOfOrigin", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CertificateOfOriginDetail", XSD::QName.new(NsV14, "CertificateOfOrigin")], [0, 1]],
      ["commercialInvoiceDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommercialInvoiceDetail", XSD::QName.new(NsV14, "CommercialInvoiceDetail")], [0, 1]],
      ["customPackageDocumentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDocumentDetail[]", XSD::QName.new(NsV14, "CustomPackageDocumentDetail")], [0, nil]],
      ["customShipmentDocumentDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDocumentDetail[]", XSD::QName.new(NsV14, "CustomShipmentDocumentDetail")], [0, nil]],
      ["exportDeclarationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ExportDeclarationDetail", XSD::QName.new(NsV14, "ExportDeclarationDetail")], [0, 1]],
      ["generalAgencyAgreementDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GeneralAgencyAgreementDetail", XSD::QName.new(NsV14, "GeneralAgencyAgreementDetail")], [0, 1]],
      ["naftaCertificateOfOriginDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaCertificateOfOriginDetail", XSD::QName.new(NsV14, "NaftaCertificateOfOriginDetail")], [0, 1]],
      ["op900Detail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Op900Detail", XSD::QName.new(NsV14, "Op900Detail")], [0, 1]],
      ["dangerousGoodsShippersDeclarationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsShippersDeclarationDetail", XSD::QName.new(NsV14, "DangerousGoodsShippersDeclarationDetail")], [0, 1]],
      ["freightAddressLabelDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightAddressLabelDetail", XSD::QName.new(NsV14, "FreightAddressLabelDetail")], [0, 1]],
      ["freightBillOfLadingDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightBillOfLadingDetail", XSD::QName.new(NsV14, "FreightBillOfLadingDetail")], [0, 1]],
      ["returnInstructionsDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnInstructionsDetail", XSD::QName.new(NsV14, "ReturnInstructionsDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStorageDetail,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentStorageDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStorageDetailType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["filePath", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FilePath")], [0, 1]],
      ["fileNaming", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentNamingType", XSD::QName.new(NsV14, "FileNaming")], [0, 1]],
      ["fileSuffix", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FileSuffix")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionDetail,
    :schema_type => XSD::QName.new(NsV14, "SignatureOptionDetail"),
    :schema_element => [
      ["optionType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionType", XSD::QName.new(NsV14, "OptionType")], [0, 1]],
      ["signatureReleaseNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "SignatureReleaseNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentDetail,
    :schema_type => XSD::QName.new(NsV14, "SmartPostShipmentDetail"),
    :schema_element => [
      ["processingOptionsRequested", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentProcessingOptionsRequested", XSD::QName.new(NsV14, "ProcessingOptionsRequested")], [0, 1]],
      ["indicia", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostIndiciaType", XSD::QName.new(NsV14, "Indicia")], [0, 1]],
      ["ancillaryEndorsement", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostAncillaryEndorsementType", XSD::QName.new(NsV14, "AncillaryEndorsement")], [0, 1]],
      ["specialServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentSpecialServiceType[]", XSD::QName.new(NsV14, "SpecialServices")], [0, nil]],
      ["hubId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "HubId")], [0, 1]],
      ["customerManifestId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomerManifestId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentProcessingOptionsRequested,
    :schema_type => XSD::QName.new(NsV14, "SmartPostShipmentProcessingOptionsRequested"),
    :schema_element => [
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentProcessingOptionType[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmsDetail,
    :schema_type => XSD::QName.new(NsV14, "SmsDetail"),
    :schema_element => [
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumber")], [0, 1]],
      ["phoneNumberCountryCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "PhoneNumberCountryCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SortAndSegregateDetail,
    :schema_type => XSD::QName.new(NsV14, "SortAndSegregateDetail"),
    :schema_element => [
      ["pieceCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "PieceCount")], [0, 1]],
      ["weight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "Weight")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentDetail,
    :schema_type => XSD::QName.new(NsV14, "SpecialEquipmentDetail"),
    :schema_element => [
      ["lineItems", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentLineItem[]", XSD::QName.new(NsV14, "LineItems")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentLineItem,
    :schema_type => XSD::QName.new(NsV14, "SpecialEquipmentLineItem"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["duration", ["SOAP::SOAPDuration", XSD::QName.new(NsV14, "Duration")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentDetail,
    :schema_type => XSD::QName.new(NsV14, "SplitPaymentDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentType", XSD::QName.new(NsV14, "Type")], [0, 1]],
      ["payment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment", XSD::QName.new(NsV14, "Payment")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentSpecification,
    :schema_type => XSD::QName.new(NsV14, "SplitPaymentSpecification"),
    :schema_element => [
      ["payments", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentDetail[]", XSD::QName.new(NsV14, "Payments")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::StorageDetail,
    :schema_type => XSD::QName.new(NsV14, "StorageDetail"),
    :schema_element => [
      ["duration", ["SOAP::SOAPDuration", XSD::QName.new(NsV14, "Duration")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TaxpayerIdentification,
    :schema_type => XSD::QName.new(NsV14, "TaxpayerIdentification"),
    :schema_element => [
      ["tinType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TinType", XSD::QName.new(NsV14, "TinType")], [0, 1]],
      ["number", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Number")], [0, 1]],
      ["usage", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Usage")], [0, 1]],
      ["effectiveDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV14, "EffectiveDate")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV14, "ExpirationDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingId,
    :schema_type => XSD::QName.new(NsV14, "TrackingId"),
    :schema_element => [
      ["trackingIdType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingIdType", XSD::QName.new(NsV14, "TrackingIdType")], [0, 1]],
      ["formId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FormId")], [0, 1]],
      ["uspsApplicationId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "UspsApplicationId")], [0, 1]],
      ["trackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsV14, "TrackingNumber")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail,
    :schema_type => XSD::QName.new(NsV14, "TransactionDetail"),
    :schema_element => [
      ["customerTransactionId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomerTransactionId")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Localization", XSD::QName.new(NsV14, "Localization")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionLtlDetail,
    :schema_type => XSD::QName.new(NsV14, "TransborderDistributionLtlDetail"),
    :schema_element => [
      ["payment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Payment", XSD::QName.new(NsV14, "Payment")], [0, 1]],
      ["ltlScacCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "LtlScacCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSpecialServicesRequested,
    :schema_type => XSD::QName.new(NsV14, "TransborderDistributionSpecialServicesRequested"),
    :schema_element => [
      ["specialServiceTypes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSpecialServiceType[]", XSD::QName.new(NsV14, "SpecialServiceTypes")], [0, nil]],
      ["transborderDistributionLtlDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionLtlDetail", XSD::QName.new(NsV14, "TransborderDistributionLtlDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSummaryDetail,
    :schema_type => XSD::QName.new(NsV14, "TransborderDistributionSummaryDetail"),
    :schema_element => [
      ["expressPackageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "ExpressPackageCount")], [0, 1]],
      ["expressTotalPackageWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "ExpressTotalPackageWeight")], [0, 1]],
      ["expressTotalPackageAdjustedWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "ExpressTotalPackageAdjustedWeight")], [0, 1]],
      ["expressFreightPackageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "ExpressFreightPackageCount")], [0, 1]],
      ["expressTotalFreightWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "ExpressTotalFreightWeight")], [0, 1]],
      ["expressTotalFreightAdjustedWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "ExpressTotalFreightAdjustedWeight")], [0, 1]],
      ["groundPackageCount", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "GroundPackageCount")], [0, 1]],
      ["groundTotalPackageWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "GroundTotalPackageWeight")], [0, 1]],
      ["groundTotalPackageAdjustedWeight", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight", XSD::QName.new(NsV14, "GroundTotalPackageAdjustedWeight")], [0, 1]],
      ["numberOfUnconsolidatedCommodities", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "NumberOfUnconsolidatedCommodities")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentDetail,
    :schema_type => XSD::QName.new(NsV14, "UploadDocumentDetail"),
    :schema_element => [
      ["lineNumber", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "LineNumber")], [0, 1]],
      ["customerReference", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomerReference")], [0, 1]],
      ["documentProducer", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentProducerType", XSD::QName.new(NsV14, "DocumentProducer")], [0, 1]],
      ["documentType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentType", XSD::QName.new(NsV14, "DocumentType")], [0, 1]],
      ["fileName", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FileName")], [0, 1]],
      ["documentContent", ["SOAP::SOAPBase64", XSD::QName.new(NsV14, "DocumentContent")], [0, 1]],
      ["expirationDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ExpirationDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentReferenceDetail,
    :schema_type => XSD::QName.new(NsV14, "UploadDocumentReferenceDetail"),
    :schema_element => [
      ["lineNumber", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV14, "LineNumber")], [0, 1]],
      ["customerReference", ["SOAP::SOAPString", XSD::QName.new(NsV14, "CustomerReference")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Description")], [0, 1]],
      ["documentProducer", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentProducerType", XSD::QName.new(NsV14, "DocumentProducer")], [0, 1]],
      ["documentType", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentType", XSD::QName.new(NsV14, "DocumentType")], [0, 1]],
      ["documentId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DocumentId")], [0, 1]],
      ["documentIdProducer", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentIdProducer", XSD::QName.new(NsV14, "DocumentIdProducer")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VariableHandlingChargeDetail,
    :schema_type => XSD::QName.new(NsV14, "VariableHandlingChargeDetail"),
    :schema_element => [
      ["fixedValue", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Money", XSD::QName.new(NsV14, "FixedValue")], [0, 1]],
      ["percentValue", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "PercentValue")], [0, 1]],
      ["rateElementBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateElementBasisType", XSD::QName.new(NsV14, "RateElementBasis")], [0, 1]],
      ["rateTypeBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateTypeBasisType", XSD::QName.new(NsV14, "RateTypeBasis")], [0, 1]],
      ["rateLevelBasis", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateLevelBasisType", XSD::QName.new(NsV14, "RateLevelBasis")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Volume,
    :schema_type => XSD::QName.new(NsV14, "Volume"),
    :schema_element => [
      ["units", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VolumeUnits", XSD::QName.new(NsV14, "Units")], [0, 1]],
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeighingDetail,
    :schema_type => XSD::QName.new(NsV14, "WeighingDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeighingScaleType", XSD::QName.new(NsV14, "Type")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Weight,
    :schema_type => XSD::QName.new(NsV14, "Weight"),
    :schema_element => [
      ["units", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeightUnits", XSD::QName.new(NsV14, "Units")], [0, 1]],
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV14, "Value")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail,
    :schema_type => XSD::QName.new(NsV14, "WebAuthenticationDetail"),
    :schema_element => [
      ["parentCredential", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationCredential", XSD::QName.new(NsV14, "ParentCredential")], [0, 1]],
      ["userCredential", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationCredential", XSD::QName.new(NsV14, "UserCredential")]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationCredential,
    :schema_type => XSD::QName.new(NsV14, "WebAuthenticationCredential"),
    :schema_element => [
      ["key", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Key")]],
      ["password", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Password")]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId,
    :schema_type => XSD::QName.new(NsV14, "VersionId"),
    :schema_element => [
      ["serviceId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "ServiceId")]],
      ["major", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "Major")]],
      ["intermediate", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "Intermediate")]],
      ["minor", ["SOAP::SOAPInt", XSD::QName.new(NsV14, "Minor")]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AccessorRoleType,
    :schema_type => XSD::QName.new(NsV14, "AccessorRoleType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AdditionalLabelsType,
    :schema_type => XSD::QName.new(NsV14, "AdditionalLabelsType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AlcoholRecipientType,
    :schema_type => XSD::QName.new(NsV14, "AlcoholRecipientType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedAccountNumberType,
    :schema_type => XSD::QName.new(NsV14, "AssociatedAccountNumberType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::AssociatedTrackingIdType,
    :schema_type => XSD::QName.new(NsV14, "AssociatedTrackingIdType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::B13AFilingOptionType,
    :schema_type => XSD::QName.new(NsV14, "B13AFilingOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BarcodeSymbologyType,
    :schema_type => XSD::QName.new(NsV14, "BarcodeSymbologyType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryMaterialType,
    :schema_type => XSD::QName.new(NsV14, "BatteryMaterialType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryPackingType,
    :schema_type => XSD::QName.new(NsV14, "BatteryPackingType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BatteryRegulatorySubType,
    :schema_type => XSD::QName.new(NsV14, "BatteryRegulatorySubType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::BrokerType,
    :schema_type => XSD::QName.new(NsV14, "BrokerType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType,
    :schema_type => XSD::QName.new(NsV14, "CarrierCodeType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ChargeBasisLevelType,
    :schema_type => XSD::QName.new(NsV14, "ChargeBasisLevelType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClearanceBrokerageType,
    :schema_type => XSD::QName.new(NsV14, "ClearanceBrokerageType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodAddTransportationChargeBasisType,
    :schema_type => XSD::QName.new(NsV14, "CodAddTransportationChargeBasisType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodCollectionType,
    :schema_type => XSD::QName.new(NsV14, "CodCollectionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CodReturnReferenceIndicatorType,
    :schema_type => XSD::QName.new(NsV14, "CodReturnReferenceIndicatorType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CommodityPurposeType,
    :schema_type => XSD::QName.new(NsV14, "CommodityPurposeType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CompletedEtdType,
    :schema_type => XSD::QName.new(NsV14, "CompletedEtdType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationShipmentRoleType,
    :schema_type => XSD::QName.new(NsV14, "ConsolidationShipmentRoleType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationSpecialServiceType,
    :schema_type => XSD::QName.new(NsV14, "ConsolidationSpecialServiceType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ConsolidationType,
    :schema_type => XSD::QName.new(NsV14, "ConsolidationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardAuthorizationType,
    :schema_type => XSD::QName.new(NsV14, "CreditCardAuthorizationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardSettlementScheduleType,
    :schema_type => XSD::QName.new(NsV14, "CreditCardSettlementScheduleType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardTransactionAttributeType,
    :schema_type => XSD::QName.new(NsV14, "CreditCardTransactionAttributeType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CreditCardType,
    :schema_type => XSD::QName.new(NsV14, "CreditCardType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomDeliveryWindowType,
    :schema_type => XSD::QName.new(NsV14, "CustomDeliveryWindowType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomLabelCoordinateUnits,
    :schema_type => XSD::QName.new(NsV14, "CustomLabelCoordinateUnits")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomRatingOptionType,
    :schema_type => XSD::QName.new(NsV14, "CustomRatingOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerImageUsageType,
    :schema_type => XSD::QName.new(NsV14, "CustomerImageUsageType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerIntegrationModeType,
    :schema_type => XSD::QName.new(NsV14, "CustomerIntegrationModeType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerReferenceType,
    :schema_type => XSD::QName.new(NsV14, "CustomerReferenceType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomerSpecifiedLabelGenerationOptionType,
    :schema_type => XSD::QName.new(NsV14, "CustomerSpecifiedLabelGenerationOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsDeclarationStatementType,
    :schema_type => XSD::QName.new(NsV14, "CustomsDeclarationStatementType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsOptionType,
    :schema_type => XSD::QName.new(NsV14, "CustomsOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CustomsRoleType,
    :schema_type => XSD::QName.new(NsV14, "CustomsRoleType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DamageStatusType,
    :schema_type => XSD::QName.new(NsV14, "DamageStatusType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsAccessibilityType,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsAccessibilityType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DangerousGoodsPackingOptionType,
    :schema_type => XSD::QName.new(NsV14, "DangerousGoodsPackingOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DayOfWeekType,
    :schema_type => XSD::QName.new(NsV14, "DayOfWeekType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DeleteRecordedShipmentRequestServiceLevel,
    :schema_type => XSD::QName.new(NsV14, "DeleteRecordedShipmentRequestServiceLevel")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DestinationControlStatementType,
    :schema_type => XSD::QName.new(NsV14, "DestinationControlStatementType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DistributionClearanceType,
    :schema_type => XSD::QName.new(NsV14, "DistributionClearanceType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabContentType,
    :schema_type => XSD::QName.new(NsV14, "DocTabContentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocTabZoneJustificationType,
    :schema_type => XSD::QName.new(NsV14, "DocTabZoneJustificationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DocumentFormatOptionType,
    :schema_type => XSD::QName.new(NsV14, "DocumentFormatOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::DropoffType,
    :schema_type => XSD::QName.new(NsV14, "DropoffType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EMailNotificationRecipientType,
    :schema_type => XSD::QName.new(NsV14, "EMailNotificationRecipientType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EdtRequestType,
    :schema_type => XSD::QName.new(NsV14, "EdtRequestType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EmailOptionType,
    :schema_type => XSD::QName.new(NsV14, "EmailOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ErrorLabelBehaviorType,
    :schema_type => XSD::QName.new(NsV14, "ErrorLabelBehaviorType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdAttributeType,
    :schema_type => XSD::QName.new(NsV14, "EtdAttributeType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::EtdConfirmationType,
    :schema_type => XSD::QName.new(NsV14, "EtdConfirmationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FedExLocationType,
    :schema_type => XSD::QName.new(NsV14, "FedExLocationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FlatbedTrailerOption,
    :schema_type => XSD::QName.new(NsV14, "FlatbedTrailerOption")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightClassType,
    :schema_type => XSD::QName.new(NsV14, "FreightClassType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightCollectTermsType,
    :schema_type => XSD::QName.new(NsV14, "FreightCollectTermsType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightGuaranteeType,
    :schema_type => XSD::QName.new(NsV14, "FreightGuaranteeType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightOnValueType,
    :schema_type => XSD::QName.new(NsV14, "FreightOnValueType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::FreightShipmentRoleType,
    :schema_type => XSD::QName.new(NsV14, "FreightShipmentRoleType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityDescriptionProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityDescriptionProcessingOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityLabelTextOptionType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityLabelTextOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityOptionType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityPackingGroupType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityPackingGroupType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityQuantityType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityQuantityType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousCommodityRegulationType,
    :schema_type => XSD::QName.new(NsV14, "HazardousCommodityRegulationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HazardousContainerPackingType,
    :schema_type => XSD::QName.new(NsV14, "HazardousContainerPackingType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::HomeDeliveryPremiumType,
    :schema_type => XSD::QName.new(NsV14, "HomeDeliveryPremiumType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ImageId,
    :schema_type => XSD::QName.new(NsV14, "ImageId")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InspectionStatusType,
    :schema_type => XSD::QName.new(NsV14, "InspectionStatusType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternalImageType,
    :schema_type => XSD::QName.new(NsV14, "InternalImageType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalControlledExportType,
    :schema_type => XSD::QName.new(NsV14, "InternationalControlledExportType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::InternationalDocumentContentType,
    :schema_type => XSD::QName.new(NsV14, "InternationalDocumentContentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelFormatType,
    :schema_type => XSD::QName.new(NsV14, "LabelFormatType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelMaskableDataType,
    :schema_type => XSD::QName.new(NsV14, "LabelMaskableDataType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelOrderType,
    :schema_type => XSD::QName.new(NsV14, "LabelOrderType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelPrintingOrientationType,
    :schema_type => XSD::QName.new(NsV14, "LabelPrintingOrientationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelRotationType,
    :schema_type => XSD::QName.new(NsV14, "LabelRotationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelSpecificationProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "LabelSpecificationProcessingOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LabelStockType,
    :schema_type => XSD::QName.new(NsV14, "LabelStockType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LiabilityCoverageType,
    :schema_type => XSD::QName.new(NsV14, "LiabilityCoverageType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::LinearUnits,
    :schema_type => XSD::QName.new(NsV14, "LinearUnits")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaImporterSpecificationType,
    :schema_type => XSD::QName.new(NsV14, "NaftaImporterSpecificationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaNetCostMethodCode,
    :schema_type => XSD::QName.new(NsV14, "NaftaNetCostMethodCode")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaPreferenceCriterionCode,
    :schema_type => XSD::QName.new(NsV14, "NaftaPreferenceCriterionCode")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducerDeterminationCode,
    :schema_type => XSD::QName.new(NsV14, "NaftaProducerDeterminationCode")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NaftaProducerSpecificationType,
    :schema_type => XSD::QName.new(NsV14, "NaftaProducerSpecificationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NetExplosiveClassificationType,
    :schema_type => XSD::QName.new(NsV14, "NetExplosiveClassificationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationContentType,
    :schema_type => XSD::QName.new(NsV14, "NotificationContentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationEventType,
    :schema_type => XSD::QName.new(NsV14, "NotificationEventType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationFormatType,
    :schema_type => XSD::QName.new(NsV14, "NotificationFormatType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType,
    :schema_type => XSD::QName.new(NsV14, "NotificationSeverityType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationType,
    :schema_type => XSD::QName.new(NsV14, "NotificationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageLineItemStatusType,
    :schema_type => XSD::QName.new(NsV14, "PackageLineItemStatusType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackagePackedByType,
    :schema_type => XSD::QName.new(NsV14, "PackagePackedByType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PageQuadrantType,
    :schema_type => XSD::QName.new(NsV14, "PageQuadrantType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PaymentType,
    :schema_type => XSD::QName.new(NsV14, "PaymentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "PendingShipmentProcessingOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PendingShipmentType,
    :schema_type => XSD::QName.new(NsV14, "PendingShipmentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PhysicalFormType,
    :schema_type => XSD::QName.new(NsV14, "PhysicalFormType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PhysicalPackagingType,
    :schema_type => XSD::QName.new(NsV14, "PhysicalPackagingType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupRequestSourceType,
    :schema_type => XSD::QName.new(NsV14, "PickupRequestSourceType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PickupRequestType,
    :schema_type => XSD::QName.new(NsV14, "PickupRequestType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PrintedReferenceType,
    :schema_type => XSD::QName.new(NsV14, "PrintedReferenceType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PriorityAlertEnhancementType,
    :schema_type => XSD::QName.new(NsV14, "PriorityAlertEnhancementType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PurposeOfShipmentType,
    :schema_type => XSD::QName.new(NsV14, "PurposeOfShipmentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactiveContainerClassType,
    :schema_type => XSD::QName.new(NsV14, "RadioactiveContainerClassType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RadioactivityUnitOfMeasure,
    :schema_type => XSD::QName.new(NsV14, "RadioactivityUnitOfMeasure")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateDiscountType,
    :schema_type => XSD::QName.new(NsV14, "RateDiscountType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateElementBasisType,
    :schema_type => XSD::QName.new(NsV14, "RateElementBasisType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateLevelBasisType,
    :schema_type => XSD::QName.new(NsV14, "RateLevelBasisType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateRequestType,
    :schema_type => XSD::QName.new(NsV14, "RateRequestType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RateTypeBasisType,
    :schema_type => XSD::QName.new(NsV14, "RateTypeBasisType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecipientCustomsIdType,
    :schema_type => XSD::QName.new(NsV14, "RecipientCustomsIdType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RecommendedDocumentType,
    :schema_type => XSD::QName.new(NsV14, "RecommendedDocumentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryControlType,
    :schema_type => XSD::QName.new(NsV14, "RegulatoryControlType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RegulatoryLabelType,
    :schema_type => XSD::QName.new(NsV14, "RegulatoryLabelType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RelativeVerticalPositionType,
    :schema_type => XSD::QName.new(NsV14, "RelativeVerticalPositionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShippingDocumentType,
    :schema_type => XSD::QName.new(NsV14, "RequestedShippingDocumentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnEMailAllowedSpecialServiceType,
    :schema_type => XSD::QName.new(NsV14, "ReturnEMailAllowedSpecialServiceType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnType,
    :schema_type => XSD::QName.new(NsV14, "ReturnType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ReturnedRateType,
    :schema_type => XSD::QName.new(NsV14, "ReturnedRateType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RotationType,
    :schema_type => XSD::QName.new(NsV14, "RotationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SecondaryBarcodeType,
    :schema_type => XSD::QName.new(NsV14, "SecondaryBarcodeType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceOptionType,
    :schema_type => XSD::QName.new(NsV14, "ServiceOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentDryIceProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "ShipmentDryIceProcessingOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationAggregationType,
    :schema_type => XSD::QName.new(NsV14, "ShipmentNotificationAggregationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentNotificationRoleType,
    :schema_type => XSD::QName.new(NsV14, "ShipmentNotificationRoleType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentOnlyFieldsType,
    :schema_type => XSD::QName.new(NsV14, "ShipmentOnlyFieldsType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "ShipmentProcessingOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentDispositionType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentDispositionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentEMailGroupingType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentEMailGroupingType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentGroupingType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentGroupingType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentImageType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentImageType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentNamingType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentNamingType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStockType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentStockType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShippingDocumentStorageDetailType,
    :schema_type => XSD::QName.new(NsV14, "ShippingDocumentStorageDetailType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SignatureOptionType,
    :schema_type => XSD::QName.new(NsV14, "SignatureOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostAncillaryEndorsementType,
    :schema_type => XSD::QName.new(NsV14, "SmartPostAncillaryEndorsementType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostIndiciaType,
    :schema_type => XSD::QName.new(NsV14, "SmartPostIndiciaType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentProcessingOptionType,
    :schema_type => XSD::QName.new(NsV14, "SmartPostShipmentProcessingOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SmartPostShipmentSpecialServiceType,
    :schema_type => XSD::QName.new(NsV14, "SmartPostShipmentSpecialServiceType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SpecialEquipmentType,
    :schema_type => XSD::QName.new(NsV14, "SpecialEquipmentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::SplitPaymentType,
    :schema_type => XSD::QName.new(NsV14, "SplitPaymentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TaxesOrMiscellaneousChargeType,
    :schema_type => XSD::QName.new(NsV14, "TaxesOrMiscellaneousChargeType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TinType,
    :schema_type => XSD::QName.new(NsV14, "TinType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TrackingIdType,
    :schema_type => XSD::QName.new(NsV14, "TrackingIdType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransborderDistributionSpecialServiceType,
    :schema_type => XSD::QName.new(NsV14, "TransborderDistributionSpecialServiceType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransitTimeType,
    :schema_type => XSD::QName.new(NsV14, "TransitTimeType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentIdProducer,
    :schema_type => XSD::QName.new(NsV14, "UploadDocumentIdProducer")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentProducerType,
    :schema_type => XSD::QName.new(NsV14, "UploadDocumentProducerType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::UploadDocumentType,
    :schema_type => XSD::QName.new(NsV14, "UploadDocumentType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VolumeUnits,
    :schema_type => XSD::QName.new(NsV14, "VolumeUnits")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeighingScaleType,
    :schema_type => XSD::QName.new(NsV14, "WeighingScaleType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WeightUnits,
    :schema_type => XSD::QName.new(NsV14, "WeightUnits")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllServicesAndPackagingReply,
    :schema_name => XSD::QName.new(NsV14, "GetAllServicesAndPackagingReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification[]", XSD::QName.new(NsV14, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["productDetails", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ProductDetail[]", XSD::QName.new(NsV14, "ProductDetails")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllServicesAndPackagingRequest,
    :schema_name => XSD::QName.new(NsV14, "GetAllServicesAndPackagingRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail", XSD::QName.new(NsV14, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail", XSD::QName.new(NsV14, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["variableOptions", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceOptionType[]", XSD::QName.new(NsV14, "VariableOptions")], [0, nil]],
      ["originRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "OriginRoutingCode")], [0, 1]],
      ["destinationRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationRoutingCode")], [0, 1]],
      ["formId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FormId")], [0, 1]],
      ["carrierCodes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType[]", XSD::QName.new(NsV14, "CarrierCodes")], [0, nil]],
      ["requestedShipment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShipment", XSD::QName.new(NsV14, "RequestedShipment")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllSpecialServicesReply,
    :schema_name => XSD::QName.new(NsV14, "GetAllSpecialServicesReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification[]", XSD::QName.new(NsV14, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["validShipmentSpecialServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ShipmentSpecialServiceDescription[]", XSD::QName.new(NsV14, "ValidShipmentSpecialServices")], [0, nil]],
      ["validPackageSpecialServices", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::PackageSpecialServiceDescription[]", XSD::QName.new(NsV14, "ValidPackageSpecialServices")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::GetAllSpecialServicesRequest,
    :schema_name => XSD::QName.new(NsV14, "GetAllSpecialServicesRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail", XSD::QName.new(NsV14, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail", XSD::QName.new(NsV14, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["originRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "OriginRoutingCode")], [0, 1]],
      ["destinationRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV14, "DestinationRoutingCode")], [0, 1]],
      ["formId", ["SOAP::SOAPString", XSD::QName.new(NsV14, "FormId")], [0, 1]],
      ["carrierCodes", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType[]", XSD::QName.new(NsV14, "CarrierCodes")], [0, nil]],
      ["requestedShipment", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::RequestedShipment", XSD::QName.new(NsV14, "RequestedShipment")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityReply,
    :schema_name => XSD::QName.new(NsV14, "ServiceAvailabilityReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::NotificationSeverityType", XSD::QName.new(NsV14, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Notification[]", XSD::QName.new(NsV14, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["options", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityOption[]", XSD::QName.new(NsV14, "Options")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ServiceAvailabilityRequest,
    :schema_name => XSD::QName.new(NsV14, "ServiceAvailabilityRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::WebAuthenticationDetail", XSD::QName.new(NsV14, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::ClientDetail", XSD::QName.new(NsV14, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::TransactionDetail", XSD::QName.new(NsV14, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::VersionId", XSD::QName.new(NsV14, "Version")]],
      ["origin", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Origin")]],
      ["destination", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::Address", XSD::QName.new(NsV14, "Destination")]],
      ["shipDate", ["SOAP::SOAPDate", XSD::QName.new(NsV14, "ShipDate")]],
      ["carrierCode", ["FedexWebServices::Soap::ValidationAvailabilityAndCommitment::CarrierCodeType", XSD::QName.new(NsV14, "CarrierCode")], [0, 1]],
      ["service", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Service")], [0, 1]],
      ["packaging", ["SOAP::SOAPString", XSD::QName.new(NsV14, "Packaging")], [0, 1]]
    ]
  )
end

end; end; end
