# encoding: UTF-8
# Generated by wsdl2ruby (SOAP4R-NG/2.0.4)
require_relative 'LocationsServiceDefinitions.rb'
require 'soap/mapping'

module FedexWebServices; module Soap; module Locations

module LocationsServiceDefinitionsMappingRegistry
  EncodedRegistry = ::SOAP::Mapping::EncodedRegistry.new
  LiteralRegistry = ::SOAP::Mapping::LiteralRegistry.new
  NsV12 = "http://fedex.com/ws/locs/v12"

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::Address,
    :schema_type => XSD::QName.new(NsV12, "Address"),
    :schema_element => [
      ["streetLines", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "StreetLines")], [0, nil]],
      ["city", ["SOAP::SOAPString", XSD::QName.new(NsV12, "City")], [0, 1]],
      ["stateOrProvinceCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "StateOrProvinceCode")], [0, 1]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PostalCode")], [0, 1]],
      ["urbanizationCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "UrbanizationCode")], [0, 1]],
      ["countryCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CountryCode")], [0, 1]],
      ["countryName", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CountryName")], [0, 1]],
      ["residential", ["SOAP::SOAPBoolean", XSD::QName.new(NsV12, "Residential")], [0, 1]],
      ["geographicCoordinates", ["SOAP::SOAPString", XSD::QName.new(NsV12, "GeographicCoordinates")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::AddressAncillaryDetail,
    :schema_type => XSD::QName.new(NsV12, "AddressAncillaryDetail"),
    :schema_element => [
      ["locationInCity", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocationInCity")], [0, 1]],
      ["locationInProperty", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocationInProperty")], [0, 1]],
      ["accessibility", ["FedexWebServices::Soap::Locations::LocationAccessibilityType", XSD::QName.new(NsV12, "Accessibility")], [0, 1]],
      ["building", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Building")], [0, 1]],
      ["department", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Department")], [0, 1]],
      ["roomFloor", ["SOAP::SOAPString", XSD::QName.new(NsV12, "RoomFloor")], [0, 1]],
      ["suite", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Suite")], [0, 1]],
      ["apartment", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Apartment")], [0, 1]],
      ["room", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Room")], [0, 1]],
      ["crossStreet", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CrossStreet")], [0, 1]],
      ["additionalDescriptions", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "AdditionalDescriptions")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::AddressToLocationRelationshipDetail,
    :schema_type => XSD::QName.new(NsV12, "AddressToLocationRelationshipDetail"),
    :schema_element => [
      ["matchedAddress", ["FedexWebServices::Soap::Locations::Address", XSD::QName.new(NsV12, "MatchedAddress")], [0, 1]],
      ["matchedAddressGeographicCoordinates", ["SOAP::SOAPString", XSD::QName.new(NsV12, "MatchedAddressGeographicCoordinates")], [0, 1]],
      ["distanceAndLocationDetails", ["FedexWebServices::Soap::Locations::DistanceAndLocationDetail[]", XSD::QName.new(NsV12, "DistanceAndLocationDetails")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::CarrierDetail,
    :schema_type => XSD::QName.new(NsV12, "CarrierDetail"),
    :schema_element => [
      ["carrier", ["FedexWebServices::Soap::Locations::CarrierCodeType", XSD::QName.new(NsV12, "Carrier")], [0, 1]],
      ["serviceCategory", ["FedexWebServices::Soap::Locations::ServiceCategoryType", XSD::QName.new(NsV12, "ServiceCategory")], [0, 1]],
      ["serviceType", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ServiceType")], [0, 1]],
      ["countryRelationship", ["FedexWebServices::Soap::Locations::CountryRelationshipType", XSD::QName.new(NsV12, "CountryRelationship")], [0, 1]],
      ["normalLatestDropOffDetails", ["FedexWebServices::Soap::Locations::LatestDropOffDetail[]", XSD::QName.new(NsV12, "NormalLatestDropOffDetails")], [0, nil]],
      ["exceptionalLatestDropOffDetails", ["FedexWebServices::Soap::Locations::LatestDropOffDetail[]", XSD::QName.new(NsV12, "ExceptionalLatestDropOffDetails")], [0, nil]],
      ["effectiveLatestDropOffDetails", ["FedexWebServices::Soap::Locations::LatestDropOffDetail", XSD::QName.new(NsV12, "EffectiveLatestDropOffDetails")], [0, 1]],
      ["shippingHolidays", ["FedexWebServices::Soap::Locations::ShippingHoliday[]", XSD::QName.new(NsV12, "ShippingHolidays")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::ClearanceCountryDetail,
    :schema_type => XSD::QName.new(NsV12, "ClearanceCountryDetail"),
    :schema_element => [
      ["clearanceCountry", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ClearanceCountry")], [0, 1]],
      ["servicesSupported", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "ServicesSupported")], [0, nil]],
      ["specialServicesSupported", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "SpecialServicesSupported")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::ClearanceLocationDetail,
    :schema_type => XSD::QName.new(NsV12, "ClearanceLocationDetail"),
    :schema_element => [
      ["servicesSupported", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "ServicesSupported")], [0, nil]],
      ["consolidationType", ["FedexWebServices::Soap::Locations::ConsolidationType", XSD::QName.new(NsV12, "ConsolidationType")], [0, 1]],
      ["clearanceLocationType", ["FedexWebServices::Soap::Locations::DistributionClearanceType", XSD::QName.new(NsV12, "ClearanceLocationType")], [0, 1]],
      ["specialServicesSupported", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "SpecialServicesSupported")], [0, nil]],
      ["clearanceCountries", ["FedexWebServices::Soap::Locations::ClearanceCountryDetail[]", XSD::QName.new(NsV12, "ClearanceCountries")], [0, nil]],
      ["clearanceRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ClearanceRoutingCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::ClientDetail,
    :schema_type => XSD::QName.new(NsV12, "ClientDetail"),
    :schema_element => [
      ["accountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "AccountNumber")]],
      ["meterNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "MeterNumber")]],
      ["meterInstance", ["SOAP::SOAPString", XSD::QName.new(NsV12, "MeterInstance")], [0, 1]],
      ["integratorId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "IntegratorId")], [0, 1]],
      ["region", ["FedexWebServices::Soap::Locations::ExpressRegionCode", XSD::QName.new(NsV12, "Region")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::Locations::Localization", XSD::QName.new(NsV12, "Localization")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::Contact,
    :schema_type => XSD::QName.new(NsV12, "Contact"),
    :schema_element => [
      ["contactId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ContactId")], [0, 1]],
      ["personName", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PersonName")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Title")], [0, 1]],
      ["companyName", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CompanyName")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PhoneNumber")], [0, 1]],
      ["phoneExtension", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PhoneExtension")], [0, 1]],
      ["tollFreePhoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "TollFreePhoneNumber")], [0, 1]],
      ["pagerNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PagerNumber")], [0, 1]],
      ["faxNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "FaxNumber")], [0, 1]],
      ["eMailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV12, "EMailAddress")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::Dimensions,
    :schema_type => XSD::QName.new(NsV12, "Dimensions"),
    :schema_element => [
      ["length", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "Length")], [0, 1]],
      ["width", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "Width")], [0, 1]],
      ["height", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "Height")], [0, 1]],
      ["units", ["FedexWebServices::Soap::Locations::LinearUnits", XSD::QName.new(NsV12, "Units")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::Distance,
    :schema_type => XSD::QName.new(NsV12, "Distance"),
    :schema_element => [
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV12, "Value")], [0, 1]],
      ["units", ["FedexWebServices::Soap::Locations::DistanceUnits", XSD::QName.new(NsV12, "Units")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::DistanceAndLocationDetail,
    :schema_type => XSD::QName.new(NsV12, "DistanceAndLocationDetail"),
    :schema_element => [
      ["distance", ["FedexWebServices::Soap::Locations::Distance", XSD::QName.new(NsV12, "Distance")], [0, 1]],
      ["reservationAvailabilityDetail", ["FedexWebServices::Soap::Locations::ReservationAvailabilityDetail", XSD::QName.new(NsV12, "ReservationAvailabilityDetail")], [0, 1]],
      ["supportedRedirectToHoldServices", ["FedexWebServices::Soap::Locations::SupportedRedirectToHoldServiceType[]", XSD::QName.new(NsV12, "SupportedRedirectToHoldServices")], [0, nil]],
      ["locationDetail", ["FedexWebServices::Soap::Locations::LocationDetail", XSD::QName.new(NsV12, "LocationDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::Holiday,
    :schema_type => XSD::QName.new(NsV12, "Holiday"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Name")], [0, 1]],
      ["date", ["SOAP::SOAPDate", XSD::QName.new(NsV12, "Date")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LatestDropOffDetail,
    :schema_type => XSD::QName.new(NsV12, "LatestDropOffDetail"),
    :schema_element => [
      ["dayOfWeek", ["FedexWebServices::Soap::Locations::DayOfWeekType", XSD::QName.new(NsV12, "DayOfWeek")], [0, 1]],
      ["time", ["SOAP::SOAPTime", XSD::QName.new(NsV12, "Time")], [0, 1]],
      ["overlays", ["FedexWebServices::Soap::Locations::LatestDropoffOverlayDetail[]", XSD::QName.new(NsV12, "Overlays")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LatestDropoffOverlayDetail,
    :schema_type => XSD::QName.new(NsV12, "LatestDropoffOverlayDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::Locations::LatestDropOffOverlayType", XSD::QName.new(NsV12, "Type")], [0, 1]],
      ["time", ["SOAP::SOAPTime", XSD::QName.new(NsV12, "Time")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::Localization,
    :schema_type => XSD::QName.new(NsV12, "Localization"),
    :schema_element => [
      ["languageCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LanguageCode")]],
      ["localeCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocaleCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationCapabilityDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationCapabilityDetail"),
    :schema_element => [
      ["carrierCode", ["FedexWebServices::Soap::Locations::CarrierCodeType", XSD::QName.new(NsV12, "CarrierCode")], [0, 1]],
      ["serviceType", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ServiceType")], [0, 1]],
      ["serviceCategory", ["FedexWebServices::Soap::Locations::ServiceCategoryType", XSD::QName.new(NsV12, "ServiceCategory")], [0, 1]],
      ["transferOfPossessionType", ["FedexWebServices::Soap::Locations::LocationTransferOfPossessionType", XSD::QName.new(NsV12, "TransferOfPossessionType")], [0, 1]],
      ["daysOfWeek", ["FedexWebServices::Soap::Locations::DayOfWeekType[]", XSD::QName.new(NsV12, "DaysOfWeek")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationContactAndAddress,
    :schema_type => XSD::QName.new(NsV12, "LocationContactAndAddress"),
    :schema_element => [
      ["contact", ["FedexWebServices::Soap::Locations::Contact", XSD::QName.new(NsV12, "Contact")], [0, 1]],
      ["address", ["FedexWebServices::Soap::Locations::Address", XSD::QName.new(NsV12, "Address")], [0, 1]],
      ["addressAncillaryDetail", ["FedexWebServices::Soap::Locations::AddressAncillaryDetail", XSD::QName.new(NsV12, "AddressAncillaryDetail")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationDetail"),
    :schema_element => [
      ["locationId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocationId")], [0, 1]],
      ["storeNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "StoreNumber")], [0, 1]],
      ["locationContactAndAddress", ["FedexWebServices::Soap::Locations::LocationContactAndAddress", XSD::QName.new(NsV12, "LocationContactAndAddress")], [0, 1]],
      ["specialInstructions", ["SOAP::SOAPString", XSD::QName.new(NsV12, "SpecialInstructions")], [0, 1]],
      ["timeZoneOffset", ["SOAP::SOAPString", XSD::QName.new(NsV12, "TimeZoneOffset")], [0, 1]],
      ["locationType", ["FedexWebServices::Soap::Locations::FedExLocationType", XSD::QName.new(NsV12, "LocationType")], [0, 1]],
      ["locationTypeForDisplay", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocationTypeForDisplay")], [0, 1]],
      ["internalFieldsDetail", ["FedexWebServices::Soap::Locations::LocationFieldsForInternalFedexUseDetail", XSD::QName.new(NsV12, "InternalFieldsDetail")], [0, 1]],
      ["attributes", ["FedexWebServices::Soap::Locations::LocationAttributesType[]", XSD::QName.new(NsV12, "Attributes")], [0, nil]],
      ["locationCapabilities", ["FedexWebServices::Soap::Locations::LocationCapabilityDetail[]", XSD::QName.new(NsV12, "LocationCapabilities")], [0, nil]],
      ["packageMaximumLimits", ["FedexWebServices::Soap::Locations::LocationPackageLimitsDetail", XSD::QName.new(NsV12, "PackageMaximumLimits")], [0, 1]],
      ["clearanceLocationDetail", ["FedexWebServices::Soap::Locations::ClearanceLocationDetail", XSD::QName.new(NsV12, "ClearanceLocationDetail")], [0, 1]],
      ["servicingLocationDetails", ["FedexWebServices::Soap::Locations::LocationIdentificationDetail[]", XSD::QName.new(NsV12, "ServicingLocationDetails")], [0, nil]],
      ["acceptedCurrency", ["SOAP::SOAPString", XSD::QName.new(NsV12, "AcceptedCurrency")], [0, 1]],
      ["locationHolidays", ["FedexWebServices::Soap::Locations::Holiday[]", XSD::QName.new(NsV12, "LocationHolidays")], [0, nil]],
      ["mapUrl", ["SOAP::SOAPString", XSD::QName.new(NsV12, "MapUrl")], [0, 1]],
      ["entityId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "EntityId")], [0, 1]],
      ["normalHours", ["FedexWebServices::Soap::Locations::LocationHours[]", XSD::QName.new(NsV12, "NormalHours")], [0, nil]],
      ["exceptionalHours", ["FedexWebServices::Soap::Locations::LocationHours[]", XSD::QName.new(NsV12, "ExceptionalHours")], [0, nil]],
      ["hoursForEffectiveDate", ["FedexWebServices::Soap::Locations::LocationHours[]", XSD::QName.new(NsV12, "HoursForEffectiveDate")], [0, nil]],
      ["carrierDetails", ["FedexWebServices::Soap::Locations::CarrierDetail[]", XSD::QName.new(NsV12, "CarrierDetails")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationFieldsForInternalFedexUseDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationFieldsForInternalFedexUseDetail"),
    :schema_element => [
      ["nonRevenueAccountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "NonRevenueAccountNumber")], [0, 1]],
      ["cityCenterAccountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CityCenterAccountNumber")], [0, 1]],
      ["customsLocationId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CustomsLocationId")], [0, 1]],
      ["costCenterCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CostCenterCode")], [0, 1]],
      ["attributes", ["FedexWebServices::Soap::Locations::LocationAttributesForInternalFedexUseType[]", XSD::QName.new(NsV12, "Attributes")], [0, nil]],
      ["operationalContact", ["FedexWebServices::Soap::Locations::Contact", XSD::QName.new(NsV12, "OperationalContact")], [0, 1]],
      ["localAirportId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocalAirportId")], [0, 1]],
      ["regionalAirportId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "RegionalAirportId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationHours,
    :schema_type => XSD::QName.new(NsV12, "LocationHours"),
    :schema_element => [
      ["dayofWeek", ["FedexWebServices::Soap::Locations::DayOfWeekType", XSD::QName.new(NsV12, "DayofWeek")], [0, 1]],
      ["operationalHours", ["FedexWebServices::Soap::Locations::OperationalHoursType", XSD::QName.new(NsV12, "OperationalHours")], [0, 1]],
      ["hours", ["FedexWebServices::Soap::Locations::TimeRange[]", XSD::QName.new(NsV12, "Hours")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationIdentificationDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationIdentificationDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::Locations::FedExLocationType", XSD::QName.new(NsV12, "Type")], [0, 1]],
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Id")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV12, "Number")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationPackageLimitsDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationPackageLimitsDetail"),
    :schema_element => [
      ["weight", ["FedexWebServices::Soap::Locations::Weight", XSD::QName.new(NsV12, "Weight")], [0, 1]],
      ["dimensions", ["FedexWebServices::Soap::Locations::Dimensions", XSD::QName.new(NsV12, "Dimensions")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSortDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationSortDetail"),
    :schema_element => [
      ["criterion", ["FedexWebServices::Soap::Locations::LocationSortCriteriaType", XSD::QName.new(NsV12, "Criterion")], [0, 1]],
      ["order", ["FedexWebServices::Soap::Locations::LocationSortOrderType", XSD::QName.new(NsV12, "Order")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSupportedPackageDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationSupportedPackageDetail"),
    :schema_element => [
      ["weight", ["FedexWebServices::Soap::Locations::Weight", XSD::QName.new(NsV12, "Weight")], [0, 1]],
      ["dimensions", ["FedexWebServices::Soap::Locations::Dimensions", XSD::QName.new(NsV12, "Dimensions")], [0, 1]],
      ["serviceOptions", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "ServiceOptions")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSupportedShipmentDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationSupportedShipmentDetail"),
    :schema_element => [
      ["packageDetails", ["FedexWebServices::Soap::Locations::LocationSupportedPackageDetail[]", XSD::QName.new(NsV12, "PackageDetails")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::Notification,
    :schema_type => XSD::QName.new(NsV12, "Notification"),
    :schema_element => [
      ["severity", ["FedexWebServices::Soap::Locations::NotificationSeverityType", XSD::QName.new(NsV12, "Severity")], [0, 1]],
      ["source", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Source")], [0, 1]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Code")], [0, 1]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Message")], [0, 1]],
      ["localizedMessage", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocalizedMessage")], [0, 1]],
      ["messageParameters", ["FedexWebServices::Soap::Locations::NotificationParameter[]", XSD::QName.new(NsV12, "MessageParameters")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::NotificationParameter,
    :schema_type => XSD::QName.new(NsV12, "NotificationParameter"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Id")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Value")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::ReservationAvailabilityDetail,
    :schema_type => XSD::QName.new(NsV12, "ReservationAvailabilityDetail"),
    :schema_element => [
      ["attributes", ["FedexWebServices::Soap::Locations::ReservationAttributesType[]", XSD::QName.new(NsV12, "Attributes")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::SearchLocationConstraints,
    :schema_type => XSD::QName.new(NsV12, "SearchLocationConstraints"),
    :schema_element => [
      ["radiusDistance", ["FedexWebServices::Soap::Locations::Distance", XSD::QName.new(NsV12, "RadiusDistance")], [0, 1]],
      ["dropOffTimeNeeded", ["SOAP::SOAPTime", XSD::QName.new(NsV12, "DropOffTimeNeeded")], [0, 1]],
      ["resultsFilters", ["FedexWebServices::Soap::Locations::LocationSearchFilterType[]", XSD::QName.new(NsV12, "ResultsFilters")], [0, nil]],
      ["supportedRedirectToHoldServices", ["FedexWebServices::Soap::Locations::SupportedRedirectToHoldServiceType[]", XSD::QName.new(NsV12, "SupportedRedirectToHoldServices")], [0, nil]],
      ["requiredLocationAttributes", ["FedexWebServices::Soap::Locations::LocationAttributesType[]", XSD::QName.new(NsV12, "RequiredLocationAttributes")], [0, nil]],
      ["requiredLocationCapabilities", ["FedexWebServices::Soap::Locations::LocationCapabilityDetail[]", XSD::QName.new(NsV12, "RequiredLocationCapabilities")], [0, nil]],
      ["shipmentDetail", ["FedexWebServices::Soap::Locations::LocationSupportedShipmentDetail", XSD::QName.new(NsV12, "ShipmentDetail")], [0, 1]],
      ["resultsToSkip", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "ResultsToSkip")], [0, 1]],
      ["resultsRequested", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "ResultsRequested")], [0, 1]],
      ["locationContentOptions", ["FedexWebServices::Soap::Locations::LocationContentOptionType[]", XSD::QName.new(NsV12, "LocationContentOptions")], [0, nil]],
      ["locationTypesToInclude", ["FedexWebServices::Soap::Locations::FedExLocationType[]", XSD::QName.new(NsV12, "LocationTypesToInclude")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::SearchLocationsReply,
    :schema_type => XSD::QName.new(NsV12, "SearchLocationsReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::Locations::NotificationSeverityType", XSD::QName.new(NsV12, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::Locations::Notification[]", XSD::QName.new(NsV12, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::Locations::TransactionDetail", XSD::QName.new(NsV12, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::Locations::VersionId", XSD::QName.new(NsV12, "Version")]],
      ["totalResultsAvailable", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "TotalResultsAvailable")], [0, 1]],
      ["resultsReturned", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "ResultsReturned")], [0, 1]],
      ["formattedAddress", ["FedexWebServices::Soap::Locations::Address", XSD::QName.new(NsV12, "FormattedAddress")], [0, 1]],
      ["addressToLocationRelationships", ["FedexWebServices::Soap::Locations::AddressToLocationRelationshipDetail[]", XSD::QName.new(NsV12, "AddressToLocationRelationships")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::SearchLocationsRequest,
    :schema_type => XSD::QName.new(NsV12, "SearchLocationsRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::Locations::WebAuthenticationDetail", XSD::QName.new(NsV12, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::Locations::ClientDetail", XSD::QName.new(NsV12, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::Locations::TransactionDetail", XSD::QName.new(NsV12, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::Locations::VersionId", XSD::QName.new(NsV12, "Version")]],
      ["effectiveDate", ["SOAP::SOAPDate", XSD::QName.new(NsV12, "EffectiveDate")], [0, 1]],
      ["locationsSearchCriterion", ["FedexWebServices::Soap::Locations::LocationsSearchCriteriaType", XSD::QName.new(NsV12, "LocationsSearchCriterion")], [0, 1]],
      ["shipperAccountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ShipperAccountNumber")], [0, 1]],
      ["uniqueTrackingNumber", ["FedexWebServices::Soap::Locations::UniqueTrackingNumber", XSD::QName.new(NsV12, "UniqueTrackingNumber")], [0, 1]],
      ["address", ["FedexWebServices::Soap::Locations::Address", XSD::QName.new(NsV12, "Address")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PhoneNumber")], [0, 1]],
      ["geographicCoordinates", ["SOAP::SOAPString", XSD::QName.new(NsV12, "GeographicCoordinates")], [0, 1]],
      ["multipleMatchesAction", ["FedexWebServices::Soap::Locations::MultipleMatchesActionType", XSD::QName.new(NsV12, "MultipleMatchesAction")], [0, 1]],
      ["sortDetail", ["FedexWebServices::Soap::Locations::LocationSortDetail", XSD::QName.new(NsV12, "SortDetail")], [0, 1]],
      ["constraints", ["FedexWebServices::Soap::Locations::SearchLocationConstraints", XSD::QName.new(NsV12, "Constraints")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::ShippingHoliday,
    :schema_type => XSD::QName.new(NsV12, "ShippingHoliday"),
    :schema_element => [
      ["holiday", ["FedexWebServices::Soap::Locations::Holiday", XSD::QName.new(NsV12, "Holiday")], [0, 1]],
      ["unavailableActions", ["FedexWebServices::Soap::Locations::ShippingActionType[]", XSD::QName.new(NsV12, "UnavailableActions")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::TimeRange,
    :schema_type => XSD::QName.new(NsV12, "TimeRange"),
    :schema_element => [
      ["begins", ["SOAP::SOAPTime", XSD::QName.new(NsV12, "Begins")], [0, 1]],
      ["ends", ["SOAP::SOAPTime", XSD::QName.new(NsV12, "Ends")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::TransactionDetail,
    :schema_type => XSD::QName.new(NsV12, "TransactionDetail"),
    :schema_element => [
      ["customerTransactionId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CustomerTransactionId")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::Locations::Localization", XSD::QName.new(NsV12, "Localization")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::UniqueTrackingNumber,
    :schema_type => XSD::QName.new(NsV12, "UniqueTrackingNumber"),
    :schema_element => [
      ["trackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "TrackingNumber")], [0, 1]],
      ["trackingNumberUniqueIdentifier", ["SOAP::SOAPString", XSD::QName.new(NsV12, "TrackingNumberUniqueIdentifier")], [0, 1]],
      ["shipDate", ["SOAP::SOAPDate", XSD::QName.new(NsV12, "ShipDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::Weight,
    :schema_type => XSD::QName.new(NsV12, "Weight"),
    :schema_element => [
      ["units", ["FedexWebServices::Soap::Locations::WeightUnits", XSD::QName.new(NsV12, "Units")], [0, 1]],
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV12, "Value")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::WebAuthenticationDetail,
    :schema_type => XSD::QName.new(NsV12, "WebAuthenticationDetail"),
    :schema_element => [
      ["parentCredential", ["FedexWebServices::Soap::Locations::WebAuthenticationCredential", XSD::QName.new(NsV12, "ParentCredential")], [0, 1]],
      ["userCredential", ["FedexWebServices::Soap::Locations::WebAuthenticationCredential", XSD::QName.new(NsV12, "UserCredential")]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::WebAuthenticationCredential,
    :schema_type => XSD::QName.new(NsV12, "WebAuthenticationCredential"),
    :schema_element => [
      ["key", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Key")]],
      ["password", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Password")]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::VersionId,
    :schema_type => XSD::QName.new(NsV12, "VersionId"),
    :schema_element => [
      ["serviceId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ServiceId")]],
      ["major", ["SOAP::SOAPInt", XSD::QName.new(NsV12, "Major")]],
      ["intermediate", ["SOAP::SOAPInt", XSD::QName.new(NsV12, "Intermediate")]],
      ["minor", ["SOAP::SOAPInt", XSD::QName.new(NsV12, "Minor")]]
    ]
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::CarrierCodeType,
    :schema_type => XSD::QName.new(NsV12, "CarrierCodeType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::ConsolidationType,
    :schema_type => XSD::QName.new(NsV12, "ConsolidationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::CountryRelationshipType,
    :schema_type => XSD::QName.new(NsV12, "CountryRelationshipType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::DayOfWeekType,
    :schema_type => XSD::QName.new(NsV12, "DayOfWeekType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::DistanceUnits,
    :schema_type => XSD::QName.new(NsV12, "DistanceUnits")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::DistributionClearanceType,
    :schema_type => XSD::QName.new(NsV12, "DistributionClearanceType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::ExpressRegionCode,
    :schema_type => XSD::QName.new(NsV12, "ExpressRegionCode")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::FedExLocationType,
    :schema_type => XSD::QName.new(NsV12, "FedExLocationType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LatestDropOffOverlayType,
    :schema_type => XSD::QName.new(NsV12, "LatestDropOffOverlayType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LinearUnits,
    :schema_type => XSD::QName.new(NsV12, "LinearUnits")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationAccessibilityType,
    :schema_type => XSD::QName.new(NsV12, "LocationAccessibilityType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationAttributesForInternalFedexUseType,
    :schema_type => XSD::QName.new(NsV12, "LocationAttributesForInternalFedexUseType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationAttributesType,
    :schema_type => XSD::QName.new(NsV12, "LocationAttributesType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationContentOptionType,
    :schema_type => XSD::QName.new(NsV12, "LocationContentOptionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSearchFilterType,
    :schema_type => XSD::QName.new(NsV12, "LocationSearchFilterType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSortCriteriaType,
    :schema_type => XSD::QName.new(NsV12, "LocationSortCriteriaType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSortOrderType,
    :schema_type => XSD::QName.new(NsV12, "LocationSortOrderType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationTransferOfPossessionType,
    :schema_type => XSD::QName.new(NsV12, "LocationTransferOfPossessionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationsSearchCriteriaType,
    :schema_type => XSD::QName.new(NsV12, "LocationsSearchCriteriaType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::MultipleMatchesActionType,
    :schema_type => XSD::QName.new(NsV12, "MultipleMatchesActionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::NotificationSeverityType,
    :schema_type => XSD::QName.new(NsV12, "NotificationSeverityType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::OperationalHoursType,
    :schema_type => XSD::QName.new(NsV12, "OperationalHoursType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::ReservationAttributesType,
    :schema_type => XSD::QName.new(NsV12, "ReservationAttributesType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::ServiceCategoryType,
    :schema_type => XSD::QName.new(NsV12, "ServiceCategoryType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::ShippingActionType,
    :schema_type => XSD::QName.new(NsV12, "ShippingActionType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::SupportedRedirectToHoldServiceType,
    :schema_type => XSD::QName.new(NsV12, "SupportedRedirectToHoldServiceType")
  )

  EncodedRegistry.register(
    :class => FedexWebServices::Soap::Locations::WeightUnits,
    :schema_type => XSD::QName.new(NsV12, "WeightUnits")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::Address,
    :schema_type => XSD::QName.new(NsV12, "Address"),
    :schema_element => [
      ["streetLines", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "StreetLines")], [0, nil]],
      ["city", ["SOAP::SOAPString", XSD::QName.new(NsV12, "City")], [0, 1]],
      ["stateOrProvinceCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "StateOrProvinceCode")], [0, 1]],
      ["postalCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PostalCode")], [0, 1]],
      ["urbanizationCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "UrbanizationCode")], [0, 1]],
      ["countryCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CountryCode")], [0, 1]],
      ["countryName", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CountryName")], [0, 1]],
      ["residential", ["SOAP::SOAPBoolean", XSD::QName.new(NsV12, "Residential")], [0, 1]],
      ["geographicCoordinates", ["SOAP::SOAPString", XSD::QName.new(NsV12, "GeographicCoordinates")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::AddressAncillaryDetail,
    :schema_type => XSD::QName.new(NsV12, "AddressAncillaryDetail"),
    :schema_element => [
      ["locationInCity", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocationInCity")], [0, 1]],
      ["locationInProperty", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocationInProperty")], [0, 1]],
      ["accessibility", ["FedexWebServices::Soap::Locations::LocationAccessibilityType", XSD::QName.new(NsV12, "Accessibility")], [0, 1]],
      ["building", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Building")], [0, 1]],
      ["department", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Department")], [0, 1]],
      ["roomFloor", ["SOAP::SOAPString", XSD::QName.new(NsV12, "RoomFloor")], [0, 1]],
      ["suite", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Suite")], [0, 1]],
      ["apartment", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Apartment")], [0, 1]],
      ["room", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Room")], [0, 1]],
      ["crossStreet", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CrossStreet")], [0, 1]],
      ["additionalDescriptions", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "AdditionalDescriptions")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::AddressToLocationRelationshipDetail,
    :schema_type => XSD::QName.new(NsV12, "AddressToLocationRelationshipDetail"),
    :schema_element => [
      ["matchedAddress", ["FedexWebServices::Soap::Locations::Address", XSD::QName.new(NsV12, "MatchedAddress")], [0, 1]],
      ["matchedAddressGeographicCoordinates", ["SOAP::SOAPString", XSD::QName.new(NsV12, "MatchedAddressGeographicCoordinates")], [0, 1]],
      ["distanceAndLocationDetails", ["FedexWebServices::Soap::Locations::DistanceAndLocationDetail[]", XSD::QName.new(NsV12, "DistanceAndLocationDetails")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::CarrierDetail,
    :schema_type => XSD::QName.new(NsV12, "CarrierDetail"),
    :schema_element => [
      ["carrier", ["FedexWebServices::Soap::Locations::CarrierCodeType", XSD::QName.new(NsV12, "Carrier")], [0, 1]],
      ["serviceCategory", ["FedexWebServices::Soap::Locations::ServiceCategoryType", XSD::QName.new(NsV12, "ServiceCategory")], [0, 1]],
      ["serviceType", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ServiceType")], [0, 1]],
      ["countryRelationship", ["FedexWebServices::Soap::Locations::CountryRelationshipType", XSD::QName.new(NsV12, "CountryRelationship")], [0, 1]],
      ["normalLatestDropOffDetails", ["FedexWebServices::Soap::Locations::LatestDropOffDetail[]", XSD::QName.new(NsV12, "NormalLatestDropOffDetails")], [0, nil]],
      ["exceptionalLatestDropOffDetails", ["FedexWebServices::Soap::Locations::LatestDropOffDetail[]", XSD::QName.new(NsV12, "ExceptionalLatestDropOffDetails")], [0, nil]],
      ["effectiveLatestDropOffDetails", ["FedexWebServices::Soap::Locations::LatestDropOffDetail", XSD::QName.new(NsV12, "EffectiveLatestDropOffDetails")], [0, 1]],
      ["shippingHolidays", ["FedexWebServices::Soap::Locations::ShippingHoliday[]", XSD::QName.new(NsV12, "ShippingHolidays")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::ClearanceCountryDetail,
    :schema_type => XSD::QName.new(NsV12, "ClearanceCountryDetail"),
    :schema_element => [
      ["clearanceCountry", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ClearanceCountry")], [0, 1]],
      ["servicesSupported", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "ServicesSupported")], [0, nil]],
      ["specialServicesSupported", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "SpecialServicesSupported")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::ClearanceLocationDetail,
    :schema_type => XSD::QName.new(NsV12, "ClearanceLocationDetail"),
    :schema_element => [
      ["servicesSupported", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "ServicesSupported")], [0, nil]],
      ["consolidationType", ["FedexWebServices::Soap::Locations::ConsolidationType", XSD::QName.new(NsV12, "ConsolidationType")], [0, 1]],
      ["clearanceLocationType", ["FedexWebServices::Soap::Locations::DistributionClearanceType", XSD::QName.new(NsV12, "ClearanceLocationType")], [0, 1]],
      ["specialServicesSupported", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "SpecialServicesSupported")], [0, nil]],
      ["clearanceCountries", ["FedexWebServices::Soap::Locations::ClearanceCountryDetail[]", XSD::QName.new(NsV12, "ClearanceCountries")], [0, nil]],
      ["clearanceRoutingCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ClearanceRoutingCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::ClientDetail,
    :schema_type => XSD::QName.new(NsV12, "ClientDetail"),
    :schema_element => [
      ["accountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "AccountNumber")]],
      ["meterNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "MeterNumber")]],
      ["meterInstance", ["SOAP::SOAPString", XSD::QName.new(NsV12, "MeterInstance")], [0, 1]],
      ["integratorId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "IntegratorId")], [0, 1]],
      ["region", ["FedexWebServices::Soap::Locations::ExpressRegionCode", XSD::QName.new(NsV12, "Region")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::Locations::Localization", XSD::QName.new(NsV12, "Localization")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::Contact,
    :schema_type => XSD::QName.new(NsV12, "Contact"),
    :schema_element => [
      ["contactId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ContactId")], [0, 1]],
      ["personName", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PersonName")], [0, 1]],
      ["title", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Title")], [0, 1]],
      ["companyName", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CompanyName")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PhoneNumber")], [0, 1]],
      ["phoneExtension", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PhoneExtension")], [0, 1]],
      ["tollFreePhoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "TollFreePhoneNumber")], [0, 1]],
      ["pagerNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PagerNumber")], [0, 1]],
      ["faxNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "FaxNumber")], [0, 1]],
      ["eMailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV12, "EMailAddress")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::Dimensions,
    :schema_type => XSD::QName.new(NsV12, "Dimensions"),
    :schema_element => [
      ["length", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "Length")], [0, 1]],
      ["width", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "Width")], [0, 1]],
      ["height", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "Height")], [0, 1]],
      ["units", ["FedexWebServices::Soap::Locations::LinearUnits", XSD::QName.new(NsV12, "Units")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::Distance,
    :schema_type => XSD::QName.new(NsV12, "Distance"),
    :schema_element => [
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV12, "Value")], [0, 1]],
      ["units", ["FedexWebServices::Soap::Locations::DistanceUnits", XSD::QName.new(NsV12, "Units")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::DistanceAndLocationDetail,
    :schema_type => XSD::QName.new(NsV12, "DistanceAndLocationDetail"),
    :schema_element => [
      ["distance", ["FedexWebServices::Soap::Locations::Distance", XSD::QName.new(NsV12, "Distance")], [0, 1]],
      ["reservationAvailabilityDetail", ["FedexWebServices::Soap::Locations::ReservationAvailabilityDetail", XSD::QName.new(NsV12, "ReservationAvailabilityDetail")], [0, 1]],
      ["supportedRedirectToHoldServices", ["FedexWebServices::Soap::Locations::SupportedRedirectToHoldServiceType[]", XSD::QName.new(NsV12, "SupportedRedirectToHoldServices")], [0, nil]],
      ["locationDetail", ["FedexWebServices::Soap::Locations::LocationDetail", XSD::QName.new(NsV12, "LocationDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::Holiday,
    :schema_type => XSD::QName.new(NsV12, "Holiday"),
    :schema_element => [
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Name")], [0, 1]],
      ["date", ["SOAP::SOAPDate", XSD::QName.new(NsV12, "Date")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LatestDropOffDetail,
    :schema_type => XSD::QName.new(NsV12, "LatestDropOffDetail"),
    :schema_element => [
      ["dayOfWeek", ["FedexWebServices::Soap::Locations::DayOfWeekType", XSD::QName.new(NsV12, "DayOfWeek")], [0, 1]],
      ["time", ["SOAP::SOAPTime", XSD::QName.new(NsV12, "Time")], [0, 1]],
      ["overlays", ["FedexWebServices::Soap::Locations::LatestDropoffOverlayDetail[]", XSD::QName.new(NsV12, "Overlays")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LatestDropoffOverlayDetail,
    :schema_type => XSD::QName.new(NsV12, "LatestDropoffOverlayDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::Locations::LatestDropOffOverlayType", XSD::QName.new(NsV12, "Type")], [0, 1]],
      ["time", ["SOAP::SOAPTime", XSD::QName.new(NsV12, "Time")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::Localization,
    :schema_type => XSD::QName.new(NsV12, "Localization"),
    :schema_element => [
      ["languageCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LanguageCode")]],
      ["localeCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocaleCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationCapabilityDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationCapabilityDetail"),
    :schema_element => [
      ["carrierCode", ["FedexWebServices::Soap::Locations::CarrierCodeType", XSD::QName.new(NsV12, "CarrierCode")], [0, 1]],
      ["serviceType", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ServiceType")], [0, 1]],
      ["serviceCategory", ["FedexWebServices::Soap::Locations::ServiceCategoryType", XSD::QName.new(NsV12, "ServiceCategory")], [0, 1]],
      ["transferOfPossessionType", ["FedexWebServices::Soap::Locations::LocationTransferOfPossessionType", XSD::QName.new(NsV12, "TransferOfPossessionType")], [0, 1]],
      ["daysOfWeek", ["FedexWebServices::Soap::Locations::DayOfWeekType[]", XSD::QName.new(NsV12, "DaysOfWeek")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationContactAndAddress,
    :schema_type => XSD::QName.new(NsV12, "LocationContactAndAddress"),
    :schema_element => [
      ["contact", ["FedexWebServices::Soap::Locations::Contact", XSD::QName.new(NsV12, "Contact")], [0, 1]],
      ["address", ["FedexWebServices::Soap::Locations::Address", XSD::QName.new(NsV12, "Address")], [0, 1]],
      ["addressAncillaryDetail", ["FedexWebServices::Soap::Locations::AddressAncillaryDetail", XSD::QName.new(NsV12, "AddressAncillaryDetail")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationDetail"),
    :schema_element => [
      ["locationId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocationId")], [0, 1]],
      ["storeNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "StoreNumber")], [0, 1]],
      ["locationContactAndAddress", ["FedexWebServices::Soap::Locations::LocationContactAndAddress", XSD::QName.new(NsV12, "LocationContactAndAddress")], [0, 1]],
      ["specialInstructions", ["SOAP::SOAPString", XSD::QName.new(NsV12, "SpecialInstructions")], [0, 1]],
      ["timeZoneOffset", ["SOAP::SOAPString", XSD::QName.new(NsV12, "TimeZoneOffset")], [0, 1]],
      ["locationType", ["FedexWebServices::Soap::Locations::FedExLocationType", XSD::QName.new(NsV12, "LocationType")], [0, 1]],
      ["locationTypeForDisplay", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocationTypeForDisplay")], [0, 1]],
      ["internalFieldsDetail", ["FedexWebServices::Soap::Locations::LocationFieldsForInternalFedexUseDetail", XSD::QName.new(NsV12, "InternalFieldsDetail")], [0, 1]],
      ["attributes", ["FedexWebServices::Soap::Locations::LocationAttributesType[]", XSD::QName.new(NsV12, "Attributes")], [0, nil]],
      ["locationCapabilities", ["FedexWebServices::Soap::Locations::LocationCapabilityDetail[]", XSD::QName.new(NsV12, "LocationCapabilities")], [0, nil]],
      ["packageMaximumLimits", ["FedexWebServices::Soap::Locations::LocationPackageLimitsDetail", XSD::QName.new(NsV12, "PackageMaximumLimits")], [0, 1]],
      ["clearanceLocationDetail", ["FedexWebServices::Soap::Locations::ClearanceLocationDetail", XSD::QName.new(NsV12, "ClearanceLocationDetail")], [0, 1]],
      ["servicingLocationDetails", ["FedexWebServices::Soap::Locations::LocationIdentificationDetail[]", XSD::QName.new(NsV12, "ServicingLocationDetails")], [0, nil]],
      ["acceptedCurrency", ["SOAP::SOAPString", XSD::QName.new(NsV12, "AcceptedCurrency")], [0, 1]],
      ["locationHolidays", ["FedexWebServices::Soap::Locations::Holiday[]", XSD::QName.new(NsV12, "LocationHolidays")], [0, nil]],
      ["mapUrl", ["SOAP::SOAPString", XSD::QName.new(NsV12, "MapUrl")], [0, 1]],
      ["entityId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "EntityId")], [0, 1]],
      ["normalHours", ["FedexWebServices::Soap::Locations::LocationHours[]", XSD::QName.new(NsV12, "NormalHours")], [0, nil]],
      ["exceptionalHours", ["FedexWebServices::Soap::Locations::LocationHours[]", XSD::QName.new(NsV12, "ExceptionalHours")], [0, nil]],
      ["hoursForEffectiveDate", ["FedexWebServices::Soap::Locations::LocationHours[]", XSD::QName.new(NsV12, "HoursForEffectiveDate")], [0, nil]],
      ["carrierDetails", ["FedexWebServices::Soap::Locations::CarrierDetail[]", XSD::QName.new(NsV12, "CarrierDetails")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationFieldsForInternalFedexUseDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationFieldsForInternalFedexUseDetail"),
    :schema_element => [
      ["nonRevenueAccountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "NonRevenueAccountNumber")], [0, 1]],
      ["cityCenterAccountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CityCenterAccountNumber")], [0, 1]],
      ["customsLocationId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CustomsLocationId")], [0, 1]],
      ["costCenterCode", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CostCenterCode")], [0, 1]],
      ["attributes", ["FedexWebServices::Soap::Locations::LocationAttributesForInternalFedexUseType[]", XSD::QName.new(NsV12, "Attributes")], [0, nil]],
      ["operationalContact", ["FedexWebServices::Soap::Locations::Contact", XSD::QName.new(NsV12, "OperationalContact")], [0, 1]],
      ["localAirportId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocalAirportId")], [0, 1]],
      ["regionalAirportId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "RegionalAirportId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationHours,
    :schema_type => XSD::QName.new(NsV12, "LocationHours"),
    :schema_element => [
      ["dayofWeek", ["FedexWebServices::Soap::Locations::DayOfWeekType", XSD::QName.new(NsV12, "DayofWeek")], [0, 1]],
      ["operationalHours", ["FedexWebServices::Soap::Locations::OperationalHoursType", XSD::QName.new(NsV12, "OperationalHours")], [0, 1]],
      ["hours", ["FedexWebServices::Soap::Locations::TimeRange[]", XSD::QName.new(NsV12, "Hours")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationIdentificationDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationIdentificationDetail"),
    :schema_element => [
      ["type", ["FedexWebServices::Soap::Locations::FedExLocationType", XSD::QName.new(NsV12, "Type")], [0, 1]],
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Id")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV12, "Number")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationPackageLimitsDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationPackageLimitsDetail"),
    :schema_element => [
      ["weight", ["FedexWebServices::Soap::Locations::Weight", XSD::QName.new(NsV12, "Weight")], [0, 1]],
      ["dimensions", ["FedexWebServices::Soap::Locations::Dimensions", XSD::QName.new(NsV12, "Dimensions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSortDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationSortDetail"),
    :schema_element => [
      ["criterion", ["FedexWebServices::Soap::Locations::LocationSortCriteriaType", XSD::QName.new(NsV12, "Criterion")], [0, 1]],
      ["order", ["FedexWebServices::Soap::Locations::LocationSortOrderType", XSD::QName.new(NsV12, "Order")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSupportedPackageDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationSupportedPackageDetail"),
    :schema_element => [
      ["weight", ["FedexWebServices::Soap::Locations::Weight", XSD::QName.new(NsV12, "Weight")], [0, 1]],
      ["dimensions", ["FedexWebServices::Soap::Locations::Dimensions", XSD::QName.new(NsV12, "Dimensions")], [0, 1]],
      ["serviceOptions", ["SOAP::SOAPString[]", XSD::QName.new(NsV12, "ServiceOptions")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSupportedShipmentDetail,
    :schema_type => XSD::QName.new(NsV12, "LocationSupportedShipmentDetail"),
    :schema_element => [
      ["packageDetails", ["FedexWebServices::Soap::Locations::LocationSupportedPackageDetail[]", XSD::QName.new(NsV12, "PackageDetails")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::Notification,
    :schema_type => XSD::QName.new(NsV12, "Notification"),
    :schema_element => [
      ["severity", ["FedexWebServices::Soap::Locations::NotificationSeverityType", XSD::QName.new(NsV12, "Severity")], [0, 1]],
      ["source", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Source")], [0, 1]],
      ["code", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Code")], [0, 1]],
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Message")], [0, 1]],
      ["localizedMessage", ["SOAP::SOAPString", XSD::QName.new(NsV12, "LocalizedMessage")], [0, 1]],
      ["messageParameters", ["FedexWebServices::Soap::Locations::NotificationParameter[]", XSD::QName.new(NsV12, "MessageParameters")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::NotificationParameter,
    :schema_type => XSD::QName.new(NsV12, "NotificationParameter"),
    :schema_element => [
      ["id", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Id")], [0, 1]],
      ["value", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Value")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::ReservationAvailabilityDetail,
    :schema_type => XSD::QName.new(NsV12, "ReservationAvailabilityDetail"),
    :schema_element => [
      ["attributes", ["FedexWebServices::Soap::Locations::ReservationAttributesType[]", XSD::QName.new(NsV12, "Attributes")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::SearchLocationConstraints,
    :schema_type => XSD::QName.new(NsV12, "SearchLocationConstraints"),
    :schema_element => [
      ["radiusDistance", ["FedexWebServices::Soap::Locations::Distance", XSD::QName.new(NsV12, "RadiusDistance")], [0, 1]],
      ["dropOffTimeNeeded", ["SOAP::SOAPTime", XSD::QName.new(NsV12, "DropOffTimeNeeded")], [0, 1]],
      ["resultsFilters", ["FedexWebServices::Soap::Locations::LocationSearchFilterType[]", XSD::QName.new(NsV12, "ResultsFilters")], [0, nil]],
      ["supportedRedirectToHoldServices", ["FedexWebServices::Soap::Locations::SupportedRedirectToHoldServiceType[]", XSD::QName.new(NsV12, "SupportedRedirectToHoldServices")], [0, nil]],
      ["requiredLocationAttributes", ["FedexWebServices::Soap::Locations::LocationAttributesType[]", XSD::QName.new(NsV12, "RequiredLocationAttributes")], [0, nil]],
      ["requiredLocationCapabilities", ["FedexWebServices::Soap::Locations::LocationCapabilityDetail[]", XSD::QName.new(NsV12, "RequiredLocationCapabilities")], [0, nil]],
      ["shipmentDetail", ["FedexWebServices::Soap::Locations::LocationSupportedShipmentDetail", XSD::QName.new(NsV12, "ShipmentDetail")], [0, 1]],
      ["resultsToSkip", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "ResultsToSkip")], [0, 1]],
      ["resultsRequested", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "ResultsRequested")], [0, 1]],
      ["locationContentOptions", ["FedexWebServices::Soap::Locations::LocationContentOptionType[]", XSD::QName.new(NsV12, "LocationContentOptions")], [0, nil]],
      ["locationTypesToInclude", ["FedexWebServices::Soap::Locations::FedExLocationType[]", XSD::QName.new(NsV12, "LocationTypesToInclude")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::SearchLocationsReply,
    :schema_type => XSD::QName.new(NsV12, "SearchLocationsReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::Locations::NotificationSeverityType", XSD::QName.new(NsV12, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::Locations::Notification[]", XSD::QName.new(NsV12, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::Locations::TransactionDetail", XSD::QName.new(NsV12, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::Locations::VersionId", XSD::QName.new(NsV12, "Version")]],
      ["totalResultsAvailable", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "TotalResultsAvailable")], [0, 1]],
      ["resultsReturned", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "ResultsReturned")], [0, 1]],
      ["formattedAddress", ["FedexWebServices::Soap::Locations::Address", XSD::QName.new(NsV12, "FormattedAddress")], [0, 1]],
      ["addressToLocationRelationships", ["FedexWebServices::Soap::Locations::AddressToLocationRelationshipDetail[]", XSD::QName.new(NsV12, "AddressToLocationRelationships")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::SearchLocationsRequest,
    :schema_type => XSD::QName.new(NsV12, "SearchLocationsRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::Locations::WebAuthenticationDetail", XSD::QName.new(NsV12, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::Locations::ClientDetail", XSD::QName.new(NsV12, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::Locations::TransactionDetail", XSD::QName.new(NsV12, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::Locations::VersionId", XSD::QName.new(NsV12, "Version")]],
      ["effectiveDate", ["SOAP::SOAPDate", XSD::QName.new(NsV12, "EffectiveDate")], [0, 1]],
      ["locationsSearchCriterion", ["FedexWebServices::Soap::Locations::LocationsSearchCriteriaType", XSD::QName.new(NsV12, "LocationsSearchCriterion")], [0, 1]],
      ["shipperAccountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ShipperAccountNumber")], [0, 1]],
      ["uniqueTrackingNumber", ["FedexWebServices::Soap::Locations::UniqueTrackingNumber", XSD::QName.new(NsV12, "UniqueTrackingNumber")], [0, 1]],
      ["address", ["FedexWebServices::Soap::Locations::Address", XSD::QName.new(NsV12, "Address")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PhoneNumber")], [0, 1]],
      ["geographicCoordinates", ["SOAP::SOAPString", XSD::QName.new(NsV12, "GeographicCoordinates")], [0, 1]],
      ["multipleMatchesAction", ["FedexWebServices::Soap::Locations::MultipleMatchesActionType", XSD::QName.new(NsV12, "MultipleMatchesAction")], [0, 1]],
      ["sortDetail", ["FedexWebServices::Soap::Locations::LocationSortDetail", XSD::QName.new(NsV12, "SortDetail")], [0, 1]],
      ["constraints", ["FedexWebServices::Soap::Locations::SearchLocationConstraints", XSD::QName.new(NsV12, "Constraints")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::ShippingHoliday,
    :schema_type => XSD::QName.new(NsV12, "ShippingHoliday"),
    :schema_element => [
      ["holiday", ["FedexWebServices::Soap::Locations::Holiday", XSD::QName.new(NsV12, "Holiday")], [0, 1]],
      ["unavailableActions", ["FedexWebServices::Soap::Locations::ShippingActionType[]", XSD::QName.new(NsV12, "UnavailableActions")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::TimeRange,
    :schema_type => XSD::QName.new(NsV12, "TimeRange"),
    :schema_element => [
      ["begins", ["SOAP::SOAPTime", XSD::QName.new(NsV12, "Begins")], [0, 1]],
      ["ends", ["SOAP::SOAPTime", XSD::QName.new(NsV12, "Ends")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::TransactionDetail,
    :schema_type => XSD::QName.new(NsV12, "TransactionDetail"),
    :schema_element => [
      ["customerTransactionId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "CustomerTransactionId")], [0, 1]],
      ["localization", ["FedexWebServices::Soap::Locations::Localization", XSD::QName.new(NsV12, "Localization")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::UniqueTrackingNumber,
    :schema_type => XSD::QName.new(NsV12, "UniqueTrackingNumber"),
    :schema_element => [
      ["trackingNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "TrackingNumber")], [0, 1]],
      ["trackingNumberUniqueIdentifier", ["SOAP::SOAPString", XSD::QName.new(NsV12, "TrackingNumberUniqueIdentifier")], [0, 1]],
      ["shipDate", ["SOAP::SOAPDate", XSD::QName.new(NsV12, "ShipDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::Weight,
    :schema_type => XSD::QName.new(NsV12, "Weight"),
    :schema_element => [
      ["units", ["FedexWebServices::Soap::Locations::WeightUnits", XSD::QName.new(NsV12, "Units")], [0, 1]],
      ["value", ["SOAP::SOAPDecimal", XSD::QName.new(NsV12, "Value")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::WebAuthenticationDetail,
    :schema_type => XSD::QName.new(NsV12, "WebAuthenticationDetail"),
    :schema_element => [
      ["parentCredential", ["FedexWebServices::Soap::Locations::WebAuthenticationCredential", XSD::QName.new(NsV12, "ParentCredential")], [0, 1]],
      ["userCredential", ["FedexWebServices::Soap::Locations::WebAuthenticationCredential", XSD::QName.new(NsV12, "UserCredential")]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::WebAuthenticationCredential,
    :schema_type => XSD::QName.new(NsV12, "WebAuthenticationCredential"),
    :schema_element => [
      ["key", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Key")]],
      ["password", ["SOAP::SOAPString", XSD::QName.new(NsV12, "Password")]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::VersionId,
    :schema_type => XSD::QName.new(NsV12, "VersionId"),
    :schema_element => [
      ["serviceId", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ServiceId")]],
      ["major", ["SOAP::SOAPInt", XSD::QName.new(NsV12, "Major")]],
      ["intermediate", ["SOAP::SOAPInt", XSD::QName.new(NsV12, "Intermediate")]],
      ["minor", ["SOAP::SOAPInt", XSD::QName.new(NsV12, "Minor")]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::CarrierCodeType,
    :schema_type => XSD::QName.new(NsV12, "CarrierCodeType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::ConsolidationType,
    :schema_type => XSD::QName.new(NsV12, "ConsolidationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::CountryRelationshipType,
    :schema_type => XSD::QName.new(NsV12, "CountryRelationshipType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::DayOfWeekType,
    :schema_type => XSD::QName.new(NsV12, "DayOfWeekType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::DistanceUnits,
    :schema_type => XSD::QName.new(NsV12, "DistanceUnits")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::DistributionClearanceType,
    :schema_type => XSD::QName.new(NsV12, "DistributionClearanceType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::ExpressRegionCode,
    :schema_type => XSD::QName.new(NsV12, "ExpressRegionCode")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::FedExLocationType,
    :schema_type => XSD::QName.new(NsV12, "FedExLocationType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LatestDropOffOverlayType,
    :schema_type => XSD::QName.new(NsV12, "LatestDropOffOverlayType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LinearUnits,
    :schema_type => XSD::QName.new(NsV12, "LinearUnits")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationAccessibilityType,
    :schema_type => XSD::QName.new(NsV12, "LocationAccessibilityType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationAttributesForInternalFedexUseType,
    :schema_type => XSD::QName.new(NsV12, "LocationAttributesForInternalFedexUseType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationAttributesType,
    :schema_type => XSD::QName.new(NsV12, "LocationAttributesType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationContentOptionType,
    :schema_type => XSD::QName.new(NsV12, "LocationContentOptionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSearchFilterType,
    :schema_type => XSD::QName.new(NsV12, "LocationSearchFilterType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSortCriteriaType,
    :schema_type => XSD::QName.new(NsV12, "LocationSortCriteriaType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationSortOrderType,
    :schema_type => XSD::QName.new(NsV12, "LocationSortOrderType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationTransferOfPossessionType,
    :schema_type => XSD::QName.new(NsV12, "LocationTransferOfPossessionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::LocationsSearchCriteriaType,
    :schema_type => XSD::QName.new(NsV12, "LocationsSearchCriteriaType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::MultipleMatchesActionType,
    :schema_type => XSD::QName.new(NsV12, "MultipleMatchesActionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::NotificationSeverityType,
    :schema_type => XSD::QName.new(NsV12, "NotificationSeverityType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::OperationalHoursType,
    :schema_type => XSD::QName.new(NsV12, "OperationalHoursType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::ReservationAttributesType,
    :schema_type => XSD::QName.new(NsV12, "ReservationAttributesType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::ServiceCategoryType,
    :schema_type => XSD::QName.new(NsV12, "ServiceCategoryType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::ShippingActionType,
    :schema_type => XSD::QName.new(NsV12, "ShippingActionType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::SupportedRedirectToHoldServiceType,
    :schema_type => XSD::QName.new(NsV12, "SupportedRedirectToHoldServiceType")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::WeightUnits,
    :schema_type => XSD::QName.new(NsV12, "WeightUnits")
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::SearchLocationsReply,
    :schema_name => XSD::QName.new(NsV12, "SearchLocationsReply"),
    :schema_element => [
      ["highestSeverity", ["FedexWebServices::Soap::Locations::NotificationSeverityType", XSD::QName.new(NsV12, "HighestSeverity")]],
      ["notifications", ["FedexWebServices::Soap::Locations::Notification[]", XSD::QName.new(NsV12, "Notifications")], [1, nil]],
      ["transactionDetail", ["FedexWebServices::Soap::Locations::TransactionDetail", XSD::QName.new(NsV12, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::Locations::VersionId", XSD::QName.new(NsV12, "Version")]],
      ["totalResultsAvailable", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "TotalResultsAvailable")], [0, 1]],
      ["resultsReturned", ["SOAP::SOAPNonNegativeInteger", XSD::QName.new(NsV12, "ResultsReturned")], [0, 1]],
      ["formattedAddress", ["FedexWebServices::Soap::Locations::Address", XSD::QName.new(NsV12, "FormattedAddress")], [0, 1]],
      ["addressToLocationRelationships", ["FedexWebServices::Soap::Locations::AddressToLocationRelationshipDetail[]", XSD::QName.new(NsV12, "AddressToLocationRelationships")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FedexWebServices::Soap::Locations::SearchLocationsRequest,
    :schema_name => XSD::QName.new(NsV12, "SearchLocationsRequest"),
    :schema_element => [
      ["webAuthenticationDetail", ["FedexWebServices::Soap::Locations::WebAuthenticationDetail", XSD::QName.new(NsV12, "WebAuthenticationDetail")]],
      ["clientDetail", ["FedexWebServices::Soap::Locations::ClientDetail", XSD::QName.new(NsV12, "ClientDetail")]],
      ["transactionDetail", ["FedexWebServices::Soap::Locations::TransactionDetail", XSD::QName.new(NsV12, "TransactionDetail")], [0, 1]],
      ["version", ["FedexWebServices::Soap::Locations::VersionId", XSD::QName.new(NsV12, "Version")]],
      ["effectiveDate", ["SOAP::SOAPDate", XSD::QName.new(NsV12, "EffectiveDate")], [0, 1]],
      ["locationsSearchCriterion", ["FedexWebServices::Soap::Locations::LocationsSearchCriteriaType", XSD::QName.new(NsV12, "LocationsSearchCriterion")], [0, 1]],
      ["shipperAccountNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "ShipperAccountNumber")], [0, 1]],
      ["uniqueTrackingNumber", ["FedexWebServices::Soap::Locations::UniqueTrackingNumber", XSD::QName.new(NsV12, "UniqueTrackingNumber")], [0, 1]],
      ["address", ["FedexWebServices::Soap::Locations::Address", XSD::QName.new(NsV12, "Address")], [0, 1]],
      ["phoneNumber", ["SOAP::SOAPString", XSD::QName.new(NsV12, "PhoneNumber")], [0, 1]],
      ["geographicCoordinates", ["SOAP::SOAPString", XSD::QName.new(NsV12, "GeographicCoordinates")], [0, 1]],
      ["multipleMatchesAction", ["FedexWebServices::Soap::Locations::MultipleMatchesActionType", XSD::QName.new(NsV12, "MultipleMatchesAction")], [0, 1]],
      ["sortDetail", ["FedexWebServices::Soap::Locations::LocationSortDetail", XSD::QName.new(NsV12, "SortDetail")], [0, 1]],
      ["constraints", ["FedexWebServices::Soap::Locations::SearchLocationConstraints", XSD::QName.new(NsV12, "Constraints")], [0, 1]]
    ]
  )
end

end; end; end
